# Generate release PRs, and follow up with update PRs

name: Release

on:
  push:
    branches:
      - main

permissions: {}

jobs:
  release-please:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      paths_released: ${{ steps.release-please.outputs.paths_released }}
      releases_created: ${{ steps.release-please.outputs.releases_created }}
      to_update: ${{ steps.todo.outputs.TO_UPDATE }}
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@30bf6253fa41bdc8d1501d202ad15287582246b4 # v2.0.3
        with:
          app-id: "${{ secrets.APP_ID }}"
          private-key: "${{ secrets.AUTOMATION_KEY }}"
      - uses: googleapis/release-please-action@7987652d64b4581673a76e33ad5e98e3dd56832f
        id: release-please
        with:
          token: "${{ steps.generate_token.outputs.token }}"
          config-file: release-please.json
          manifest-file: .release-please-manifest.json
      - id: todo
        if: fromJson(steps.release-please.outputs.releases_created)
        run: |
          <<<"$RELEASED_PATHS" jq -r '.[]'| while IFS= read -r x; do
            case "$x" in
              lib/ocrypto)
                echo "TO_UPDATE=['examples','sdk','service']">>"$GITHUB_OUTPUT"
                ;;
              lib/flattening)
                # currently nothing downstream
                # TODO: uncomment when services updates
                # echo "TO_UPDATE=['service']">>"$GITHUB_OUTPUT"
                ;;
              lib/fixtures)
                echo "TO_UPDATE=['sdk','service']">>"$GITHUB_OUTPUT"
                ;;
              lib/identifier)
                # nothing downstream (yet)
                ;;
              protocol/go)
                echo "TO_UPDATE=['examples', 'sdk','service']">>"$GITHUB_OUTPUT"
                ;;
              sdk)
                echo "TO_UPDATE=['examples','service']">>"$GITHUB_OUTPUT"
                ;;
              service)
                # examples does not import service, but assumes it is running separately
                ;;
              examples)
                # nothing downstream
                ;;
              *)
                echo "[WARN] unrecognized module path: [${x}]"
                ;;
            esac
          done
        env:
          RELEASED_PATHS: ${{ steps.release-please.outputs.paths_released }}
  update-go-mods:
    runs-on: ubuntu-latest
    needs:
      - release-please
    if: fromJSON(needs.release-please.outputs.releases_created) && fromJSON(needs.release-please.outputs.to_update)
    strategy:
      matrix:
        path: ${{ fromJSON(needs.release-please.outputs.to_update) }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: false
      - run: |
          git checkout -b update-go-mods-for-$MATRIX_PATH
          git push -f -u origin update-go-mods-for-$MATRIX_PATH
          cd $MATRIX_PATH || exit 1
          <<<"$RELEASED_PATHS" jq -r '.[]'| while IFS= read -r x; do
            export pkg="github.com/opentdf/platform/${x}"
            if go mod edit --json | jq -e '.Replace[] | select(.Old.Path == env.pkg)'; then
              go mod edit --dropreplace="$pkg"
            fi
            echo "Should we update [${pkg}] in [$MATRIX_PATH]?"
            if go mod edit --json | jq -e '.Require[] | select(.Path == env.pkg)'; then
              ver="$(jq -r --arg x "$x" '.[$x]' <"${GITHUB_WORKSPACE}"/.release-please-manifest.json)"
              echo "go get ${pkg}@v${ver}"
              go get "${pkg}@v${ver}"
            fi
            echo "go mod tidy of"
            cat<go.mod
            echo "-----"
            go mod tidy
            cat<go.mod
          done
          git diff
        env:
          GONOSUMDB: github.com/opentdf/platform/${{join(fromJson(needs.release-please.outputs.paths_released), ',github.com/opentdf/platform/')}}
          RELEASED_PATHS: ${{ needs.release-please.outputs.paths_released }}
          MATRIX_PATH: ${{ matrix.path }}
      - uses: planetscale/ghcommit-action@d4176bfacef926cc2db351eab20398dfc2f593b5
        with:
          commit_message: "fix(core): Autobump ${{ matrix.path }}"
          repo: ${{ github.repository }}
          branch: update-go-mods-for-${{ matrix.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@30bf6253fa41bdc8d1501d202ad15287582246b4 # v2.0.3
        with:
          app-id: "${{ secrets.APP_ID }}"
          private-key: "${{ secrets.AUTOMATION_KEY }}"
      - name: create pull request
        run: |
          git restore .
          git pull origin update-go-mods-for-"$MATRIX_PATH"
          gh pr create -B main -H update-go-mods-for-"$MATRIX_PATH" --fill
          gh pr merge --auto --squash
        env:
          GITHUB_TOKEN: "${{ steps.generate_token.outputs.token }}"
          MATRIX_PATH: "${{ matrix.path }}"
