{
  "swagger": "2.0",
  "info": {
    "title": "policy/namespaces/namespaces.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "NamespaceService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/attributes/namespaces": {
      "get": {
        "operationId": "NamespaceService_ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesListNamespacesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "description": "Optional\nACTIVE by default when not specified",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE_STATE_ENUM_UNSPECIFIED",
              "ACTIVE_STATE_ENUM_ACTIVE",
              "ACTIVE_STATE_ENUM_INACTIVE",
              "ACTIVE_STATE_ENUM_ANY"
            ],
            "default": "ACTIVE_STATE_ENUM_UNSPECIFIED"
          },
          {
            "name": "pagination.limit",
            "description": "Optional\nSet to configured default limit if not provided\nMaximum limit set in platform config and enforced by services",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "description": "Optional\nDefaulted if not provided",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      },
      "post": {
        "operationId": "NamespaceService_CreateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesCreateNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/namespacesCreateNamespaceRequest"
            }
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      }
    },
    "/attributes/namespaces/keyaccessserver/grants": {
      "delete": {
        "operationId": "NamespaceService_RemoveKeyAccessServerFromNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesRemoveKeyAccessServerFromNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespaceKeyAccessServer.namespaceId",
            "description": "Required",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespaceKeyAccessServer.keyAccessServerId",
            "description": "Required",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      },
      "post": {
        "summary": "--------------------------------------*\nNamespace \u003c\u003e Key Access Server RPCs\n---------------------------------------",
        "operationId": "NamespaceService_AssignKeyAccessServerToNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesAssignKeyAccessServerToNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespaceKeyAccessServer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/namespacesNamespaceKeyAccessServer"
            }
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      }
    },
    "/attributes/namespaces/{id}": {
      "get": {
        "operationId": "NamespaceService_GetNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesGetNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Deprecated",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespaceId",
            "description": "option (buf.validate.oneof).required = true; // TODO: enable this when we remove the deprecated field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fqn",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      },
      "delete": {
        "operationId": "NamespaceService_DeactivateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesDeactivateNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      },
      "patch": {
        "operationId": "NamespaceService_UpdateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/namespacesUpdateNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/definitions/commonMetadataMutable",
                  "title": "Optional"
                },
                "metadataUpdateBehavior": {
                  "$ref": "#/definitions/commonMetadataUpdateEnum"
                }
              }
            }
          }
        ],
        "tags": [
          "NamespaceService"
        ]
      }
    }
  },
  "definitions": {
    "commonActiveStateEnum": {
      "type": "string",
      "enum": [
        "ACTIVE_STATE_ENUM_UNSPECIFIED",
        "ACTIVE_STATE_ENUM_ACTIVE",
        "ACTIVE_STATE_ENUM_INACTIVE",
        "ACTIVE_STATE_ENUM_ANY"
      ],
      "default": "ACTIVE_STATE_ENUM_UNSPECIFIED",
      "title": "buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package"
    },
    "commonMetadata": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "created_at set by server (entity who created will recorded in an audit event)"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at set by server (entity who updated will recorded in an audit event)"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "optional short description"
        }
      },
      "title": "Struct to uniquely identify a resource with optional additional metadata"
    },
    "commonMetadataMutable": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "optional labels"
        }
      }
    },
    "commonMetadataUpdateEnum": {
      "type": "string",
      "enum": [
        "METADATA_UPDATE_ENUM_UNSPECIFIED",
        "METADATA_UPDATE_ENUM_EXTEND",
        "METADATA_UPDATE_ENUM_REPLACE"
      ],
      "default": "METADATA_UPDATE_ENUM_UNSPECIFIED",
      "title": "- METADATA_UPDATE_ENUM_UNSPECIFIED: unspecified update type\n - METADATA_UPDATE_ENUM_EXTEND: only update the fields that are provided\n - METADATA_UPDATE_ENUM_REPLACE: replace the entire metadata with the provided metadata"
    },
    "namespacesAssignKeyAccessServerToNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespaceKeyAccessServer": {
          "$ref": "#/definitions/namespacesNamespaceKeyAccessServer"
        }
      }
    },
    "namespacesAssignPublicKeyToNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespaceKey": {
          "$ref": "#/definitions/namespacesNamespaceKey"
        }
      }
    },
    "namespacesCreateNamespaceRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Required"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadataMutable",
          "title": "Optional"
        }
      }
    },
    "namespacesCreateNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/policyNamespace"
        }
      }
    },
    "namespacesDeactivateNamespaceResponse": {
      "type": "object"
    },
    "namespacesGetNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/policyNamespace"
        }
      }
    },
    "namespacesListNamespacesResponse": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyNamespace"
          }
        },
        "pagination": {
          "$ref": "#/definitions/policyPageResponse"
        }
      }
    },
    "namespacesNamespaceKey": {
      "type": "object",
      "properties": {
        "namespaceId": {
          "type": "string",
          "title": "Required"
        },
        "keyId": {
          "type": "string",
          "title": "Required (The id from the Asymmetric Key object)"
        }
      }
    },
    "namespacesNamespaceKeyAccessServer": {
      "type": "object",
      "properties": {
        "namespaceId": {
          "type": "string",
          "title": "Required"
        },
        "keyAccessServerId": {
          "type": "string",
          "title": "Required"
        }
      }
    },
    "namespacesRemoveKeyAccessServerFromNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespaceKeyAccessServer": {
          "$ref": "#/definitions/namespacesNamespaceKeyAccessServer"
        }
      }
    },
    "namespacesRemovePublicKeyFromNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespaceKey": {
          "$ref": "#/definitions/namespacesNamespaceKey"
        }
      }
    },
    "namespacesUpdateNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/policyNamespace"
        }
      }
    },
    "policyAlgorithm": {
      "type": "string",
      "enum": [
        "ALGORITHM_UNSPECIFIED",
        "ALGORITHM_RSA_2048",
        "ALGORITHM_RSA_4096",
        "ALGORITHM_EC_P256",
        "ALGORITHM_EC_P384",
        "ALGORITHM_EC_P521"
      ],
      "default": "ALGORITHM_UNSPECIFIED",
      "description": "Supported key algorithms."
    },
    "policyAsymmetricKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Required"
        },
        "keyId": {
          "type": "string",
          "title": "Required"
        },
        "keyAlgorithm": {
          "$ref": "#/definitions/policyAlgorithm",
          "title": "Required"
        },
        "keyStatus": {
          "$ref": "#/definitions/policyKeyStatus",
          "title": "Required"
        },
        "keyMode": {
          "$ref": "#/definitions/policyKeyMode",
          "description": "Specifies how the key is managed (local or remote)",
          "title": "Required"
        },
        "publicKeyCtx": {
          "$ref": "#/definitions/policyKasPublicKeyCtx",
          "description": "Specific structure based on key provider implementation",
          "title": "Required"
        },
        "privateKeyCtx": {
          "$ref": "#/definitions/policyKasPrivateKeyCtx",
          "description": "Specific structure based on key provider implementation",
          "title": "Optional"
        },
        "providerConfig": {
          "$ref": "#/definitions/policyKeyProviderConfig",
          "description": "Configuration for the key provider",
          "title": "Optional"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata",
          "title": "Common metadata fields"
        }
      }
    },
    "policyKasKey": {
      "type": "object",
      "properties": {
        "kasId": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/policyAsymmetricKey"
        },
        "kasUri": {
          "type": "string"
        }
      }
    },
    "policyKasPrivateKeyCtx": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string",
          "description": "Key ID for the symmetric key wrapping this key.",
          "title": "Required"
        },
        "wrappedKey": {
          "type": "string",
          "description": "Base64 encoded wrapped key. Conditionally required if key_mode is LOCAL. Should not be present if key_mode is REMOTE.",
          "title": "Optional"
        }
      }
    },
    "policyKasPublicKey": {
      "type": "object",
      "properties": {
        "pem": {
          "type": "string",
          "title": "x509 ASN.1 content in PEM envelope, usually"
        },
        "kid": {
          "type": "string",
          "title": "A unique string identifier for this key"
        },
        "alg": {
          "$ref": "#/definitions/policyKasPublicKeyAlgEnum",
          "description": "A known algorithm type with any additional parameters encoded.\nTo start, these may be `rsa:2048` for encrypting ZTDF files and\n`ec:secp256r1` for nanoTDF, but more formats may be added as needed."
        }
      },
      "title": "Deprecated\nA KAS public key and some associated metadata for further identifcation"
    },
    "policyKasPublicKeyAlgEnum": {
      "type": "string",
      "enum": [
        "KAS_PUBLIC_KEY_ALG_ENUM_UNSPECIFIED",
        "KAS_PUBLIC_KEY_ALG_ENUM_RSA_2048",
        "KAS_PUBLIC_KEY_ALG_ENUM_RSA_4096",
        "KAS_PUBLIC_KEY_ALG_ENUM_EC_SECP256R1",
        "KAS_PUBLIC_KEY_ALG_ENUM_EC_SECP384R1",
        "KAS_PUBLIC_KEY_ALG_ENUM_EC_SECP521R1"
      ],
      "default": "KAS_PUBLIC_KEY_ALG_ENUM_UNSPECIFIED"
    },
    "policyKasPublicKeyCtx": {
      "type": "object",
      "properties": {
        "pem": {
          "type": "string",
          "description": "Base64 encoded public key in PEM format",
          "title": "Required"
        }
      }
    },
    "policyKasPublicKeySet": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyKasPublicKey"
          }
        }
      },
      "title": "Deprecated\nA list of known KAS public keys"
    },
    "policyKeyAccessServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "title": "Address of a KAS instance"
        },
        "publicKey": {
          "$ref": "#/definitions/policyPublicKey",
          "title": "Deprecated"
        },
        "sourceType": {
          "$ref": "#/definitions/policySourceType",
          "title": "The source of the KAS: (INTERNAL, EXTERNAL)"
        },
        "kasKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyKasKey"
          },
          "title": "Kas keys associated with this KAS"
        },
        "name": {
          "type": "string",
          "title": "Optional\nUnique name of the KAS instance"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata",
          "title": "Common metadata"
        }
      },
      "title": "Key Access Server Registry"
    },
    "policyKeyMode": {
      "type": "string",
      "enum": [
        "KEY_MODE_UNSPECIFIED",
        "KEY_MODE_CONFIG_ROOT_KEY",
        "KEY_MODE_PROVIDER_ROOT_KEY",
        "KEY_MODE_REMOTE",
        "KEY_MODE_PUBLIC_KEY_ONLY"
      ],
      "default": "KEY_MODE_UNSPECIFIED",
      "description": "Describes the management and operational mode of a cryptographic key.\n\n - KEY_MODE_UNSPECIFIED: KEY_MODE_UNSPECIFIED: Default, unspecified key mode. Indicates an uninitialized or error state.\n - KEY_MODE_CONFIG_ROOT_KEY: KEY_MODE_CONFIG_ROOT_KEY: Local key management where the private key is wrapped by a Key Encryption Key (KEK)\nsourced from local configuration. Unwrapping and all cryptographic operations are performed locally.\n - KEY_MODE_PROVIDER_ROOT_KEY: KEY_MODE_PROVIDER_ROOT_KEY: Local key management where the private key is wrapped by a Key Encryption Key (KEK)\nmanaged by an external provider (e.g., a Hardware Security Module or Cloud KMS).\nKey unwrapping is delegated to the external provider; subsequent cryptographic operations\nare performed locally using the unwrapped key.\n - KEY_MODE_REMOTE: KEY_MODE_REMOTE: Remote key management where the private key is stored in, and all cryptographic\noperations are performed by, a remote Key Management Service (KMS) or HSM.\nThe private key material never leaves the secure boundary of the remote system.\n - KEY_MODE_PUBLIC_KEY_ONLY: KEY_MODE_PUBLIC_KEY_ONLY: Public key only mode. Used when only a public key is available or required,\ntypically for wrapping operations (e.g., encrypting a Data Encryption Key (DEK) for an external KAS).\nThe corresponding private key is not managed or accessible by this system."
    },
    "policyKeyProviderConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "configJson": {
          "type": "string",
          "format": "byte"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata",
          "title": "Common metadata"
        }
      }
    },
    "policyKeyStatus": {
      "type": "string",
      "enum": [
        "KEY_STATUS_UNSPECIFIED",
        "KEY_STATUS_ACTIVE",
        "KEY_STATUS_INACTIVE",
        "KEY_STATUS_COMPROMISED"
      ],
      "default": "KEY_STATUS_UNSPECIFIED",
      "title": "The status of the key"
    },
    "policyNamespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "generated uuid in database"
        },
        "name": {
          "type": "string",
          "title": "used to partition Attribute Definitions, support by namespace AuthN and\nenable federation"
        },
        "fqn": {
          "type": "string"
        },
        "active": {
          "type": "boolean",
          "title": "active by default until explicitly deactivated"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata"
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyKeyAccessServer"
          },
          "title": "KAS grants for the namespace"
        },
        "kasKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyKasKey"
          },
          "title": "Keys for the namespace"
        }
      }
    },
    "policyPageRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "Optional\nSet to configured default limit if not provided\nMaximum limit set in platform config and enforced by services"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "title": "Optional\nDefaulted if not provided"
        }
      }
    },
    "policyPageResponse": {
      "type": "object",
      "properties": {
        "currentOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Requested pagination offset"
        },
        "nextOffset": {
          "type": "integer",
          "format": "int32",
          "title": "Calculated with request limit + offset or defaults\nEmpty when none remain after current page"
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "title": "Total count of entire list"
        }
      }
    },
    "policyPublicKey": {
      "type": "object",
      "properties": {
        "remote": {
          "type": "string",
          "title": "kas public key url - optional since can also be retrieved via public key"
        },
        "cached": {
          "$ref": "#/definitions/policyKasPublicKeySet",
          "title": "public key with additional information. Current preferred version"
        }
      },
      "title": "Deprecated"
    },
    "policySourceType": {
      "type": "string",
      "enum": [
        "SOURCE_TYPE_UNSPECIFIED",
        "SOURCE_TYPE_INTERNAL",
        "SOURCE_TYPE_EXTERNAL"
      ],
      "default": "SOURCE_TYPE_UNSPECIFIED",
      "description": "Describes whether this kas is managed by the organization or if they imported\nthe kas information from an external party. These two modes are necessary in order\nto encrypt a tdf dek with an external parties kas public key.\n\n - SOURCE_TYPE_INTERNAL: The kas is managed by the organization.\n - SOURCE_TYPE_EXTERNAL: The kas is managed by an external party."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
