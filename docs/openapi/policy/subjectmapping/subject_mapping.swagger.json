{
  "swagger": "2.0",
  "info": {
    "title": "policy/subjectmapping/subject_mapping.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SubjectMappingService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subject-mappings": {
      "get": {
        "operationId": "SubjectMappingService_ListSubjectMappings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingListSubjectMappingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SubjectMappingService"
        ]
      },
      "post": {
        "operationId": "SubjectMappingService_CreateSubjectMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingCreateSubjectMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subjectMapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subjectmappingSubjectMappingCreateUpdate"
            }
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      }
    },
    "/subject-mappings/match": {
      "post": {
        "summary": "Find matching Subject Mappings for a given Subject",
        "operationId": "SubjectMappingService_MatchSubjectMappings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingMatchSubjectMappingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subject",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subjectmappingSubject"
            }
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      }
    },
    "/subject-mappings/{id}": {
      "get": {
        "operationId": "SubjectMappingService_GetSubjectMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingGetSubjectMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      },
      "delete": {
        "operationId": "SubjectMappingService_DeleteSubjectMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingDeleteSubjectMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      },
      "post": {
        "operationId": "SubjectMappingService_UpdateSubjectMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingUpdateSubjectMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "subjectMapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subjectmappingSubjectMappingCreateUpdate"
            }
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      }
    },
    "/subject-sets": {
      "get": {
        "operationId": "SubjectMappingService_ListSubjectSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingListSubjectSetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SubjectMappingService"
        ]
      },
      "post": {
        "operationId": "SubjectMappingService_CreateSubjectSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingCreateSubjectSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subjectSet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subjectmappingSubjectSetCreateUpdate"
            }
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      }
    },
    "/subject-sets/{id}": {
      "get": {
        "operationId": "SubjectMappingService_GetSubjectSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingGetSubjectSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      },
      "delete": {
        "operationId": "SubjectMappingService_DeleteSubjectSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingDeleteSubjectSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      },
      "post": {
        "operationId": "SubjectMappingService_UpdateSubjectSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/subjectmappingUpdateSubjectSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "subjectSet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subjectmappingSubjectSetCreateUpdate"
            }
          }
        ],
        "tags": [
          "SubjectMappingService"
        ]
      }
    }
  },
  "definitions": {
    "ActionStandardAction": {
      "type": "string",
      "enum": [
        "STANDARD_ACTION_UNSPECIFIED",
        "STANDARD_ACTION_DECRYPT",
        "STANDARD_ACTION_TRANSMIT"
      ],
      "default": "STANDARD_ACTION_UNSPECIFIED",
      "title": "Standard actions supported by the platform"
    },
    "authorizationAction": {
      "type": "object",
      "properties": {
        "standard": {
          "$ref": "#/definitions/ActionStandardAction"
        },
        "custom": {
          "type": "string"
        }
      },
      "title": "An action an entity can take"
    },
    "commonMetadata": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "created_at set by server (entity who created will recorded in an audit event)"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at set by server (entity who updated will recorded in an audit event)"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "optional short description"
        },
        "description": {
          "type": "string",
          "title": "optional long description"
        }
      },
      "title": "Struct to uniquely identify a resource with optional additional metadata"
    },
    "commonMetadataMutable": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "optional short description"
        },
        "description": {
          "type": "string",
          "title": "optional long description"
        }
      }
    },
    "kasregistryKeyAccessServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata"
        },
        "uri": {
          "type": "string",
          "title": "Address of a KAS instance"
        },
        "publicKey": {
          "$ref": "#/definitions/kasregistryPublicKey"
        }
      },
      "title": "Descriptor for a KAS"
    },
    "kasregistryPublicKey": {
      "type": "object",
      "properties": {
        "remote": {
          "type": "string",
          "title": "kas public key url - optional since can also be retrieved via public key"
        },
        "local": {
          "type": "string",
          "title": "public key - optional since can also be retrieved via url"
        }
      }
    },
    "policyattributesValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "generated uuid in database"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata"
        },
        "attributeId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of attribute values that this value is related to (attribute group)"
        },
        "grants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/kasregistryKeyAccessServer"
          },
          "title": "list of key access servers"
        },
        "fqn": {
          "type": "string"
        },
        "active": {
          "type": "boolean",
          "title": "active by default until explicitly deactivated"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "subjectmappingCondition": {
      "type": "object",
      "properties": {
        "subjectAttribute": {
          "type": "string",
          "title": "Resource Attribute Key; NOT Attribute Definition Attribute name"
        },
        "operator": {
          "$ref": "#/definitions/subjectmappingSubjectMappingOperatorEnum",
          "title": "the operator"
        },
        "subjectValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of comparison values for a resource's \u003cattribute\u003e value"
        }
      },
      "description": "Example:  Match Subjects with an attribute \"division\" with a value of \"Accounting\" or \"Marketing\":\n{\n\"subject_attribute\": \"division\",\n\"operator\": \"IN\",\n\"subject_values\" : [\"Accounting\", \"Marketing\"]\n}\n\nExample: Match a subject by preferred username:\n{\n\"subject_attribute\": \"preferredUsername\",\n\"operator\": \"IN\",\n\"subject_values\" : [\"alice@example.org\"]\n}",
      "title": "*\nA Condition defines a rule of \u003csubject attribute\u003e \u003coperator\u003e \u003csubject values\u003e"
    },
    "subjectmappingConditionBooleanTypeEnum": {
      "type": "string",
      "enum": [
        "CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED",
        "CONDITION_BOOLEAN_TYPE_ENUM_AND",
        "CONDITION_BOOLEAN_TYPE_ENUM_OR"
      ],
      "default": "CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED",
      "title": "buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package"
    },
    "subjectmappingConditionGroup": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingCondition"
          }
        },
        "booleanType": {
          "$ref": "#/definitions/subjectmappingConditionBooleanTypeEnum",
          "title": "the boolean evaluation type across the conditions"
        }
      },
      "title": "A Group of conditions with either OR or AND evaluation across the contained conditions"
    },
    "subjectmappingCreateSubjectMappingResponse": {
      "type": "object",
      "properties": {
        "subjectMapping": {
          "$ref": "#/definitions/subjectmappingSubjectMapping"
        }
      }
    },
    "subjectmappingCreateSubjectSetResponse": {
      "type": "object",
      "properties": {
        "subjectSet": {
          "$ref": "#/definitions/subjectmappingSubjectSet"
        }
      }
    },
    "subjectmappingDeleteSubjectMappingResponse": {
      "type": "object",
      "properties": {
        "subjectMapping": {
          "$ref": "#/definitions/subjectmappingSubjectMapping"
        }
      }
    },
    "subjectmappingDeleteSubjectSetResponse": {
      "type": "object",
      "properties": {
        "subjectSet": {
          "$ref": "#/definitions/subjectmappingSubjectSet"
        }
      }
    },
    "subjectmappingGetSubjectMappingResponse": {
      "type": "object",
      "properties": {
        "subjectMapping": {
          "$ref": "#/definitions/subjectmappingSubjectMapping"
        }
      }
    },
    "subjectmappingGetSubjectSetResponse": {
      "type": "object",
      "properties": {
        "subjectSet": {
          "$ref": "#/definitions/subjectmappingSubjectSet"
        }
      }
    },
    "subjectmappingListSubjectMappingsResponse": {
      "type": "object",
      "properties": {
        "subjectMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingSubjectMapping"
          }
        }
      }
    },
    "subjectmappingListSubjectSetsResponse": {
      "type": "object",
      "properties": {
        "subjectSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingSubjectSet"
          }
        }
      }
    },
    "subjectmappingMatchSubjectMappingsResponse": {
      "type": "object",
      "properties": {
        "subjectMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingSubjectMapping"
          }
        }
      }
    },
    "subjectmappingSubject": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object"
        }
      },
      "description": "A Representation of a subject as attribute-\u003evalue pairs.  This would mirror user attributes retrieved\nfrom an authoritative source such as an IDP (Identity Provider) or User Store.  Examples include such ADFS/LDAP, OKTA, etc."
    },
    "subjectmappingSubjectMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata",
          "title": "TODO should this be a list of values?"
        },
        "attributeValue": {
          "$ref": "#/definitions/policyattributesValue",
          "title": "Attribute Value to be mapped to; aka: \"The Entity Entitlement Attribute\""
        },
        "subjectSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingSubjectSet"
          },
          "title": "the subjects included in this mapping"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authorizationAction"
          },
          "title": "The actions permitted by subjects in this mapping"
        }
      },
      "description": "Example: Subjects in sets 1 and 2 are entitled attribute value http://wwww.example.org/attr/example/value/one\nwith permitted actions TRANSMIT and DECRYPT\n{\n\"id\": \"someid\",\n\"attribute_value\": {example_one_attribute_value...},\n\"subject_sets\": [{subject_set_1},{subject_set_2}]\n\"actions\": [\"TRANSMIT\", \"DECRYPT\"]\n}",
      "title": "Subject Mapping: A Policy assigning Subject Set(s) to a permitted attribute value + action(s) combination"
    },
    "subjectmappingSubjectMappingCreateUpdate": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/commonMetadataMutable"
        },
        "attributeValueId": {
          "type": "string",
          "title": "Attribute Value to be mapped to"
        },
        "subjectSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the subjects sets in this mapping"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authorizationAction"
          },
          "title": "The actions permitted by subjects in this mapping"
        }
      }
    },
    "subjectmappingSubjectMappingOperatorEnum": {
      "type": "string",
      "enum": [
        "SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED",
        "SUBJECT_MAPPING_OPERATOR_ENUM_IN",
        "SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN"
      ],
      "default": "SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED",
      "title": "buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package"
    },
    "subjectmappingSubjectSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/commonMetadata"
        },
        "conditionGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingConditionGroup"
          },
          "title": "The conditions groups describing the matching rules for subjects in the set"
        }
      },
      "title": "A Set of subjects described by matching criteria via a list of condition groups.\nA Subject Set can be used by multiple Subject Mappings"
    },
    "subjectmappingSubjectSetCreateUpdate": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/commonMetadataMutable"
        },
        "conditionGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/subjectmappingConditionGroup"
          }
        }
      }
    },
    "subjectmappingUpdateSubjectMappingResponse": {
      "type": "object",
      "properties": {
        "subjectMapping": {
          "$ref": "#/definitions/subjectmappingSubjectMapping"
        }
      }
    },
    "subjectmappingUpdateSubjectSetResponse": {
      "type": "object",
      "properties": {
        "subjectSet": {
          "$ref": "#/definitions/subjectmappingSubjectSet"
        }
      }
    }
  }
}
