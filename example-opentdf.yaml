logger:
  level: debug
  type: text
  output: stdout
# DB and Server confgurations are defaulted for local development
# db:
#   host: localhost
#   port: 5432
#   user: postgres
#   password: changeme
services:
  kas:
    enabled: true
  policy:
    enabled: true
  authorization:
    enabled: true
    url: http://localhost:8888
    client: "tdf-entity-resolution"
    secret: "secret"
    realm: "opentdf"
    legacy: true
  entitlements:
    providers:
      # - type: keycloak
      #   name: gcp
      #   keycloak:
      #     host: "https://keycloak.example.com/auth"
      #     realm: "test"
      #     clientId: "test"
      #     clientSecret:
      #       fromEnv: "KEYCLOAK_CLIENT_SECRET"

      - type: ldap
        name: ad-1
        ldap:
          baseDN: "dc=dev,dc=example,dc=com"
          host: ""
          port: 389
          bindUsername: ""
          bindPassword:
            fromEnv: "LDAP_BIND_PASSWORD"
          attributeFilters:
            exclude:
              - "objectSid"
              - "objectGUID"
              - "msExchMailboxGuid"
              - "msExchMailboxSecurityDescriptor"
server:
  auth:
    enabled: false
    audience: "http://localhost:8080"
    issuer: http://localhost:8888/auth/realms/opentdf
    clients:
      - "opentdf"
    policy:
      ## Default policy for all requests
      default: #"role:readonly"
      ## Role map is used to map external roles to opentdf roles (opentdf_role:idp_role) the benefit of this is that you
      ## can use the builtin policy if desired
      roles:
        ## Dot notation is used to access nested claims (i.e. realm_access.roles)
        claim: # realm_access.roles
        ## Maps the external role to the opentdf role
        ## Note: left side is used in the policy, right side is the external role
        map:
        #  readonly: opentdf-readonly
        #  admin: opentdf-admin
        #  org-admin: opentdf-org-admin
      ## Custom policy (see examples https://github.com/casbin/casbin/tree/master/examples)
      csv: #|
      #  p, role:org-admin, policy:attributes, *, *, allow
      #  p, role:org-admin, policy:subject-mappings, *, *, allow
      #  p, role:org-admin, policy:resource-mappings, *, *, allow
      #  p, role:org-admin, policy:kas-registry, *, *, allow
      ## Custom model (see https://casbin.org/docs/syntax-for-models/)
      model: #|
      #  [request_definition]
      #  r = sub, res, act, obj
      #
      #  [policy_definition]
      #  p = sub, res, act, obj, eft
      #
      #  [role_definition]
      #  g = _, _
      #
      #  [policy_effect]
      #  e = some(where (p.eft == allow)) && !some(where (p.eft == deny))
      #
      #  [matchers]
      #  m = g(r.sub, p.sub) && globOrRegexMatch(r.res, p.res) && globOrRegexMatch(r.act, p.act) && globOrRegexMatch(r.obj, p.obj)

  grpc:
    reflectionEnabled: true # Default is false
  hsm:
    enabled: true
    # As configured by hsm-init-temporary-keys.sh
    pin: "12345"
    slotlabel: "dev-token"
    keys:
      rsa:
        label: development-rsa-kas
      ec:
        label: development-ec-kas
  port: 8080
opa:
  embedded: true # Only for local development
