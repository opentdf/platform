// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: acre/v1/acre.proto

package acrev1

import (
	v11 "github.com/opentdf/opentdf-v2-poc/gen/attributes/v1"
	v1 "github.com/opentdf/opentdf-v2-poc/gen/common/v1"
	_ "github.com/opentdf/opentdf-v2-poc/gen/google/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Set of versioned resource mappings
type ResourceMappingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	Mappings    []*ResourceMapping     `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *ResourceMappingSet) Reset() {
	*x = ResourceMappingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMappingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMappingSet) ProtoMessage() {}

func (x *ResourceMappingSet) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMappingSet.ProtoReflect.Descriptor instead.
func (*ResourceMappingSet) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceMappingSet) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceMappingSet) GetMappings() []*ResourceMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// A modular set of terms that are the "same".  Could be used across resource mappings
type Synonyms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	Terms       []string               `protobuf:"bytes,2,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *Synonyms) Reset() {
	*x = Synonyms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Synonyms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Synonyms) ProtoMessage() {}

func (x *Synonyms) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Synonyms.ProtoReflect.Descriptor instead.
func (*Synonyms) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{1}
}

func (x *Synonyms) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *Synonyms) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

// Map one or more domain specific terms (synonyms) to an attribute value by reference.
//
// Example:
// attributeValueRef: ref http://demo.com/attr/Classification/value/Confidential
// synonymRef:
// terms: ["CONFIDENTIAL", "CONTROLLED UNCLASSIFIED", "OFFICIAL-SENSITIVE", "CUI", "C"]
//
// Example 2:
// attributeValueRef: ref to http://demo.com/attr/Classification/Confidential
// synonymRef:
// terms: ["OFFICIAL-SENSITIVE"]
type ResourceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_       *v1.ResourceDescriptor       `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	AttributeValueRef *v11.AttributeValueReference `protobuf:"bytes,2,opt,name=attribute_value_ref,json=attributeValueRef,proto3" json:"attribute_value_ref,omitempty"`
	SynonymRef        *SynonymRef                  `protobuf:"bytes,3,opt,name=synonym_ref,json=synonymRef,proto3" json:"synonym_ref,omitempty"`
}

func (x *ResourceMapping) Reset() {
	*x = ResourceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMapping) ProtoMessage() {}

func (x *ResourceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMapping.ProtoReflect.Descriptor instead.
func (*ResourceMapping) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceMapping) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceMapping) GetAttributeValueRef() *v11.AttributeValueReference {
	if x != nil {
		return x.AttributeValueRef
	}
	return nil
}

func (x *ResourceMapping) GetSynonymRef() *SynonymRef {
	if x != nil {
		return x.SynonymRef
	}
	return nil
}

// represents modeling an resource code/tag as a group . Use if not in the bounds of an attribute
// definition.  Otherwise use attributes.AttributeGroup
//
// Example:
// value: NATO
// members: [USA, GBR, etc.]
type ResourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// group value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// List of member values
	Members []string `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ResourceGroup) Reset() {
	*x = ResourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroup) ProtoMessage() {}

func (x *ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroup.ProtoReflect.Descriptor instead.
func (*ResourceGroup) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceGroup) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceGroup) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResourceGroup) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

// Reference to a ResourceMapping, one of descriptor or embedded value
type ResourceMappingRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*ResourceMappingRef_Descriptor_
	//	*ResourceMappingRef_ResourceMapping
	Ref isResourceMappingRef_Ref `protobuf_oneof:"ref"`
}

func (x *ResourceMappingRef) Reset() {
	*x = ResourceMappingRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMappingRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMappingRef) ProtoMessage() {}

func (x *ResourceMappingRef) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMappingRef.ProtoReflect.Descriptor instead.
func (*ResourceMappingRef) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{4}
}

func (m *ResourceMappingRef) GetRef() isResourceMappingRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *ResourceMappingRef) GetDescriptor_() *v1.ResourceDescriptor {
	if x, ok := x.GetRef().(*ResourceMappingRef_Descriptor_); ok {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceMappingRef) GetResourceMapping() *ResourceMapping {
	if x, ok := x.GetRef().(*ResourceMappingRef_ResourceMapping); ok {
		return x.ResourceMapping
	}
	return nil
}

type isResourceMappingRef_Ref interface {
	isResourceMappingRef_Ref()
}

type ResourceMappingRef_Descriptor_ struct {
	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3,oneof"`
}

type ResourceMappingRef_ResourceMapping struct {
	ResourceMapping *ResourceMapping `protobuf:"bytes,2,opt,name=resource_mapping,json=resourceMapping,proto3,oneof"`
}

func (*ResourceMappingRef_Descriptor_) isResourceMappingRef_Ref() {}

func (*ResourceMappingRef_ResourceMapping) isResourceMappingRef_Ref() {}

// Reference to a Synonyms, one of descriptor or embedded value
type SynonymRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*SynonymRef_Descriptor_
	//	*SynonymRef_Synonyms
	Ref isSynonymRef_Ref `protobuf_oneof:"ref"`
}

func (x *SynonymRef) Reset() {
	*x = SynonymRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynonymRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynonymRef) ProtoMessage() {}

func (x *SynonymRef) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynonymRef.ProtoReflect.Descriptor instead.
func (*SynonymRef) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{5}
}

func (m *SynonymRef) GetRef() isSynonymRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *SynonymRef) GetDescriptor_() *v1.ResourceDescriptor {
	if x, ok := x.GetRef().(*SynonymRef_Descriptor_); ok {
		return x.Descriptor_
	}
	return nil
}

func (x *SynonymRef) GetSynonyms() *Synonyms {
	if x, ok := x.GetRef().(*SynonymRef_Synonyms); ok {
		return x.Synonyms
	}
	return nil
}

type isSynonymRef_Ref interface {
	isSynonymRef_Ref()
}

type SynonymRef_Descriptor_ struct {
	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3,oneof"`
}

type SynonymRef_Synonyms struct {
	Synonyms *Synonyms `protobuf:"bytes,2,opt,name=synonyms,proto3,oneof"`
}

func (*SynonymRef_Descriptor_) isSynonymRef_Ref() {}

func (*SynonymRef_Synonyms) isSynonymRef_Ref() {}

type ResourceEncodingRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
}

func (x *ResourceEncodingRequestOptions) Reset() {
	*x = ResourceEncodingRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceEncodingRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEncodingRequestOptions) ProtoMessage() {}

func (x *ResourceEncodingRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEncodingRequestOptions.ProtoReflect.Descriptor instead.
func (*ResourceEncodingRequestOptions) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceEncodingRequestOptions) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

type ListResourceEncodingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *ResourceEncodingRequestOptions `protobuf:"bytes,1,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *ListResourceEncodingsRequest) Reset() {
	*x = ListResourceEncodingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceEncodingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceEncodingsRequest) ProtoMessage() {}

func (x *ListResourceEncodingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceEncodingsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceEncodingsRequest) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{7}
}

func (x *ListResourceEncodingsRequest) GetOptions() *ResourceEncodingRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListResourceEncodingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encodings []*ResourceMappingSet `protobuf:"bytes,1,rep,name=encodings,proto3" json:"encodings,omitempty"`
}

func (x *ListResourceEncodingsResponse) Reset() {
	*x = ListResourceEncodingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceEncodingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceEncodingsResponse) ProtoMessage() {}

func (x *ListResourceEncodingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceEncodingsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceEncodingsResponse) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{8}
}

func (x *ListResourceEncodingsResponse) GetEncodings() []*ResourceMappingSet {
	if x != nil {
		return x.Encodings
	}
	return nil
}

type GetResourceEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options *ResourceEncodingRequestOptions `protobuf:"bytes,2,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *GetResourceEncodingRequest) Reset() {
	*x = GetResourceEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceEncodingRequest) ProtoMessage() {}

func (x *GetResourceEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceEncodingRequest.ProtoReflect.Descriptor instead.
func (*GetResourceEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{9}
}

func (x *GetResourceEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetResourceEncodingRequest) GetOptions() *ResourceEncodingRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetResourceEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encodings *ResourceMappingSet `protobuf:"bytes,1,opt,name=encodings,proto3" json:"encodings,omitempty"`
}

func (x *GetResourceEncodingResponse) Reset() {
	*x = GetResourceEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceEncodingResponse) ProtoMessage() {}

func (x *GetResourceEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceEncodingResponse.ProtoReflect.Descriptor instead.
func (*GetResourceEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{10}
}

func (x *GetResourceEncodingResponse) GetEncodings() *ResourceMappingSet {
	if x != nil {
		return x.Encodings
	}
	return nil
}

type CreateResourceEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResourceEncodingRequest) Reset() {
	*x = CreateResourceEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceEncodingRequest) ProtoMessage() {}

func (x *CreateResourceEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceEncodingRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{11}
}

type CreateResourceEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResourceEncodingResponse) Reset() {
	*x = CreateResourceEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceEncodingResponse) ProtoMessage() {}

func (x *CreateResourceEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceEncodingResponse.ProtoReflect.Descriptor instead.
func (*CreateResourceEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{12}
}

type UpdateResourceEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Definition *ResourceMappingSet `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *UpdateResourceEncodingRequest) Reset() {
	*x = UpdateResourceEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceEncodingRequest) ProtoMessage() {}

func (x *UpdateResourceEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceEncodingRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResourceEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateResourceEncodingRequest) GetDefinition() *ResourceMappingSet {
	if x != nil {
		return x.Definition
	}
	return nil
}

type UpdateResourceEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourceEncodingResponse) Reset() {
	*x = UpdateResourceEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceEncodingResponse) ProtoMessage() {}

func (x *UpdateResourceEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceEncodingResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourceEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{14}
}

type DeleteResourceEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteResourceEncodingRequest) Reset() {
	*x = DeleteResourceEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceEncodingRequest) ProtoMessage() {}

func (x *DeleteResourceEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceEncodingRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteResourceEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResourceEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceEncodingResponse) Reset() {
	*x = DeleteResourceEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_v1_acre_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceEncodingResponse) ProtoMessage() {}

func (x *DeleteResourceEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_v1_acre_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceEncodingResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acre_v1_acre_proto_rawDescGZIP(), []int{16}
}

var File_acre_v1_acre_proto protoreflect.FileDescriptor

var file_acre_v1_acre_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x63, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x5f, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x22, 0xde, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x73,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65,
	0x66, 0x22, 0x7e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22,
	0x5f, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x22, 0x72, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x1f, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xe6, 0x05, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x23, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x8c, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x9a,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x8b, 0x01, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x41, 0x63,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x64, 0x66, 0x2d, 0x76, 0x32, 0x2d, 0x70, 0x6f, 0x63, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x61, 0x63, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x72, 0x65, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x41, 0x63, 0x72, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x07, 0x41, 0x63, 0x72, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x41, 0x63, 0x72, 0x65,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x08, 0x41, 0x63, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_acre_v1_acre_proto_rawDescOnce sync.Once
	file_acre_v1_acre_proto_rawDescData = file_acre_v1_acre_proto_rawDesc
)

func file_acre_v1_acre_proto_rawDescGZIP() []byte {
	file_acre_v1_acre_proto_rawDescOnce.Do(func() {
		file_acre_v1_acre_proto_rawDescData = protoimpl.X.CompressGZIP(file_acre_v1_acre_proto_rawDescData)
	})
	return file_acre_v1_acre_proto_rawDescData
}

var file_acre_v1_acre_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_acre_v1_acre_proto_goTypes = []interface{}{
	(*ResourceMappingSet)(nil),             // 0: acre.v1.ResourceMappingSet
	(*Synonyms)(nil),                       // 1: acre.v1.Synonyms
	(*ResourceMapping)(nil),                // 2: acre.v1.ResourceMapping
	(*ResourceGroup)(nil),                  // 3: acre.v1.ResourceGroup
	(*ResourceMappingRef)(nil),             // 4: acre.v1.ResourceMappingRef
	(*SynonymRef)(nil),                     // 5: acre.v1.SynonymRef
	(*ResourceEncodingRequestOptions)(nil), // 6: acre.v1.ResourceEncodingRequestOptions
	(*ListResourceEncodingsRequest)(nil),   // 7: acre.v1.ListResourceEncodingsRequest
	(*ListResourceEncodingsResponse)(nil),  // 8: acre.v1.ListResourceEncodingsResponse
	(*GetResourceEncodingRequest)(nil),     // 9: acre.v1.GetResourceEncodingRequest
	(*GetResourceEncodingResponse)(nil),    // 10: acre.v1.GetResourceEncodingResponse
	(*CreateResourceEncodingRequest)(nil),  // 11: acre.v1.CreateResourceEncodingRequest
	(*CreateResourceEncodingResponse)(nil), // 12: acre.v1.CreateResourceEncodingResponse
	(*UpdateResourceEncodingRequest)(nil),  // 13: acre.v1.UpdateResourceEncodingRequest
	(*UpdateResourceEncodingResponse)(nil), // 14: acre.v1.UpdateResourceEncodingResponse
	(*DeleteResourceEncodingRequest)(nil),  // 15: acre.v1.DeleteResourceEncodingRequest
	(*DeleteResourceEncodingResponse)(nil), // 16: acre.v1.DeleteResourceEncodingResponse
	(*v1.ResourceDescriptor)(nil),          // 17: common.v1.ResourceDescriptor
	(*v11.AttributeValueReference)(nil),    // 18: attributes.v1.AttributeValueReference
}
var file_acre_v1_acre_proto_depIdxs = []int32{
	17, // 0: acre.v1.ResourceMappingSet.descriptor:type_name -> common.v1.ResourceDescriptor
	2,  // 1: acre.v1.ResourceMappingSet.mappings:type_name -> acre.v1.ResourceMapping
	17, // 2: acre.v1.Synonyms.descriptor:type_name -> common.v1.ResourceDescriptor
	17, // 3: acre.v1.ResourceMapping.descriptor:type_name -> common.v1.ResourceDescriptor
	18, // 4: acre.v1.ResourceMapping.attribute_value_ref:type_name -> attributes.v1.AttributeValueReference
	5,  // 5: acre.v1.ResourceMapping.synonym_ref:type_name -> acre.v1.SynonymRef
	17, // 6: acre.v1.ResourceGroup.descriptor:type_name -> common.v1.ResourceDescriptor
	17, // 7: acre.v1.ResourceMappingRef.descriptor:type_name -> common.v1.ResourceDescriptor
	2,  // 8: acre.v1.ResourceMappingRef.resource_mapping:type_name -> acre.v1.ResourceMapping
	17, // 9: acre.v1.SynonymRef.descriptor:type_name -> common.v1.ResourceDescriptor
	1,  // 10: acre.v1.SynonymRef.synonyms:type_name -> acre.v1.Synonyms
	17, // 11: acre.v1.ResourceEncodingRequestOptions.descriptor:type_name -> common.v1.ResourceDescriptor
	6,  // 12: acre.v1.ListResourceEncodingsRequest.options:type_name -> acre.v1.ResourceEncodingRequestOptions
	0,  // 13: acre.v1.ListResourceEncodingsResponse.encodings:type_name -> acre.v1.ResourceMappingSet
	6,  // 14: acre.v1.GetResourceEncodingRequest.options:type_name -> acre.v1.ResourceEncodingRequestOptions
	0,  // 15: acre.v1.GetResourceEncodingResponse.encodings:type_name -> acre.v1.ResourceMappingSet
	0,  // 16: acre.v1.UpdateResourceEncodingRequest.definition:type_name -> acre.v1.ResourceMappingSet
	7,  // 17: acre.v1.ResourcEncodingService.ListResourceEncodings:input_type -> acre.v1.ListResourceEncodingsRequest
	9,  // 18: acre.v1.ResourcEncodingService.GetResourceEncoding:input_type -> acre.v1.GetResourceEncodingRequest
	11, // 19: acre.v1.ResourcEncodingService.CreateResourceEncoding:input_type -> acre.v1.CreateResourceEncodingRequest
	13, // 20: acre.v1.ResourcEncodingService.UpdateResourceEncoding:input_type -> acre.v1.UpdateResourceEncodingRequest
	15, // 21: acre.v1.ResourcEncodingService.DeleteResourceEncoding:input_type -> acre.v1.DeleteResourceEncodingRequest
	8,  // 22: acre.v1.ResourcEncodingService.ListResourceEncodings:output_type -> acre.v1.ListResourceEncodingsResponse
	10, // 23: acre.v1.ResourcEncodingService.GetResourceEncoding:output_type -> acre.v1.GetResourceEncodingResponse
	12, // 24: acre.v1.ResourcEncodingService.CreateResourceEncoding:output_type -> acre.v1.CreateResourceEncodingResponse
	14, // 25: acre.v1.ResourcEncodingService.UpdateResourceEncoding:output_type -> acre.v1.UpdateResourceEncodingResponse
	16, // 26: acre.v1.ResourcEncodingService.DeleteResourceEncoding:output_type -> acre.v1.DeleteResourceEncodingResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_acre_v1_acre_proto_init() }
func file_acre_v1_acre_proto_init() {
	if File_acre_v1_acre_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_acre_v1_acre_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMappingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Synonyms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMappingRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynonymRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceEncodingRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceEncodingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceEncodingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_v1_acre_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acre_v1_acre_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ResourceMappingRef_Descriptor_)(nil),
		(*ResourceMappingRef_ResourceMapping)(nil),
	}
	file_acre_v1_acre_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SynonymRef_Descriptor_)(nil),
		(*SynonymRef_Synonyms)(nil),
	}
	file_acre_v1_acre_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_acre_v1_acre_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acre_v1_acre_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acre_v1_acre_proto_goTypes,
		DependencyIndexes: file_acre_v1_acre_proto_depIdxs,
		MessageInfos:      file_acre_v1_acre_proto_msgTypes,
	}.Build()
	File_acre_v1_acre_proto = out.File
	file_acre_v1_acre_proto_rawDesc = nil
	file_acre_v1_acre_proto_goTypes = nil
	file_acre_v1_acre_proto_depIdxs = nil
}
