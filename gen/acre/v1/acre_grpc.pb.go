// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acre/v1/acre.proto

package acrev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourcEncodingService_ListResourceEncodings_FullMethodName  = "/acre.v1.ResourcEncodingService/ListResourceEncodings"
	ResourcEncodingService_GetResourceEncoding_FullMethodName    = "/acre.v1.ResourcEncodingService/GetResourceEncoding"
	ResourcEncodingService_CreateResourceEncoding_FullMethodName = "/acre.v1.ResourcEncodingService/CreateResourceEncoding"
	ResourcEncodingService_UpdateResourceEncoding_FullMethodName = "/acre.v1.ResourcEncodingService/UpdateResourceEncoding"
	ResourcEncodingService_DeleteResourceEncoding_FullMethodName = "/acre.v1.ResourcEncodingService/DeleteResourceEncoding"
)

// ResourcEncodingServiceClient is the client API for ResourcEncodingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcEncodingServiceClient interface {
	ListResourceEncodings(ctx context.Context, in *ListResourceEncodingsRequest, opts ...grpc.CallOption) (*ListResourceEncodingsResponse, error)
	GetResourceEncoding(ctx context.Context, in *GetResourceEncodingRequest, opts ...grpc.CallOption) (*GetResourceEncodingResponse, error)
	CreateResourceEncoding(ctx context.Context, in *CreateResourceEncodingRequest, opts ...grpc.CallOption) (*CreateResourceEncodingResponse, error)
	UpdateResourceEncoding(ctx context.Context, in *UpdateResourceEncodingRequest, opts ...grpc.CallOption) (*UpdateResourceEncodingResponse, error)
	DeleteResourceEncoding(ctx context.Context, in *DeleteResourceEncodingRequest, opts ...grpc.CallOption) (*DeleteResourceEncodingResponse, error)
}

type resourcEncodingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcEncodingServiceClient(cc grpc.ClientConnInterface) ResourcEncodingServiceClient {
	return &resourcEncodingServiceClient{cc}
}

func (c *resourcEncodingServiceClient) ListResourceEncodings(ctx context.Context, in *ListResourceEncodingsRequest, opts ...grpc.CallOption) (*ListResourceEncodingsResponse, error) {
	out := new(ListResourceEncodingsResponse)
	err := c.cc.Invoke(ctx, ResourcEncodingService_ListResourceEncodings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcEncodingServiceClient) GetResourceEncoding(ctx context.Context, in *GetResourceEncodingRequest, opts ...grpc.CallOption) (*GetResourceEncodingResponse, error) {
	out := new(GetResourceEncodingResponse)
	err := c.cc.Invoke(ctx, ResourcEncodingService_GetResourceEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcEncodingServiceClient) CreateResourceEncoding(ctx context.Context, in *CreateResourceEncodingRequest, opts ...grpc.CallOption) (*CreateResourceEncodingResponse, error) {
	out := new(CreateResourceEncodingResponse)
	err := c.cc.Invoke(ctx, ResourcEncodingService_CreateResourceEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcEncodingServiceClient) UpdateResourceEncoding(ctx context.Context, in *UpdateResourceEncodingRequest, opts ...grpc.CallOption) (*UpdateResourceEncodingResponse, error) {
	out := new(UpdateResourceEncodingResponse)
	err := c.cc.Invoke(ctx, ResourcEncodingService_UpdateResourceEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcEncodingServiceClient) DeleteResourceEncoding(ctx context.Context, in *DeleteResourceEncodingRequest, opts ...grpc.CallOption) (*DeleteResourceEncodingResponse, error) {
	out := new(DeleteResourceEncodingResponse)
	err := c.cc.Invoke(ctx, ResourcEncodingService_DeleteResourceEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcEncodingServiceServer is the server API for ResourcEncodingService service.
// All implementations must embed UnimplementedResourcEncodingServiceServer
// for forward compatibility
type ResourcEncodingServiceServer interface {
	ListResourceEncodings(context.Context, *ListResourceEncodingsRequest) (*ListResourceEncodingsResponse, error)
	GetResourceEncoding(context.Context, *GetResourceEncodingRequest) (*GetResourceEncodingResponse, error)
	CreateResourceEncoding(context.Context, *CreateResourceEncodingRequest) (*CreateResourceEncodingResponse, error)
	UpdateResourceEncoding(context.Context, *UpdateResourceEncodingRequest) (*UpdateResourceEncodingResponse, error)
	DeleteResourceEncoding(context.Context, *DeleteResourceEncodingRequest) (*DeleteResourceEncodingResponse, error)
	mustEmbedUnimplementedResourcEncodingServiceServer()
}

// UnimplementedResourcEncodingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourcEncodingServiceServer struct {
}

func (UnimplementedResourcEncodingServiceServer) ListResourceEncodings(context.Context, *ListResourceEncodingsRequest) (*ListResourceEncodingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceEncodings not implemented")
}
func (UnimplementedResourcEncodingServiceServer) GetResourceEncoding(context.Context, *GetResourceEncodingRequest) (*GetResourceEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceEncoding not implemented")
}
func (UnimplementedResourcEncodingServiceServer) CreateResourceEncoding(context.Context, *CreateResourceEncodingRequest) (*CreateResourceEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceEncoding not implemented")
}
func (UnimplementedResourcEncodingServiceServer) UpdateResourceEncoding(context.Context, *UpdateResourceEncodingRequest) (*UpdateResourceEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceEncoding not implemented")
}
func (UnimplementedResourcEncodingServiceServer) DeleteResourceEncoding(context.Context, *DeleteResourceEncodingRequest) (*DeleteResourceEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceEncoding not implemented")
}
func (UnimplementedResourcEncodingServiceServer) mustEmbedUnimplementedResourcEncodingServiceServer() {
}

// UnsafeResourcEncodingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcEncodingServiceServer will
// result in compilation errors.
type UnsafeResourcEncodingServiceServer interface {
	mustEmbedUnimplementedResourcEncodingServiceServer()
}

func RegisterResourcEncodingServiceServer(s grpc.ServiceRegistrar, srv ResourcEncodingServiceServer) {
	s.RegisterService(&ResourcEncodingService_ServiceDesc, srv)
}

func _ResourcEncodingService_ListResourceEncodings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceEncodingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcEncodingServiceServer).ListResourceEncodings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcEncodingService_ListResourceEncodings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcEncodingServiceServer).ListResourceEncodings(ctx, req.(*ListResourceEncodingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcEncodingService_GetResourceEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcEncodingServiceServer).GetResourceEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcEncodingService_GetResourceEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcEncodingServiceServer).GetResourceEncoding(ctx, req.(*GetResourceEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcEncodingService_CreateResourceEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcEncodingServiceServer).CreateResourceEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcEncodingService_CreateResourceEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcEncodingServiceServer).CreateResourceEncoding(ctx, req.(*CreateResourceEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcEncodingService_UpdateResourceEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcEncodingServiceServer).UpdateResourceEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcEncodingService_UpdateResourceEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcEncodingServiceServer).UpdateResourceEncoding(ctx, req.(*UpdateResourceEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcEncodingService_DeleteResourceEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcEncodingServiceServer).DeleteResourceEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcEncodingService_DeleteResourceEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcEncodingServiceServer).DeleteResourceEncoding(ctx, req.(*DeleteResourceEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcEncodingService_ServiceDesc is the grpc.ServiceDesc for ResourcEncodingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcEncodingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acre.v1.ResourcEncodingService",
	HandlerType: (*ResourcEncodingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceEncodings",
			Handler:    _ResourcEncodingService_ListResourceEncodings_Handler,
		},
		{
			MethodName: "GetResourceEncoding",
			Handler:    _ResourcEncodingService_GetResourceEncoding_Handler,
		},
		{
			MethodName: "CreateResourceEncoding",
			Handler:    _ResourcEncodingService_CreateResourceEncoding_Handler,
		},
		{
			MethodName: "UpdateResourceEncoding",
			Handler:    _ResourcEncodingService_UpdateResourceEncoding_Handler,
		},
		{
			MethodName: "DeleteResourceEncoding",
			Handler:    _ResourcEncodingService_DeleteResourceEncoding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acre/v1/acre.proto",
}
