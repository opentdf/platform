// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: acse/v1/acse.proto

package acsev1

import (
	v11 "github.com/opentdf/opentdf-v2-poc/gen/attributes/v1"
	v1 "github.com/opentdf/opentdf-v2-poc/gen/common/v1"
	_ "github.com/opentdf/opentdf-v2-poc/gen/google/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubjectMapping_Operator int32

const (
	SubjectMapping_OPERATOR_UNSPECIFIED SubjectMapping_Operator = 0
	SubjectMapping_OPERATOR_IN          SubjectMapping_Operator = 1
	SubjectMapping_OPERATOR_NOT_IN      SubjectMapping_Operator = 2
)

// Enum value maps for SubjectMapping_Operator.
var (
	SubjectMapping_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_IN",
		2: "OPERATOR_NOT_IN",
	}
	SubjectMapping_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_IN":          1,
		"OPERATOR_NOT_IN":      2,
	}
)

func (x SubjectMapping_Operator) Enum() *SubjectMapping_Operator {
	p := new(SubjectMapping_Operator)
	*p = x
	return p
}

func (x SubjectMapping_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectMapping_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_acse_v1_acse_proto_enumTypes[0].Descriptor()
}

func (SubjectMapping_Operator) Type() protoreflect.EnumType {
	return &file_acse_v1_acse_proto_enumTypes[0]
}

func (x SubjectMapping_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectMapping_Operator.Descriptor instead.
func (SubjectMapping_Operator) EnumDescriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{1, 0}
}

// Set of subject mappings identified by id with a version and namespace
type SubjectMappingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *v1.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// List of member attributes as FQN
	SubjectMappings []*SubjectMapping `protobuf:"bytes,2,rep,name=subject_mappings,json=subjectMappings,proto3" json:"subject_mappings,omitempty"`
}

func (x *SubjectMappingSet) Reset() {
	*x = SubjectMappingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectMappingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectMappingSet) ProtoMessage() {}

func (x *SubjectMappingSet) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectMappingSet.ProtoReflect.Descriptor instead.
func (*SubjectMappingSet) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{0}
}

func (x *SubjectMappingSet) GetDescriptor_() *v1.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *SubjectMappingSet) GetSubjectMappings() []*SubjectMapping {
	if x != nil {
		return x.SubjectMappings
	}
	return nil
}

// *
// Define a mapping of an subject attribute to subject using a rule:
// <subject.subjectAttribute> <operator IN/NOT_IN> [subjectValue]
//
// Example subject mapping of a subject with nationality = CZE entitled to attribute relto:ZCE
// From Existing Policy: "http://demo.com/attr/relto/value/CZE": {"nationality": ["CZE"]}
// To Subject Mapping Policy:
// {
// attributeValueFQN: "http://demo.com/attr/relto/value/CZE"
// subjectAttribute: "nationality"
// subjectValues: ["CZE"]
// operator: "IN"
// }
type SubjectMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO should this be a list of values?
	// Attribute Value to be mapped to
	AttributeValueRef *v11.AttributeValueReference `protobuf:"bytes,1,opt,name=attribute_value_ref,json=attributeValueRef,proto3" json:"attribute_value_ref,omitempty"`
	// Resource Attribute Key; NOT Attribute Definition Attribute name
	SubjectAttribute string `protobuf:"bytes,2,opt,name=subject_attribute,json=subjectAttribute,proto3" json:"subject_attribute,omitempty"`
	// The list of comparison values for a resource's <attribute> value
	SubjectValues []string `protobuf:"bytes,3,rep,name=subject_values,json=subjectValues,proto3" json:"subject_values,omitempty"`
	// the operator
	Operator SubjectMapping_Operator `protobuf:"varint,4,opt,name=operator,proto3,enum=acse.v1.SubjectMapping_Operator" json:"operator,omitempty"`
}

func (x *SubjectMapping) Reset() {
	*x = SubjectMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectMapping) ProtoMessage() {}

func (x *SubjectMapping) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectMapping.ProtoReflect.Descriptor instead.
func (*SubjectMapping) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{1}
}

func (x *SubjectMapping) GetAttributeValueRef() *v11.AttributeValueReference {
	if x != nil {
		return x.AttributeValueRef
	}
	return nil
}

func (x *SubjectMapping) GetSubjectAttribute() string {
	if x != nil {
		return x.SubjectAttribute
	}
	return ""
}

func (x *SubjectMapping) GetSubjectValues() []string {
	if x != nil {
		return x.SubjectValues
	}
	return nil
}

func (x *SubjectMapping) GetOperator() SubjectMapping_Operator {
	if x != nil {
		return x.Operator
	}
	return SubjectMapping_OPERATOR_UNSPECIFIED
}

type SubjectEncodingRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubjectEncodingRequestOptions) Reset() {
	*x = SubjectEncodingRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectEncodingRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectEncodingRequestOptions) ProtoMessage() {}

func (x *SubjectEncodingRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectEncodingRequestOptions.ProtoReflect.Descriptor instead.
func (*SubjectEncodingRequestOptions) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{2}
}

type GetSubjectEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options *SubjectEncodingRequestOptions `protobuf:"bytes,2,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *GetSubjectEncodingRequest) Reset() {
	*x = GetSubjectEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectEncodingRequest) ProtoMessage() {}

func (x *GetSubjectEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectEncodingRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubjectEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSubjectEncodingRequest) GetOptions() *SubjectEncodingRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetSubjectEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMappingSet *SubjectMappingSet `protobuf:"bytes,1,opt,name=subject_mapping_set,json=subjectMappingSet,proto3,oneof" json:"subject_mapping_set,omitempty"`
}

func (x *GetSubjectEncodingResponse) Reset() {
	*x = GetSubjectEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectEncodingResponse) ProtoMessage() {}

func (x *GetSubjectEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectEncodingResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{4}
}

func (x *GetSubjectEncodingResponse) GetSubjectMappingSet() *SubjectMappingSet {
	if x != nil {
		return x.SubjectMappingSet
	}
	return nil
}

type ListSubjectEncodingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *SubjectEncodingRequestOptions `protobuf:"bytes,1,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *ListSubjectEncodingsRequest) Reset() {
	*x = ListSubjectEncodingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectEncodingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectEncodingsRequest) ProtoMessage() {}

func (x *ListSubjectEncodingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectEncodingsRequest.ProtoReflect.Descriptor instead.
func (*ListSubjectEncodingsRequest) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{5}
}

func (x *ListSubjectEncodingsRequest) GetOptions() *SubjectEncodingRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListSubjectEncodingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMappingSets []*SubjectMappingSet `protobuf:"bytes,1,rep,name=subject_mapping_sets,json=subjectMappingSets,proto3" json:"subject_mapping_sets,omitempty"`
}

func (x *ListSubjectEncodingsResponse) Reset() {
	*x = ListSubjectEncodingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectEncodingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectEncodingsResponse) ProtoMessage() {}

func (x *ListSubjectEncodingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectEncodingsResponse.ProtoReflect.Descriptor instead.
func (*ListSubjectEncodingsResponse) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{6}
}

func (x *ListSubjectEncodingsResponse) GetSubjectMappingSets() []*SubjectMappingSet {
	if x != nil {
		return x.SubjectMappingSets
	}
	return nil
}

type CreateSubjectEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSubjectEncodingRequest) Reset() {
	*x = CreateSubjectEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectEncodingRequest) ProtoMessage() {}

func (x *CreateSubjectEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectEncodingRequest.ProtoReflect.Descriptor instead.
func (*CreateSubjectEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{7}
}

type CreateSubjectEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSubjectEncodingResponse) Reset() {
	*x = CreateSubjectEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectEncodingResponse) ProtoMessage() {}

func (x *CreateSubjectEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectEncodingResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{8}
}

type UpdateSubjectEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Definition *SubjectMappingSet `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *UpdateSubjectEncodingRequest) Reset() {
	*x = UpdateSubjectEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectEncodingRequest) ProtoMessage() {}

func (x *UpdateSubjectEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectEncodingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubjectEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSubjectEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubjectEncodingRequest) GetDefinition() *SubjectMappingSet {
	if x != nil {
		return x.Definition
	}
	return nil
}

type UpdateSubjectEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSubjectEncodingResponse) Reset() {
	*x = UpdateSubjectEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectEncodingResponse) ProtoMessage() {}

func (x *UpdateSubjectEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectEncodingResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubjectEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{10}
}

type DeleteSubjectEncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubjectEncodingRequest) Reset() {
	*x = DeleteSubjectEncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectEncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectEncodingRequest) ProtoMessage() {}

func (x *DeleteSubjectEncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectEncodingRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectEncodingRequest) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSubjectEncodingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubjectEncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubjectEncodingResponse) Reset() {
	*x = DeleteSubjectEncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acse_v1_acse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectEncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectEncodingResponse) ProtoMessage() {}

func (x *DeleteSubjectEncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acse_v1_acse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectEncodingResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubjectEncodingResponse) Descriptor() ([]byte, []int) {
	return file_acse_v1_acse_proto_rawDescGZIP(), []int{12}
}

var File_acse_v1_acse_proto protoreflect.FileDescriptor

var file_acse_v1_acse_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x63, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc6, 0x02, 0x0a,
	0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x56, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x70,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6c, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x73, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6a, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd2, 0x05,
	0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x63,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x96, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x42, 0x8b, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x41, 0x63, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x64, 0x66, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2d, 0x76, 0x32, 0x2d, 0x70,
	0x6f, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x63, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x63, 0x73, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x41, 0x63,
	0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x41, 0x63, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x13, 0x41, 0x63, 0x73, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x41, 0x63, 0x73, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acse_v1_acse_proto_rawDescOnce sync.Once
	file_acse_v1_acse_proto_rawDescData = file_acse_v1_acse_proto_rawDesc
)

func file_acse_v1_acse_proto_rawDescGZIP() []byte {
	file_acse_v1_acse_proto_rawDescOnce.Do(func() {
		file_acse_v1_acse_proto_rawDescData = protoimpl.X.CompressGZIP(file_acse_v1_acse_proto_rawDescData)
	})
	return file_acse_v1_acse_proto_rawDescData
}

var file_acse_v1_acse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_acse_v1_acse_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_acse_v1_acse_proto_goTypes = []interface{}{
	(SubjectMapping_Operator)(0),          // 0: acse.v1.SubjectMapping.Operator
	(*SubjectMappingSet)(nil),             // 1: acse.v1.SubjectMappingSet
	(*SubjectMapping)(nil),                // 2: acse.v1.SubjectMapping
	(*SubjectEncodingRequestOptions)(nil), // 3: acse.v1.SubjectEncodingRequestOptions
	(*GetSubjectEncodingRequest)(nil),     // 4: acse.v1.GetSubjectEncodingRequest
	(*GetSubjectEncodingResponse)(nil),    // 5: acse.v1.GetSubjectEncodingResponse
	(*ListSubjectEncodingsRequest)(nil),   // 6: acse.v1.ListSubjectEncodingsRequest
	(*ListSubjectEncodingsResponse)(nil),  // 7: acse.v1.ListSubjectEncodingsResponse
	(*CreateSubjectEncodingRequest)(nil),  // 8: acse.v1.CreateSubjectEncodingRequest
	(*CreateSubjectEncodingResponse)(nil), // 9: acse.v1.CreateSubjectEncodingResponse
	(*UpdateSubjectEncodingRequest)(nil),  // 10: acse.v1.UpdateSubjectEncodingRequest
	(*UpdateSubjectEncodingResponse)(nil), // 11: acse.v1.UpdateSubjectEncodingResponse
	(*DeleteSubjectEncodingRequest)(nil),  // 12: acse.v1.DeleteSubjectEncodingRequest
	(*DeleteSubjectEncodingResponse)(nil), // 13: acse.v1.DeleteSubjectEncodingResponse
	(*v1.ResourceDescriptor)(nil),         // 14: common.v1.ResourceDescriptor
	(*v11.AttributeValueReference)(nil),   // 15: attributes.v1.AttributeValueReference
}
var file_acse_v1_acse_proto_depIdxs = []int32{
	14, // 0: acse.v1.SubjectMappingSet.descriptor:type_name -> common.v1.ResourceDescriptor
	2,  // 1: acse.v1.SubjectMappingSet.subject_mappings:type_name -> acse.v1.SubjectMapping
	15, // 2: acse.v1.SubjectMapping.attribute_value_ref:type_name -> attributes.v1.AttributeValueReference
	0,  // 3: acse.v1.SubjectMapping.operator:type_name -> acse.v1.SubjectMapping.Operator
	3,  // 4: acse.v1.GetSubjectEncodingRequest.options:type_name -> acse.v1.SubjectEncodingRequestOptions
	1,  // 5: acse.v1.GetSubjectEncodingResponse.subject_mapping_set:type_name -> acse.v1.SubjectMappingSet
	3,  // 6: acse.v1.ListSubjectEncodingsRequest.options:type_name -> acse.v1.SubjectEncodingRequestOptions
	1,  // 7: acse.v1.ListSubjectEncodingsResponse.subject_mapping_sets:type_name -> acse.v1.SubjectMappingSet
	1,  // 8: acse.v1.UpdateSubjectEncodingRequest.definition:type_name -> acse.v1.SubjectMappingSet
	6,  // 9: acse.v1.SubjectEncodingService.ListSubjectEncodings:input_type -> acse.v1.ListSubjectEncodingsRequest
	4,  // 10: acse.v1.SubjectEncodingService.GetSubjectEncoding:input_type -> acse.v1.GetSubjectEncodingRequest
	8,  // 11: acse.v1.SubjectEncodingService.CreateSubjectEncoding:input_type -> acse.v1.CreateSubjectEncodingRequest
	10, // 12: acse.v1.SubjectEncodingService.UpdateSubjectEncoding:input_type -> acse.v1.UpdateSubjectEncodingRequest
	12, // 13: acse.v1.SubjectEncodingService.DeleteSubjectEncoding:input_type -> acse.v1.DeleteSubjectEncodingRequest
	7,  // 14: acse.v1.SubjectEncodingService.ListSubjectEncodings:output_type -> acse.v1.ListSubjectEncodingsResponse
	5,  // 15: acse.v1.SubjectEncodingService.GetSubjectEncoding:output_type -> acse.v1.GetSubjectEncodingResponse
	9,  // 16: acse.v1.SubjectEncodingService.CreateSubjectEncoding:output_type -> acse.v1.CreateSubjectEncodingResponse
	11, // 17: acse.v1.SubjectEncodingService.UpdateSubjectEncoding:output_type -> acse.v1.UpdateSubjectEncodingResponse
	13, // 18: acse.v1.SubjectEncodingService.DeleteSubjectEncoding:output_type -> acse.v1.DeleteSubjectEncodingResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_acse_v1_acse_proto_init() }
func file_acse_v1_acse_proto_init() {
	if File_acse_v1_acse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_acse_v1_acse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectMappingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectEncodingRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectEncodingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectEncodingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectEncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acse_v1_acse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectEncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acse_v1_acse_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_acse_v1_acse_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_acse_v1_acse_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acse_v1_acse_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acse_v1_acse_proto_goTypes,
		DependencyIndexes: file_acse_v1_acse_proto_depIdxs,
		EnumInfos:         file_acse_v1_acse_proto_enumTypes,
		MessageInfos:      file_acse_v1_acse_proto_msgTypes,
	}.Build()
	File_acse_v1_acse_proto = out.File
	file_acse_v1_acse_proto_rawDesc = nil
	file_acse_v1_acse_proto_goTypes = nil
	file_acse_v1_acse_proto_depIdxs = nil
}
