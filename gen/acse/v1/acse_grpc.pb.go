// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acse/v1/acse.proto

package acsev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubjectEncodingService_ListSubjectEncodings_FullMethodName  = "/acse.v1.SubjectEncodingService/ListSubjectEncodings"
	SubjectEncodingService_GetSubjectEncoding_FullMethodName    = "/acse.v1.SubjectEncodingService/GetSubjectEncoding"
	SubjectEncodingService_CreateSubjectEncoding_FullMethodName = "/acse.v1.SubjectEncodingService/CreateSubjectEncoding"
	SubjectEncodingService_UpdateSubjectEncoding_FullMethodName = "/acse.v1.SubjectEncodingService/UpdateSubjectEncoding"
	SubjectEncodingService_DeleteSubjectEncoding_FullMethodName = "/acse.v1.SubjectEncodingService/DeleteSubjectEncoding"
)

// SubjectEncodingServiceClient is the client API for SubjectEncodingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectEncodingServiceClient interface {
	ListSubjectEncodings(ctx context.Context, in *ListSubjectEncodingsRequest, opts ...grpc.CallOption) (*ListSubjectEncodingsResponse, error)
	GetSubjectEncoding(ctx context.Context, in *GetSubjectEncodingRequest, opts ...grpc.CallOption) (*GetSubjectEncodingResponse, error)
	CreateSubjectEncoding(ctx context.Context, in *CreateSubjectEncodingRequest, opts ...grpc.CallOption) (*CreateSubjectEncodingResponse, error)
	UpdateSubjectEncoding(ctx context.Context, in *UpdateSubjectEncodingRequest, opts ...grpc.CallOption) (*UpdateSubjectEncodingResponse, error)
	DeleteSubjectEncoding(ctx context.Context, in *DeleteSubjectEncodingRequest, opts ...grpc.CallOption) (*DeleteSubjectEncodingResponse, error)
}

type subjectEncodingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectEncodingServiceClient(cc grpc.ClientConnInterface) SubjectEncodingServiceClient {
	return &subjectEncodingServiceClient{cc}
}

func (c *subjectEncodingServiceClient) ListSubjectEncodings(ctx context.Context, in *ListSubjectEncodingsRequest, opts ...grpc.CallOption) (*ListSubjectEncodingsResponse, error) {
	out := new(ListSubjectEncodingsResponse)
	err := c.cc.Invoke(ctx, SubjectEncodingService_ListSubjectEncodings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectEncodingServiceClient) GetSubjectEncoding(ctx context.Context, in *GetSubjectEncodingRequest, opts ...grpc.CallOption) (*GetSubjectEncodingResponse, error) {
	out := new(GetSubjectEncodingResponse)
	err := c.cc.Invoke(ctx, SubjectEncodingService_GetSubjectEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectEncodingServiceClient) CreateSubjectEncoding(ctx context.Context, in *CreateSubjectEncodingRequest, opts ...grpc.CallOption) (*CreateSubjectEncodingResponse, error) {
	out := new(CreateSubjectEncodingResponse)
	err := c.cc.Invoke(ctx, SubjectEncodingService_CreateSubjectEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectEncodingServiceClient) UpdateSubjectEncoding(ctx context.Context, in *UpdateSubjectEncodingRequest, opts ...grpc.CallOption) (*UpdateSubjectEncodingResponse, error) {
	out := new(UpdateSubjectEncodingResponse)
	err := c.cc.Invoke(ctx, SubjectEncodingService_UpdateSubjectEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectEncodingServiceClient) DeleteSubjectEncoding(ctx context.Context, in *DeleteSubjectEncodingRequest, opts ...grpc.CallOption) (*DeleteSubjectEncodingResponse, error) {
	out := new(DeleteSubjectEncodingResponse)
	err := c.cc.Invoke(ctx, SubjectEncodingService_DeleteSubjectEncoding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectEncodingServiceServer is the server API for SubjectEncodingService service.
// All implementations must embed UnimplementedSubjectEncodingServiceServer
// for forward compatibility
type SubjectEncodingServiceServer interface {
	ListSubjectEncodings(context.Context, *ListSubjectEncodingsRequest) (*ListSubjectEncodingsResponse, error)
	GetSubjectEncoding(context.Context, *GetSubjectEncodingRequest) (*GetSubjectEncodingResponse, error)
	CreateSubjectEncoding(context.Context, *CreateSubjectEncodingRequest) (*CreateSubjectEncodingResponse, error)
	UpdateSubjectEncoding(context.Context, *UpdateSubjectEncodingRequest) (*UpdateSubjectEncodingResponse, error)
	DeleteSubjectEncoding(context.Context, *DeleteSubjectEncodingRequest) (*DeleteSubjectEncodingResponse, error)
	mustEmbedUnimplementedSubjectEncodingServiceServer()
}

// UnimplementedSubjectEncodingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubjectEncodingServiceServer struct {
}

func (UnimplementedSubjectEncodingServiceServer) ListSubjectEncodings(context.Context, *ListSubjectEncodingsRequest) (*ListSubjectEncodingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjectEncodings not implemented")
}
func (UnimplementedSubjectEncodingServiceServer) GetSubjectEncoding(context.Context, *GetSubjectEncodingRequest) (*GetSubjectEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectEncoding not implemented")
}
func (UnimplementedSubjectEncodingServiceServer) CreateSubjectEncoding(context.Context, *CreateSubjectEncodingRequest) (*CreateSubjectEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubjectEncoding not implemented")
}
func (UnimplementedSubjectEncodingServiceServer) UpdateSubjectEncoding(context.Context, *UpdateSubjectEncodingRequest) (*UpdateSubjectEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubjectEncoding not implemented")
}
func (UnimplementedSubjectEncodingServiceServer) DeleteSubjectEncoding(context.Context, *DeleteSubjectEncodingRequest) (*DeleteSubjectEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubjectEncoding not implemented")
}
func (UnimplementedSubjectEncodingServiceServer) mustEmbedUnimplementedSubjectEncodingServiceServer() {
}

// UnsafeSubjectEncodingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectEncodingServiceServer will
// result in compilation errors.
type UnsafeSubjectEncodingServiceServer interface {
	mustEmbedUnimplementedSubjectEncodingServiceServer()
}

func RegisterSubjectEncodingServiceServer(s grpc.ServiceRegistrar, srv SubjectEncodingServiceServer) {
	s.RegisterService(&SubjectEncodingService_ServiceDesc, srv)
}

func _SubjectEncodingService_ListSubjectEncodings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubjectEncodingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectEncodingServiceServer).ListSubjectEncodings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectEncodingService_ListSubjectEncodings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectEncodingServiceServer).ListSubjectEncodings(ctx, req.(*ListSubjectEncodingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectEncodingService_GetSubjectEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectEncodingServiceServer).GetSubjectEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectEncodingService_GetSubjectEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectEncodingServiceServer).GetSubjectEncoding(ctx, req.(*GetSubjectEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectEncodingService_CreateSubjectEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubjectEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectEncodingServiceServer).CreateSubjectEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectEncodingService_CreateSubjectEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectEncodingServiceServer).CreateSubjectEncoding(ctx, req.(*CreateSubjectEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectEncodingService_UpdateSubjectEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubjectEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectEncodingServiceServer).UpdateSubjectEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectEncodingService_UpdateSubjectEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectEncodingServiceServer).UpdateSubjectEncoding(ctx, req.(*UpdateSubjectEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectEncodingService_DeleteSubjectEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectEncodingServiceServer).DeleteSubjectEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectEncodingService_DeleteSubjectEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectEncodingServiceServer).DeleteSubjectEncoding(ctx, req.(*DeleteSubjectEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectEncodingService_ServiceDesc is the grpc.ServiceDesc for SubjectEncodingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectEncodingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acse.v1.SubjectEncodingService",
	HandlerType: (*SubjectEncodingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubjectEncodings",
			Handler:    _SubjectEncodingService_ListSubjectEncodings_Handler,
		},
		{
			MethodName: "GetSubjectEncoding",
			Handler:    _SubjectEncodingService_GetSubjectEncoding_Handler,
		},
		{
			MethodName: "CreateSubjectEncoding",
			Handler:    _SubjectEncodingService_CreateSubjectEncoding_Handler,
		},
		{
			MethodName: "UpdateSubjectEncoding",
			Handler:    _SubjectEncodingService_UpdateSubjectEncoding_Handler,
		},
		{
			MethodName: "DeleteSubjectEncoding",
			Handler:    _SubjectEncodingService_DeleteSubjectEncoding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acse/v1/acse.proto",
}
