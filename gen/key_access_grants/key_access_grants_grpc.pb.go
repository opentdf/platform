// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: key_access_grants/key_access_grants.proto

package key_access_grants

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyAccessGrantsService_ListKeyAccessGrants_FullMethodName   = "/key_access_grants.KeyAccessGrantsService/ListKeyAccessGrants"
	KeyAccessGrantsService_GetKeyAccessGrant_FullMethodName     = "/key_access_grants.KeyAccessGrantsService/GetKeyAccessGrant"
	KeyAccessGrantsService_CreateKeyAccessGrants_FullMethodName = "/key_access_grants.KeyAccessGrantsService/CreateKeyAccessGrants"
	KeyAccessGrantsService_UpdateKeyAccessGrants_FullMethodName = "/key_access_grants.KeyAccessGrantsService/UpdateKeyAccessGrants"
	KeyAccessGrantsService_DeleteKeyAccessGrants_FullMethodName = "/key_access_grants.KeyAccessGrantsService/DeleteKeyAccessGrants"
)

// KeyAccessGrantsServiceClient is the client API for KeyAccessGrantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyAccessGrantsServiceClient interface {
	ListKeyAccessGrants(ctx context.Context, in *ListKeyAccessGrantsRequest, opts ...grpc.CallOption) (*ListKeyAccessGrantsResponse, error)
	GetKeyAccessGrant(ctx context.Context, in *GetKeyAccessGrantRequest, opts ...grpc.CallOption) (*GetKeyAccessGrantResponse, error)
	CreateKeyAccessGrants(ctx context.Context, in *CreateKeyAccessGrantsRequest, opts ...grpc.CallOption) (*CreateKeyAccessGrantsResponse, error)
	UpdateKeyAccessGrants(ctx context.Context, in *UpdateKeyAccessGrantsRequest, opts ...grpc.CallOption) (*UpdateKeyAccessGrantsResponse, error)
	DeleteKeyAccessGrants(ctx context.Context, in *DeleteKeyAccessGrantsRequest, opts ...grpc.CallOption) (*DeleteKeyAccessGrantsResponse, error)
}

type keyAccessGrantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAccessGrantsServiceClient(cc grpc.ClientConnInterface) KeyAccessGrantsServiceClient {
	return &keyAccessGrantsServiceClient{cc}
}

func (c *keyAccessGrantsServiceClient) ListKeyAccessGrants(ctx context.Context, in *ListKeyAccessGrantsRequest, opts ...grpc.CallOption) (*ListKeyAccessGrantsResponse, error) {
	out := new(ListKeyAccessGrantsResponse)
	err := c.cc.Invoke(ctx, KeyAccessGrantsService_ListKeyAccessGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessGrantsServiceClient) GetKeyAccessGrant(ctx context.Context, in *GetKeyAccessGrantRequest, opts ...grpc.CallOption) (*GetKeyAccessGrantResponse, error) {
	out := new(GetKeyAccessGrantResponse)
	err := c.cc.Invoke(ctx, KeyAccessGrantsService_GetKeyAccessGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessGrantsServiceClient) CreateKeyAccessGrants(ctx context.Context, in *CreateKeyAccessGrantsRequest, opts ...grpc.CallOption) (*CreateKeyAccessGrantsResponse, error) {
	out := new(CreateKeyAccessGrantsResponse)
	err := c.cc.Invoke(ctx, KeyAccessGrantsService_CreateKeyAccessGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessGrantsServiceClient) UpdateKeyAccessGrants(ctx context.Context, in *UpdateKeyAccessGrantsRequest, opts ...grpc.CallOption) (*UpdateKeyAccessGrantsResponse, error) {
	out := new(UpdateKeyAccessGrantsResponse)
	err := c.cc.Invoke(ctx, KeyAccessGrantsService_UpdateKeyAccessGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessGrantsServiceClient) DeleteKeyAccessGrants(ctx context.Context, in *DeleteKeyAccessGrantsRequest, opts ...grpc.CallOption) (*DeleteKeyAccessGrantsResponse, error) {
	out := new(DeleteKeyAccessGrantsResponse)
	err := c.cc.Invoke(ctx, KeyAccessGrantsService_DeleteKeyAccessGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAccessGrantsServiceServer is the server API for KeyAccessGrantsService service.
// All implementations must embed UnimplementedKeyAccessGrantsServiceServer
// for forward compatibility
type KeyAccessGrantsServiceServer interface {
	ListKeyAccessGrants(context.Context, *ListKeyAccessGrantsRequest) (*ListKeyAccessGrantsResponse, error)
	GetKeyAccessGrant(context.Context, *GetKeyAccessGrantRequest) (*GetKeyAccessGrantResponse, error)
	CreateKeyAccessGrants(context.Context, *CreateKeyAccessGrantsRequest) (*CreateKeyAccessGrantsResponse, error)
	UpdateKeyAccessGrants(context.Context, *UpdateKeyAccessGrantsRequest) (*UpdateKeyAccessGrantsResponse, error)
	DeleteKeyAccessGrants(context.Context, *DeleteKeyAccessGrantsRequest) (*DeleteKeyAccessGrantsResponse, error)
	mustEmbedUnimplementedKeyAccessGrantsServiceServer()
}

// UnimplementedKeyAccessGrantsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyAccessGrantsServiceServer struct {
}

func (UnimplementedKeyAccessGrantsServiceServer) ListKeyAccessGrants(context.Context, *ListKeyAccessGrantsRequest) (*ListKeyAccessGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyAccessGrants not implemented")
}
func (UnimplementedKeyAccessGrantsServiceServer) GetKeyAccessGrant(context.Context, *GetKeyAccessGrantRequest) (*GetKeyAccessGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyAccessGrant not implemented")
}
func (UnimplementedKeyAccessGrantsServiceServer) CreateKeyAccessGrants(context.Context, *CreateKeyAccessGrantsRequest) (*CreateKeyAccessGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyAccessGrants not implemented")
}
func (UnimplementedKeyAccessGrantsServiceServer) UpdateKeyAccessGrants(context.Context, *UpdateKeyAccessGrantsRequest) (*UpdateKeyAccessGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyAccessGrants not implemented")
}
func (UnimplementedKeyAccessGrantsServiceServer) DeleteKeyAccessGrants(context.Context, *DeleteKeyAccessGrantsRequest) (*DeleteKeyAccessGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyAccessGrants not implemented")
}
func (UnimplementedKeyAccessGrantsServiceServer) mustEmbedUnimplementedKeyAccessGrantsServiceServer() {
}

// UnsafeKeyAccessGrantsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAccessGrantsServiceServer will
// result in compilation errors.
type UnsafeKeyAccessGrantsServiceServer interface {
	mustEmbedUnimplementedKeyAccessGrantsServiceServer()
}

func RegisterKeyAccessGrantsServiceServer(s grpc.ServiceRegistrar, srv KeyAccessGrantsServiceServer) {
	s.RegisterService(&KeyAccessGrantsService_ServiceDesc, srv)
}

func _KeyAccessGrantsService_ListKeyAccessGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessGrantsServiceServer).ListKeyAccessGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessGrantsService_ListKeyAccessGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessGrantsServiceServer).ListKeyAccessGrants(ctx, req.(*ListKeyAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessGrantsService_GetKeyAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessGrantsServiceServer).GetKeyAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessGrantsService_GetKeyAccessGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessGrantsServiceServer).GetKeyAccessGrant(ctx, req.(*GetKeyAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessGrantsService_CreateKeyAccessGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessGrantsServiceServer).CreateKeyAccessGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessGrantsService_CreateKeyAccessGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessGrantsServiceServer).CreateKeyAccessGrants(ctx, req.(*CreateKeyAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessGrantsService_UpdateKeyAccessGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessGrantsServiceServer).UpdateKeyAccessGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessGrantsService_UpdateKeyAccessGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessGrantsServiceServer).UpdateKeyAccessGrants(ctx, req.(*UpdateKeyAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessGrantsService_DeleteKeyAccessGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessGrantsServiceServer).DeleteKeyAccessGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessGrantsService_DeleteKeyAccessGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessGrantsServiceServer).DeleteKeyAccessGrants(ctx, req.(*DeleteKeyAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAccessGrantsService_ServiceDesc is the grpc.ServiceDesc for KeyAccessGrantsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAccessGrantsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "key_access_grants.KeyAccessGrantsService",
	HandlerType: (*KeyAccessGrantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeyAccessGrants",
			Handler:    _KeyAccessGrantsService_ListKeyAccessGrants_Handler,
		},
		{
			MethodName: "GetKeyAccessGrant",
			Handler:    _KeyAccessGrantsService_GetKeyAccessGrant_Handler,
		},
		{
			MethodName: "CreateKeyAccessGrants",
			Handler:    _KeyAccessGrantsService_CreateKeyAccessGrants_Handler,
		},
		{
			MethodName: "UpdateKeyAccessGrants",
			Handler:    _KeyAccessGrantsService_UpdateKeyAccessGrants_Handler,
		},
		{
			MethodName: "DeleteKeyAccessGrants",
			Handler:    _KeyAccessGrantsService_DeleteKeyAccessGrants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_access_grants/key_access_grants.proto",
}
