logger:
  level: debug
  type: text
  output: stdout
# DB and Server configurations are defaulted for local development
# db:
#   host: localhost
#   port: 5432
#   user: postgres
#   password: changeme
services:
  kas:
    enabled: true
  policy:
    enabled: true
  authorization:
    enabled: true
    ersurl: http://localhost:8080/entityresolution/resolve
    clientid: tdf-authorization-svc
    clientsecret: secret
    tokenendpoint: http://localhost:8888/auth/realms/opentdf/protocol/openid-connect/token
  entityresolution:
    enabled: true
    url: http://localhost:8888/auth
    clientid: "tdf-entity-resolution"
    clientsecret: "secret"
    realm: "opentdf"
    legacykeycloak: true
server:
  auth:
    enabled: true
    enforceDPoP: false
    audience: "http://localhost:8080"
    issuer: http://localhost:8888/auth/realms/opentdf
    policy:
      ## Default policy for all requests
      default: #"role:readonly"
      ## Dot notation is used to access nested claims (i.e. realm_access.roles)
      claim: # realm_access.roles
      ## Maps the external role to the opentdf role
      ## Note: left side is used in the policy, right side is the external role
      map:
        readonly: opentdf-readonly
        admin: opentdf-admin
        user: default-roles-opentdf
        org-admin: opentdf-org-admin

      ## Custom policy (see examples https://github.com/casbin/casbin/tree/master/examples)
      csv: |
        ## Roles (prefixed with role:)
        # org-admin - organization admin
        # admin - admin
        # readonly - readonly
        # user - rewrap
        # unknown - unknown role or no role
        ## Actions
        # read - read the resource
        # write - write to the resource
        # delete - delete the resource
        # unsafe - unsafe actions
        
        # Role: user
        p,	role:user,		kas.AccessService/PublicKey,						read,			allow
        p,	role:user,		kas.AccessService/Rewrap, 			        write,		allow
        p,	role:user,		/,																      read,			allow
        p,	role:user,		/kas/kas_public_key,  									read,			allow
        p,	role:user,		/kas/v2/kas_public_key,									read,			allow
        p,	role:user,		/kas/v2/rewrap,													write,		allow
        p,	role:user,		/entityresolution/resolve,							write,  	allow
        
        # Role: Org-Admin
        ## gRPC routes
        p,	role:org-admin,		policy.*,																*,			allow
        p,	role:org-admin,		kasregistry.*,													*,			allow
        p,	role:org-admin,		kas.AccessService/LegacyPublicKey,			*,			allow
        p,	role:org-admin,		kas.AccessService/PublicKey,						*,			allow
        p,	role:org-admin,		kas.AccessService/Rewrap, 			            *,			allow
        ## HTTP routes
        p,	role:org-admin,		/health,																*,			allow
        p,	role:org-admin,		/attributes*,														*,			allow
        p,	role:org-admin,		/namespaces*,														*,			allow
        p,	role:org-admin,		/subject-mappings*,											*,			allow
        p,	role:org-admin,		/resource-mappings*,										*,			allow
        p,	role:org-admin,		/key-access-servers*,										*,			allow
        p,	role:org-admin,		/kas.AccessService/LegacyPublicKey,			*,			allow
        # add unsafe actions to the org-admin role
        
        # Role: Admin
        ## gRPC routes
        p,	role:admin,		policy.*,																		*,			allow
        p,	role:admin,		kasregistry.*,															*,			allow
        p,	role:admin,		kas.AccessService/Info,					            *,			allow
        p,	role:admin,		kas.AccessService/Rewrap, 			            *,			allow
        p,	role:admin,		kas.AccessService/LegacyPublicKey,					*,			allow
        p,	role:admin,		kas.AccessService/PublicKey,								*,			allow
        ## HTTP routes
        p,	role:admin,		/health,																		*,			allow
        p,	role:admin,		/attributes*,																*,			allow
        p,	role:admin,		/namespaces*,																*,			allow
        p,	role:admin,		/subject-mappings*,													*,			allow
        p,	role:admin,		/resource-mappings*,												*,			allow
        p,	role:admin,		/key-access-servers*,												*,			allow
        p,	role:admin,		/kas.AccessService/LegacyPublicKey,					*,			allow
        
        ## Role: Readonly
        ## gRPC routes
        p,	role:readonly,		policy.*,																read,			allow
        p,	role:readonly,		kasregistry.*,													read,			allow
        p,	role:readonly,		kas.AccessService/Info,		 		             *,			allow
        p,	role:readonly,    kas.AccessService/Rewrap, 			           *,			allow
        p,	role:readonly,    kas.AccessService/LegacyPublicKey,				 *,			allow
        p,	role:readonly,    kas.AccessService/PublicKey,							 *,			allow
        ## HTTP routes
        p,	role:readonly,		/health,																read,			allow
        p,	role:readonly,		/attributes*,														read,			allow
        p,	role:readonly,		/namespaces*,														read,			allow
        p,	role:readonly,		/subject-mappings*,											read,			allow
        p,	role:readonly,		/resource-mappings*,										read,			allow
        p,	role:readonly,		/key-access-servers*,										read,			allow
        p,	role:readonly,		/kas.AccessService/LegacyPublicKey,			read,			allow
        
        # Public routes
        ## gRPC routes
        p,	role:unknown,			kas.AccessService/LegacyPublicKey,			other,	allow
        p,	role:unknown,			kas.AccessService/PublicKey,						other,	allow
        ## HTTP routes
        p,	role:unknown,			/health,																read,		allow
        p,	role:unknown,			/kas/v2/kas_public_key,									read,		allow
        p,	role:unknown,			/kas/kas_public_key,										read,		allow
        p,	role:unknown,			/entityresolution/resolve,							write,	allow

      ## Custom model (see https://casbin.org/docs/syntax-for-models/)
      model: #|
      #  [request_definition]
      #  r = sub, res, act, obj
      #
      #  [policy_definition]
      #  p = sub, res, act, obj, eft
      #
      #  [role_definition]
      #  g = _, _
      #
      #  [policy_effect]
      #  e = some(where (p.eft == allow)) && !some(where (p.eft == deny))
      #
      #  [matchers]
      #  m = g(r.sub, p.sub) && globOrRegexMatch(r.res, p.res) && globOrRegexMatch(r.act, p.act) && globOrRegexMatch(r.obj, p.obj)
  cors:
    enabled: false
    # '*' to allow any origin or a specific domain like 'https://yourdomain.com'
    allowedorigins: "*"
    # List of methods. Examples: 'GET,POST,PUT'
    allowedmethods:
      - GET
      - POST
      - PATCH
      - PUT
      - DELETE
      - OPTIONS
    # List of headers that are allowed in a request
    allowedheaders:
      - ACCEPT
      - Authorization
      - Content-Type
      - X-CSRF-Token
    # List of response headers that browsers are allowed to access
    exposedheaders:
      - Link
    # Sets whether credentials are included in the CORS request
    allowcredentials: true
    # Sets the maximum age (in seconds) of a specific CORS preflight request
    maxage: 3600
  grpc:
    reflectionEnabled: true # Default is false
  cryptoProvider:
    type: standard
    standard:
      rsa:
        123:
          privateKeyPath: kas-private.pem
          publicKeyPath: kas-cert.pem
        456:
          privateKeyPath: kas-private.pem
          publicKeyPath: kas-cert.pem
      ec:
        123:
          privateKeyPath: kas-ec-private.pem
          publicKeyPath: kas-ec-cert.pem
  port: 8080
opa:
  embedded: true # Only for local development
