syntax = "proto3";

package acre.v1;

import "attributes/v1/attributes.proto";
import "common/v1/common.proto";
import "google/api/annotations.proto";

/*
   Access Control Resource Encodings (ACRE).  Structures supporting Resources and Attributes mappings

*/

/*
   A Set of versioned resource mappings
*/
message ResourceMappingSet {
  common.v1.ResourceDescriptor descriptor = 1;
  repeated ResourceMapping mappings = 2;
}

/*
   A modular set of terms that are the "same".  Could be used across resource mappings
*/
message Synonyms {
  common.v1.ResourceDescriptor descriptor = 1;
  repeated string terms = 2;
}

/*
   Map one or more domain specific terms (synonyms) to an attribute value by reference.

   Example:
   attributeValueRef: ref http://demo.com/attr/Classification/value/Confidential
   synonymRef:
     terms: ["CONFIDENTIAL", "CONTROLLED UNCLASSIFIED", "OFFICIAL-SENSITIVE", "CUI", "C"]

   Example 2:
   attributeValueRef: ref to http://demo.com/attr/Classification/Confidential
   synonymRef:
     terms: ["OFFICIAL-SENSITIVE"]

*/
message ResourceMapping {
  common.v1.ResourceDescriptor descriptor = 1;
  attributes.v1.AttributeValueReference attribute_value_ref = 2;
  SynonymRef synonym_ref = 3;
}

/*
   represents modeling an resource code/tag as a group . Use if not in the bounds of an attribute
   definition.  Otherwise use attributes.AttributeGroup

   Example:
     value: NATO
     members: [USA, GBR, etc.]
*/
message ResourceGroup {
  common.v1.ResourceDescriptor descriptor = 1;
  //group value
  string value = 2;
  //List of member values
  repeated string members = 3;
}

// Reference to a ResourceMapping, one of descriptor or embedded value
message ResourceMappingRef {
  oneof ref {
    common.v1.ResourceDescriptor descriptor = 1;
    ResourceMapping resource_mapping = 2;
  }
}

// Reference to a Synonyms, one of descriptor or embedded value
message SynonymRef {
  oneof ref {
    common.v1.ResourceDescriptor descriptor = 1;
    Synonyms synonyms = 2;
  }
}

message ResourceEncodingRequestOptions {
  common.v1.ResourceDescriptor descriptor = 1;
}

message ListResourceEncodingsRequest {
  optional ResourceEncodingRequestOptions options = 1;
}

message ListResourceEncodingsResponse {
  repeated ResourceMappingSet encodings = 1;
}

message GetResourceEncodingRequest {
  string id = 1;
  optional ResourceEncodingRequestOptions options = 2;
}

message GetResourceEncodingResponse {
  ResourceMappingSet encodings = 1;
}

message CreateResourceEncodingRequest {}
message CreateResourceEncodingResponse {}

message UpdateResourceEncodingRequest {
  string id = 1;
  ResourceMappingSet definition = 2;
}
message UpdateResourceEncodingResponse {}

message DeleteResourceEncodingRequest {
  string id = 1;
}
message DeleteResourceEncodingResponse {}

service ResourcEncodingService {
  rpc ListResourceEncodings(ListResourceEncodingsRequest) returns (ListResourceEncodingsResponse) {
    option (google.api.http) = {get: "/v1/encoding/resources"};
  }
  rpc GetResourceEncoding(GetResourceEncodingRequest) returns (GetResourceEncodingResponse) {
    option (google.api.http) = {get: "/v1/encoding/resources/{id}"};
  }

  rpc CreateResourceEncoding(CreateResourceEncodingRequest) returns (CreateResourceEncodingResponse) {
    option (google.api.http) = {
      post: "/v1/encoding/resources"
      body: "*"
    };
  }

  rpc UpdateResourceEncoding(UpdateResourceEncodingRequest) returns (UpdateResourceEncodingResponse) {
    option (google.api.http) = {
      put: "/v1/encoding/resources/{id}"
      body: "definition"
    };
  }

  rpc DeleteResourceEncoding(DeleteResourceEncodingRequest) returns (DeleteResourceEncodingResponse) {
    option (google.api.http) = {delete: "/v1/encoding/resources/{id}"};
  }
}
