syntax = "proto3";

package attributes;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";

// buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
enum AttributeRuleTypeEnum {
  ATTRIBUTE_RULE_TYPE_ENUM_UNSPECIFIED = 0;
  ATTRIBUTE_RULE_TYPE_ENUM_ALL_OF = 1;
  ATTRIBUTE_RULE_TYPE_ENUM_ANY_OF = 2;
  ATTRIBUTE_RULE_TYPE_ENUM_HIERARCHY = 3;
}

message Attribute {
  // Namespace namespace = 1;
  string id = 1;

  // Optional metadata for the attribute definition
  common.Metadata metadata = 2;

  // TODO: enable this when merging with Jake's work
  // namespace.Namespace namespace = 3;

  //attribute name
  string name = 5;

  // attribute rule enum
  AttributeRuleTypeEnum rule = 6 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];

  repeated Value values = 7;
}

message AttributeCreateUpdate {
  // Optional metadata for the attribute definition
  common.MetadataMutable metadata = 1;

  // namespace of the attribute
  string namespace_id = 2 [(buf.validate.field).required = true];

  //attribute name
  string name = 3 [(buf.validate.field).required = true];

  // attribute rule enum
  AttributeRuleTypeEnum rule = 4 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];

  // optional
  repeated ValueCreate values = 5;
}

message Value {
  // generated uuid in database
  string id = 1;

  common.Metadata metadata = 2;

  string attribute_id = 3 [(buf.validate.field).required = true];

  string value = 4;

  // list of attribute values that this value is related to (attribute group)
  repeated string members = 5;
}

message ValueCreate {
  common.MetadataMutable metadata = 1;

  string attribute_id = 2 [(buf.validate.field).required = true];

  string value = 3;

  // list of attribute values that this value is related to (attribute group)
  repeated string members = 4;
}

message ValueUpdate {
  common.MetadataMutable metadata = 1;

  string value = 2;

  // list of attribute values that this value is related to (attribute group)
  repeated string members = 3;
}

/*
   Key Access Server Grants
*/

message DefinitionKeyAccessServerGrant {
  string attribute_id = 1;
  string key_access_server_id = 2;
}

message ValueKeyAccessServerGrant {
  string value_id = 1;
  string key_access_server_id = 2;
}

/*
   Attribute Service Definitions
*/

message ListAttributesRequest {}
message ListAttributesResponse {
  repeated Attribute attributes = 1;
}

message GetAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetAttributeResponse {
  Attribute attribute = 1;
}

message CreateAttributeRequest {
  AttributeCreateUpdate attribute = 1 [(buf.validate.field).required = true];
}
message CreateAttributeResponse {
  Attribute attribute = 1;
}

message UpdateAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
  AttributeCreateUpdate attribute = 2 [(buf.validate.field).required = true];
}
message UpdateAttributeResponse {
  Attribute attribute = 1;
}

message DeleteAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeleteAttributeResponse {
  Attribute attribute = 1;
}

///
/// Value RPC messages
///
message GetAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetAttributeValueResponse {
  Value value = 1;
}

message ListAttributeValuesRequest {
  string attribute_id = 1 [(buf.validate.field).required = true];
}
message ListAttributeValuesResponse {
  repeated Value values = 1;
}

message CreateAttributeValueRequest {
  string attribute_id = 1 [(buf.validate.field).required = true];
  ValueCreate value = 2 [(buf.validate.field).required = true];
}
message CreateAttributeValueResponse {
  Value value = 1;
}

message UpdateAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];
  ValueUpdate value = 2 [(buf.validate.field).required = true];
}
message UpdateAttributeValueResponse {
  Value value = 1;
}

message DeleteAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeleteAttributeValueResponse {
  Value value = 1;
}

///
/// Attribute Service
///
service AttributesService {
  /*
     List Attributes
     Example:
      grpcurl -plaintext -d '{"namespace_id": "namespace_id"}' localhost:8080 attributes.AttributesService/ListAttributes
  */
  rpc ListAttributes(ListAttributesRequest) returns (ListAttributesResponse) {}

  /*
     List Values
     Example:
      grpcurl -plaintext -d '{"attribute_id": "attribute_id"}' localhost:8080 attributes.AttributesService/ListValues
  */
  rpc ListAttributeValues(ListAttributeValuesRequest) returns (ListAttributeValuesResponse) {}

  rpc GetAttribute(GetAttributeRequest) returns (GetAttributeResponse) {
    option (google.api.http) = {get: "/attributes/{id}"};
  }

  // Create Attribute
  // Example:
  //  grpcurl -plaintext -d '{"attribute": {"namespace_id": "namespace_id", "name": "attribute_name", "rule": "ATTRIBUTE_RULE_TYPE_ENUM_ALL_OF"}}' localhost:8080 attributes.AttributesService/CreateAttribute
  rpc CreateAttribute(CreateAttributeRequest) returns (CreateAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes"
      body: "attribute"
    };
  }

  rpc UpdateAttribute(UpdateAttributeRequest) returns (UpdateAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes/{id}"
      body: "attribute"
    };
  }

  rpc DeleteAttribute(DeleteAttributeRequest) returns (DeleteAttributeResponse) {
    option (google.api.http) = {delete: "/attributes/{id}"};
  }

  /** Attribute Value **/
  rpc GetAttributeValue(GetAttributeValueRequest) returns (GetAttributeValueResponse) {
    option (google.api.http) = {get: "/attributes/_/values/{id}"};
  }

  // Create Attribute Value
  // Example:
  //  grpcurl -plaintext -d '{"attribute_id": "attribute_id", "value": {"value": "value"}}' localhost:8080 attributes.AttributesService/CreateValue
  rpc CreateAttributeValue(CreateAttributeValueRequest) returns (CreateAttributeValueResponse) {
    option (google.api.http) = {
      post: "/attributes/{attribute_id}/values"
      body: "value"
    };
  }

  rpc UpdateAttributeValue(UpdateAttributeValueRequest) returns (UpdateAttributeValueResponse) {
    option (google.api.http) = {
      post: "/attributes/_/values/{id}"
      body: "value"
    };
  }

  rpc DeleteAttributeValue(DeleteAttributeValueRequest) returns (DeleteAttributeValueResponse) {
    option (google.api.http) = {delete: "/attributes/_/values/{id}"};
  }
}
