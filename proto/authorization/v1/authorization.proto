syntax = "proto3";

package authorization.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "attributes/v1/attributes.proto";

// PE (Person Entity) or NPE (Non-Person Entity)
message Entity {
  string id = 1;
  // Standard entity types supported by the platform
  oneof entity_type {
    string email_address = 2;
    string user_name = 3;
    string remote_claims_url = 4;
    string jwt = 5;
    google.protobuf.Any claims = 6;
    EntityCustom custom = 7;
  }
}

// Entity type for custom entities beyond the standard types
message EntityCustom {
  google.protobuf.Any extension = 1;
}

// A set of related PE and NPE
message EntityChain {
  string id = 1;
  repeated Entity entities = 2;
}

// An action an entity can take
message Action {
  // Standard actions supported by the platform
  enum StandardAction {
    STANDARD_ACTION_UNSPECIFIED = 0;
    STANDARD_ACTION_DECRYPT = 1;
    STANDARD_ACTION_TRANSMIT = 2;
  }
  oneof value {
    StandardAction standard = 1;
    string custom = 2;
  }
}

/*
Example Request Get Decisions to answer the question -  Do Bob (represented by entity chain ec1)
and Alice (represented by entity chain ec2) have TRANSMIT authorization for
2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?

{
  "actions":  [
    {
      "standard":  "STANDARD_ACTION_TRANSMIT"
    }
  ],
  "entityChains":  [
    {
      "id":  "ec1",
      "entities":  [
        {
          "emailAddress":  "bob@example.org"
        }
      ]
    },
    {
      "id":  "ec2",
      "entities":  [
        {
          "userName":  "alice@example.org"
        }
      ]
    }
  ],
  "attributeSets":  [
    {
      "id":  "attr-set-1",
      "fqns":  [
        "http://www.example.org/attr/foo/value/bar"
      ]
    },
    {
      "id":  "request-set-2",
      "fqns":  [
        "http://www.example.org/attr/foo/value/bar",
        "http://www.example.org/attr/color/value/red"
      ]
    }
  ]
}


 */
message DecisionRequest {
  repeated Action actions = 1;
  repeated EntityChain entity_chains = 2;
  repeated attributes.v1.AttributeFQNSet attribute_sets = 3;
}

/*

Example response for a Decision Request -  Do Bob (represented by entity chain ec1)
and Alice (represented by entity chain ec2) have TRANSMIT authorization for
2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?

Results:
- bob has permitted authorization to transmit for a resource defined by attr-set-1 attributes and has watermark oblications
- bob has denied authorization to transmit a for a resource defined by attr-set-2 attributes
- alice has permitted authorization to transmit for a resource defined by attr-set-1 attributes
- alice has denied authorization to transmit a for a resource defined by attr-set-2 attributes

{
    "entityChainId":  "ec1",
    "attributeSetId":  "attr-set-1",
    "decision":  "DECISION_PERMIT",
    "obligations":  [
      "http://www.example.org/obligation/watermark"
    ]
  },
  {
    "entityChainId":  "ec1",
    "attributeSetId":  "attr-set-2",
    "decision":  "DECISION_PERMIT"
  },
  {
    "entityChainId":  "ec2",
    "attributeSetId":  "attr-set-1",
    "decision":  "DECISION_PERMIT"
  },
  {
    "entityChainId":  "ec2",
    "attributeSetId":  "attr-set-2",
    "decision":  "DECISION_DENY"
  }


 */
message DecisionResponse {
  enum Decision {
    DECISION_UNSPECIFIED = 0;
    DECISION_DENY = 1;
    DECISION_PERMIT = 2;
  }
  string entity_chain_id = 1; // Id reference for the entity chain in the corresponding request
  string attribute_set_id = 2; // Id reference for the attribute set in the corresponding request
  Action action = 3;  // Action of the decision response
  Decision decision = 4; // The decision response
  repeated string obligations = 5; //optional list of obligations represented in URI format
}

message GetDecisionsRequest {
  repeated DecisionRequest decision_requests = 1;
}

message GetDecisionsResponse {
  repeated DecisionResponse decision_responses = 1;
}

/*
Request to get entitlements for one or more entities for an optional attribute scope

Example: Get entitlements for bob and alice (both represented using an email address

{
  "entities": [
    {
      "id": "e1",
      "emailAddress": "bob@example.org"
    },
    {
      "id": "e2",
      "emailAddress": "alice@example.org"
    }
  ]
}

 */
message GetEntitlementsRequest {
  repeated Entity entities = 1; // list of requested entities
  optional attributes.v1.AttributeFQNSet scope = 2; //optional attribute fqn as a scope
}

message EntityEntitlements{
  string entity_id = 1;
  attributes.v1.AttributeFQNSet entity_attributes = 2;
}

/*

Example Response for a request of : Get entitlements for bob and alice (both represented using an email address

{
  "entities": [
    {
      "id": "e1",
      "emailAddress": "bob@example.org"
    },
    {
      "id": "e2",
      "emailAddress": "alice@example.org"
    }
  ]
}
----- Entitlement Response Example ----
{
  "entitlements": [
    {
      "entityId": "e1",
      "entityAttributes": {
        "fqns": [
          "http://www.example.org/attr/foo/value/bar"
        ]
      }
    },
    {
      "entityId": "e2",
      "entityAttributes": {
        "fqns": [
          "http://www.example.org/attr/color/value/red"
        ]
      }
    }
  ]
}


 */
message GetEntitlementsResponse {
  repeated EntityEntitlements entitlements = 1;
}

service AuthorizationService {
  rpc GetDecisions(GetDecisionsRequest) returns (GetDecisionsResponse) {
    option (google.api.http) = {
      post: "/v1/authorization"
    };
  }
  rpc GetEntitlements(GetEntitlementsRequest)
      returns (GetEntitlementsResponse) {
    option (google.api.http) = {
      post: "/v1/entitlements"
    };
  }
}
