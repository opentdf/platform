syntax = "proto3";

package subjectmapping;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";

/*
   # Subject Mapping (aka Access Control Subject Encoding aka ACSE):  Structures supporting the mapping of Subjects and Attributes (e.g. Entitlement)

   ## Examples

   ### Where:

     - attribute_value_id represents the following attribute
       - FQN: "http://demo.com/attr/relto/value/CZE"
       - UUID: "12345678-1234-1234-1234-123456789012"

   ### Request

   ```bash
   grpcurl -plaintext -d '{
     "subject_mapping": {
       "metadata": {
         "description": "subject mapping 1",
           "labels": {
             "test-label": "test-value"
           }
       },
       "attribute_value_id": "12345678-1234-1234-1234-123456789012",
       "subject_attribute": "nationality",
       "subject_values": ["CZE"],
       "operator": "IN"
     }
   }' localhost:8080 SubjectMappingService.CreateSubjectMapping
   ```

   ### Response

   ```
   {
     "subject_mapping": {
       "metadata": {
         "id": "12345678-2222-1234-1234-123456789012",
         "description": "subject mapping 1",
         "labels": {
           "test-label": "test-value"
         }
       },
       "attribute_value_id": "12345678-1234-1234-1234-123456789012",
       "subject_attribute": "nationality",
       "subject_values": ["CZE"],
       "operator": "IN"
     }
   }
   ```

*/
message SubjectMapping {
  common.Metadata metadata = 1;

  // buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
  enum SubjectMappingOperatorEnum {
    SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED = 0;
    SUBJECT_MAPPING_OPERATOR_ENUM_IN = 1;
    SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN = 2;
  }
  //TODO should this be a list of values?

  // Attribute Value to be mapped to
  string attribute_value_id = 2;

  // Resource Attribute Key; NOT Attribute Definition Attribute name
  string subject_attribute = 3;

  // The list of comparison values for a resource's <attribute> value
  repeated string subject_values = 4;

  // the operator
  SubjectMappingOperatorEnum operator = 5 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
  //TODO future - add features or idea of pattern/regex like ACSE?  like username regex to pull domain from subject attribute
  // or treat the subject values as regex patterns applied to subject attribute
}

message GetSubjectMappingRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetSubjectMappingResponse {
  SubjectMapping subject_mapping = 1;
}

message ListSubjectMappingsRequest {}
message ListSubjectMappingsResponse {
  repeated SubjectMapping subject_mappings = 1;
}

message CreateSubjectMappingRequest {
  SubjectMapping subject_mapping = 1 [(buf.validate.field).required = true];
}
message CreateSubjectMappingResponse {}

message UpdateSubjectMappingRequest {
  string id = 1 [(buf.validate.field).required = true];
  SubjectMapping subject_mapping = 2 [(buf.validate.field).required = true];
}
message UpdateSubjectMappingResponse {}

message DeleteSubjectMappingRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeleteSubjectMappingResponse {}

service SubjectMappingService {
  rpc ListSubjectMappings(ListSubjectMappingsRequest) returns (ListSubjectMappingsResponse) {
    option (google.api.http) = {get: "/subject-mappings"};
  }
  rpc GetSubjectMapping(GetSubjectMappingRequest) returns (GetSubjectMappingResponse) {
    option (google.api.http) = {get: "/subject-mappings/{id}"};
  }

  rpc CreateSubjectMapping(CreateSubjectMappingRequest) returns (CreateSubjectMappingResponse) {
    option (google.api.http) = {
      post: "/subject-mappings"
      body: "subject_mapping"
    };
  }

  rpc UpdateSubjectMapping(UpdateSubjectMappingRequest) returns (UpdateSubjectMappingResponse) {
    option (google.api.http) = {
      post: "/subject-mappings/{id}"
      body: "subject_mapping"
    };
  }

  rpc DeleteSubjectMapping(DeleteSubjectMappingRequest) returns (DeleteSubjectMappingResponse) {
    option (google.api.http) = {delete: "/subject-mappings/{id}"};
  }
}
