// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authorization/authorization.proto

package authorizationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	authorization "github.com/opentdf/platform/protocol/go/authorization"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorizationServiceName is the fully-qualified name of the AuthorizationService service.
	AuthorizationServiceName = "authorization.AuthorizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorizationServiceGetDecisionsProcedure is the fully-qualified name of the
	// AuthorizationService's GetDecisions RPC.
	AuthorizationServiceGetDecisionsProcedure = "/authorization.AuthorizationService/GetDecisions"
	// AuthorizationServiceGetDecisionsByTokenProcedure is the fully-qualified name of the
	// AuthorizationService's GetDecisionsByToken RPC.
	AuthorizationServiceGetDecisionsByTokenProcedure = "/authorization.AuthorizationService/GetDecisionsByToken"
	// AuthorizationServiceGetEntitlementsProcedure is the fully-qualified name of the
	// AuthorizationService's GetEntitlements RPC.
	AuthorizationServiceGetEntitlementsProcedure = "/authorization.AuthorizationService/GetEntitlements"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authorizationServiceServiceDescriptor                   = authorization.File_authorization_authorization_proto.Services().ByName("AuthorizationService")
	authorizationServiceGetDecisionsMethodDescriptor        = authorizationServiceServiceDescriptor.Methods().ByName("GetDecisions")
	authorizationServiceGetDecisionsByTokenMethodDescriptor = authorizationServiceServiceDescriptor.Methods().ByName("GetDecisionsByToken")
	authorizationServiceGetEntitlementsMethodDescriptor     = authorizationServiceServiceDescriptor.Methods().ByName("GetEntitlements")
)

// AuthorizationServiceClient is a client for the authorization.AuthorizationService service.
type AuthorizationServiceClient interface {
	GetDecisions(context.Context, *connect.Request[authorization.GetDecisionsRequest]) (*connect.Response[authorization.GetDecisionsResponse], error)
	GetDecisionsByToken(context.Context, *connect.Request[authorization.GetDecisionsByTokenRequest]) (*connect.Response[authorization.GetDecisionsByTokenResponse], error)
	GetEntitlements(context.Context, *connect.Request[authorization.GetEntitlementsRequest]) (*connect.Response[authorization.GetEntitlementsResponse], error)
}

// NewAuthorizationServiceClient constructs a client for the authorization.AuthorizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorizationServiceClient{
		getDecisions: connect.NewClient[authorization.GetDecisionsRequest, authorization.GetDecisionsResponse](
			httpClient,
			baseURL+AuthorizationServiceGetDecisionsProcedure,
			connect.WithSchema(authorizationServiceGetDecisionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDecisionsByToken: connect.NewClient[authorization.GetDecisionsByTokenRequest, authorization.GetDecisionsByTokenResponse](
			httpClient,
			baseURL+AuthorizationServiceGetDecisionsByTokenProcedure,
			connect.WithSchema(authorizationServiceGetDecisionsByTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEntitlements: connect.NewClient[authorization.GetEntitlementsRequest, authorization.GetEntitlementsResponse](
			httpClient,
			baseURL+AuthorizationServiceGetEntitlementsProcedure,
			connect.WithSchema(authorizationServiceGetEntitlementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationServiceClient implements AuthorizationServiceClient.
type authorizationServiceClient struct {
	getDecisions        *connect.Client[authorization.GetDecisionsRequest, authorization.GetDecisionsResponse]
	getDecisionsByToken *connect.Client[authorization.GetDecisionsByTokenRequest, authorization.GetDecisionsByTokenResponse]
	getEntitlements     *connect.Client[authorization.GetEntitlementsRequest, authorization.GetEntitlementsResponse]
}

// GetDecisions calls authorization.AuthorizationService.GetDecisions.
func (c *authorizationServiceClient) GetDecisions(ctx context.Context, req *connect.Request[authorization.GetDecisionsRequest]) (*connect.Response[authorization.GetDecisionsResponse], error) {
	return c.getDecisions.CallUnary(ctx, req)
}

// GetDecisionsByToken calls authorization.AuthorizationService.GetDecisionsByToken.
func (c *authorizationServiceClient) GetDecisionsByToken(ctx context.Context, req *connect.Request[authorization.GetDecisionsByTokenRequest]) (*connect.Response[authorization.GetDecisionsByTokenResponse], error) {
	return c.getDecisionsByToken.CallUnary(ctx, req)
}

// GetEntitlements calls authorization.AuthorizationService.GetEntitlements.
func (c *authorizationServiceClient) GetEntitlements(ctx context.Context, req *connect.Request[authorization.GetEntitlementsRequest]) (*connect.Response[authorization.GetEntitlementsResponse], error) {
	return c.getEntitlements.CallUnary(ctx, req)
}

// AuthorizationServiceHandler is an implementation of the authorization.AuthorizationService
// service.
type AuthorizationServiceHandler interface {
	GetDecisions(context.Context, *connect.Request[authorization.GetDecisionsRequest]) (*connect.Response[authorization.GetDecisionsResponse], error)
	GetDecisionsByToken(context.Context, *connect.Request[authorization.GetDecisionsByTokenRequest]) (*connect.Response[authorization.GetDecisionsByTokenResponse], error)
	GetEntitlements(context.Context, *connect.Request[authorization.GetEntitlementsRequest]) (*connect.Response[authorization.GetEntitlementsResponse], error)
}

// NewAuthorizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationServiceHandler(svc AuthorizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationServiceGetDecisionsHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetDecisionsProcedure,
		svc.GetDecisions,
		connect.WithSchema(authorizationServiceGetDecisionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetDecisionsByTokenHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetDecisionsByTokenProcedure,
		svc.GetDecisionsByToken,
		connect.WithSchema(authorizationServiceGetDecisionsByTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetEntitlementsHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetEntitlementsProcedure,
		svc.GetEntitlements,
		connect.WithSchema(authorizationServiceGetEntitlementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/authorization.AuthorizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationServiceGetDecisionsProcedure:
			authorizationServiceGetDecisionsHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetDecisionsByTokenProcedure:
			authorizationServiceGetDecisionsByTokenHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetEntitlementsProcedure:
			authorizationServiceGetEntitlementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationServiceHandler struct{}

func (UnimplementedAuthorizationServiceHandler) GetDecisions(context.Context, *connect.Request[authorization.GetDecisionsRequest]) (*connect.Response[authorization.GetDecisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.AuthorizationService.GetDecisions is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetDecisionsByToken(context.Context, *connect.Request[authorization.GetDecisionsByTokenRequest]) (*connect.Response[authorization.GetDecisionsByTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.AuthorizationService.GetDecisionsByToken is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetEntitlements(context.Context, *connect.Request[authorization.GetEntitlementsRequest]) (*connect.Response[authorization.GetEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.AuthorizationService.GetEntitlements is not implemented"))
}
