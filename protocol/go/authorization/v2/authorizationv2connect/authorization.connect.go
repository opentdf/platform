// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authorization/v2/authorization.proto

package authorizationv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/opentdf/platform/protocol/go/authorization/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorizationServiceName is the fully-qualified name of the AuthorizationService service.
	AuthorizationServiceName = "authorization.v2.AuthorizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorizationServiceGetDecisionProcedure is the fully-qualified name of the
	// AuthorizationService's GetDecision RPC.
	AuthorizationServiceGetDecisionProcedure = "/authorization.v2.AuthorizationService/GetDecision"
	// AuthorizationServiceGetDecisionMultiResourceProcedure is the fully-qualified name of the
	// AuthorizationService's GetDecisionMultiResource RPC.
	AuthorizationServiceGetDecisionMultiResourceProcedure = "/authorization.v2.AuthorizationService/GetDecisionMultiResource"
	// AuthorizationServiceGetDecisionBulkProcedure is the fully-qualified name of the
	// AuthorizationService's GetDecisionBulk RPC.
	AuthorizationServiceGetDecisionBulkProcedure = "/authorization.v2.AuthorizationService/GetDecisionBulk"
	// AuthorizationServiceGetEntitlementsProcedure is the fully-qualified name of the
	// AuthorizationService's GetEntitlements RPC.
	AuthorizationServiceGetEntitlementsProcedure = "/authorization.v2.AuthorizationService/GetEntitlements"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authorizationServiceServiceDescriptor                        = v2.File_authorization_v2_authorization_proto.Services().ByName("AuthorizationService")
	authorizationServiceGetDecisionMethodDescriptor              = authorizationServiceServiceDescriptor.Methods().ByName("GetDecision")
	authorizationServiceGetDecisionMultiResourceMethodDescriptor = authorizationServiceServiceDescriptor.Methods().ByName("GetDecisionMultiResource")
	authorizationServiceGetDecisionBulkMethodDescriptor          = authorizationServiceServiceDescriptor.Methods().ByName("GetDecisionBulk")
	authorizationServiceGetEntitlementsMethodDescriptor          = authorizationServiceServiceDescriptor.Methods().ByName("GetEntitlements")
)

// AuthorizationServiceClient is a client for the authorization.v2.AuthorizationService service.
type AuthorizationServiceClient interface {
	GetDecision(context.Context, *connect.Request[v2.GetDecisionRequest]) (*connect.Response[v2.GetDecisionResponse], error)
	GetDecisionMultiResource(context.Context, *connect.Request[v2.GetDecisionMultiResourceRequest]) (*connect.Response[v2.GetDecisionMultiResourceResponse], error)
	GetDecisionBulk(context.Context, *connect.Request[v2.GetDecisionBulkRequest]) (*connect.Response[v2.GetDecisionBulkResponse], error)
	GetEntitlements(context.Context, *connect.Request[v2.GetEntitlementsRequest]) (*connect.Response[v2.GetEntitlementsResponse], error)
}

// NewAuthorizationServiceClient constructs a client for the authorization.v2.AuthorizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorizationServiceClient{
		getDecision: connect.NewClient[v2.GetDecisionRequest, v2.GetDecisionResponse](
			httpClient,
			baseURL+AuthorizationServiceGetDecisionProcedure,
			connect.WithSchema(authorizationServiceGetDecisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDecisionMultiResource: connect.NewClient[v2.GetDecisionMultiResourceRequest, v2.GetDecisionMultiResourceResponse](
			httpClient,
			baseURL+AuthorizationServiceGetDecisionMultiResourceProcedure,
			connect.WithSchema(authorizationServiceGetDecisionMultiResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDecisionBulk: connect.NewClient[v2.GetDecisionBulkRequest, v2.GetDecisionBulkResponse](
			httpClient,
			baseURL+AuthorizationServiceGetDecisionBulkProcedure,
			connect.WithSchema(authorizationServiceGetDecisionBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEntitlements: connect.NewClient[v2.GetEntitlementsRequest, v2.GetEntitlementsResponse](
			httpClient,
			baseURL+AuthorizationServiceGetEntitlementsProcedure,
			connect.WithSchema(authorizationServiceGetEntitlementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationServiceClient implements AuthorizationServiceClient.
type authorizationServiceClient struct {
	getDecision              *connect.Client[v2.GetDecisionRequest, v2.GetDecisionResponse]
	getDecisionMultiResource *connect.Client[v2.GetDecisionMultiResourceRequest, v2.GetDecisionMultiResourceResponse]
	getDecisionBulk          *connect.Client[v2.GetDecisionBulkRequest, v2.GetDecisionBulkResponse]
	getEntitlements          *connect.Client[v2.GetEntitlementsRequest, v2.GetEntitlementsResponse]
}

// GetDecision calls authorization.v2.AuthorizationService.GetDecision.
func (c *authorizationServiceClient) GetDecision(ctx context.Context, req *connect.Request[v2.GetDecisionRequest]) (*connect.Response[v2.GetDecisionResponse], error) {
	return c.getDecision.CallUnary(ctx, req)
}

// GetDecisionMultiResource calls authorization.v2.AuthorizationService.GetDecisionMultiResource.
func (c *authorizationServiceClient) GetDecisionMultiResource(ctx context.Context, req *connect.Request[v2.GetDecisionMultiResourceRequest]) (*connect.Response[v2.GetDecisionMultiResourceResponse], error) {
	return c.getDecisionMultiResource.CallUnary(ctx, req)
}

// GetDecisionBulk calls authorization.v2.AuthorizationService.GetDecisionBulk.
func (c *authorizationServiceClient) GetDecisionBulk(ctx context.Context, req *connect.Request[v2.GetDecisionBulkRequest]) (*connect.Response[v2.GetDecisionBulkResponse], error) {
	return c.getDecisionBulk.CallUnary(ctx, req)
}

// GetEntitlements calls authorization.v2.AuthorizationService.GetEntitlements.
func (c *authorizationServiceClient) GetEntitlements(ctx context.Context, req *connect.Request[v2.GetEntitlementsRequest]) (*connect.Response[v2.GetEntitlementsResponse], error) {
	return c.getEntitlements.CallUnary(ctx, req)
}

// AuthorizationServiceHandler is an implementation of the authorization.v2.AuthorizationService
// service.
type AuthorizationServiceHandler interface {
	GetDecision(context.Context, *connect.Request[v2.GetDecisionRequest]) (*connect.Response[v2.GetDecisionResponse], error)
	GetDecisionMultiResource(context.Context, *connect.Request[v2.GetDecisionMultiResourceRequest]) (*connect.Response[v2.GetDecisionMultiResourceResponse], error)
	GetDecisionBulk(context.Context, *connect.Request[v2.GetDecisionBulkRequest]) (*connect.Response[v2.GetDecisionBulkResponse], error)
	GetEntitlements(context.Context, *connect.Request[v2.GetEntitlementsRequest]) (*connect.Response[v2.GetEntitlementsResponse], error)
}

// NewAuthorizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationServiceHandler(svc AuthorizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationServiceGetDecisionHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetDecisionProcedure,
		svc.GetDecision,
		connect.WithSchema(authorizationServiceGetDecisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetDecisionMultiResourceHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetDecisionMultiResourceProcedure,
		svc.GetDecisionMultiResource,
		connect.WithSchema(authorizationServiceGetDecisionMultiResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetDecisionBulkHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetDecisionBulkProcedure,
		svc.GetDecisionBulk,
		connect.WithSchema(authorizationServiceGetDecisionBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetEntitlementsHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetEntitlementsProcedure,
		svc.GetEntitlements,
		connect.WithSchema(authorizationServiceGetEntitlementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/authorization.v2.AuthorizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationServiceGetDecisionProcedure:
			authorizationServiceGetDecisionHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetDecisionMultiResourceProcedure:
			authorizationServiceGetDecisionMultiResourceHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetDecisionBulkProcedure:
			authorizationServiceGetDecisionBulkHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetEntitlementsProcedure:
			authorizationServiceGetEntitlementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationServiceHandler struct{}

func (UnimplementedAuthorizationServiceHandler) GetDecision(context.Context, *connect.Request[v2.GetDecisionRequest]) (*connect.Response[v2.GetDecisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.v2.AuthorizationService.GetDecision is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetDecisionMultiResource(context.Context, *connect.Request[v2.GetDecisionMultiResourceRequest]) (*connect.Response[v2.GetDecisionMultiResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.v2.AuthorizationService.GetDecisionMultiResource is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetDecisionBulk(context.Context, *connect.Request[v2.GetDecisionBulkRequest]) (*connect.Response[v2.GetDecisionBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.v2.AuthorizationService.GetDecisionBulk is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetEntitlements(context.Context, *connect.Request[v2.GetEntitlementsRequest]) (*connect.Response[v2.GetEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authorization.v2.AuthorizationService.GetEntitlements is not implemented"))
}
