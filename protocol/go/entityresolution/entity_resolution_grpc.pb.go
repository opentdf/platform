// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: entityresolution/entity_resolution.proto

package entityresolution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntityResolutionService_ResolveEntities_FullMethodName          = "/entityresolution.EntityResolutionService/ResolveEntities"
	EntityResolutionService_CreateEntityChainFromJwt_FullMethodName = "/entityresolution.EntityResolutionService/CreateEntityChainFromJwt"
)

// EntityResolutionServiceClient is the client API for EntityResolutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityResolutionServiceClient interface {
	ResolveEntities(ctx context.Context, in *ResolveEntitiesRequest, opts ...grpc.CallOption) (*ResolveEntitiesResponse, error)
	CreateEntityChainFromJwt(ctx context.Context, in *CreateEntityChainFromJwtRequest, opts ...grpc.CallOption) (*CreateEntityChainFromJwtResponse, error)
}

type entityResolutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityResolutionServiceClient(cc grpc.ClientConnInterface) EntityResolutionServiceClient {
	return &entityResolutionServiceClient{cc}
}

func (c *entityResolutionServiceClient) ResolveEntities(ctx context.Context, in *ResolveEntitiesRequest, opts ...grpc.CallOption) (*ResolveEntitiesResponse, error) {
	out := new(ResolveEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityResolutionService_ResolveEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityResolutionServiceClient) CreateEntityChainFromJwt(ctx context.Context, in *CreateEntityChainFromJwtRequest, opts ...grpc.CallOption) (*CreateEntityChainFromJwtResponse, error) {
	out := new(CreateEntityChainFromJwtResponse)
	err := c.cc.Invoke(ctx, EntityResolutionService_CreateEntityChainFromJwt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityResolutionServiceServer is the server API for EntityResolutionService service.
// All implementations must embed UnimplementedEntityResolutionServiceServer
// for forward compatibility
type EntityResolutionServiceServer interface {
	ResolveEntities(context.Context, *ResolveEntitiesRequest) (*ResolveEntitiesResponse, error)
	CreateEntityChainFromJwt(context.Context, *CreateEntityChainFromJwtRequest) (*CreateEntityChainFromJwtResponse, error)
	mustEmbedUnimplementedEntityResolutionServiceServer()
}

// UnimplementedEntityResolutionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEntityResolutionServiceServer struct {
}

func (UnimplementedEntityResolutionServiceServer) ResolveEntities(context.Context, *ResolveEntitiesRequest) (*ResolveEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveEntities not implemented")
}
func (UnimplementedEntityResolutionServiceServer) CreateEntityChainFromJwt(context.Context, *CreateEntityChainFromJwtRequest) (*CreateEntityChainFromJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityChainFromJwt not implemented")
}
func (UnimplementedEntityResolutionServiceServer) mustEmbedUnimplementedEntityResolutionServiceServer() {
}

// UnsafeEntityResolutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityResolutionServiceServer will
// result in compilation errors.
type UnsafeEntityResolutionServiceServer interface {
	mustEmbedUnimplementedEntityResolutionServiceServer()
}

func RegisterEntityResolutionServiceServer(s grpc.ServiceRegistrar, srv EntityResolutionServiceServer) {
	s.RegisterService(&EntityResolutionService_ServiceDesc, srv)
}

func _EntityResolutionService_ResolveEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityResolutionServiceServer).ResolveEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityResolutionService_ResolveEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityResolutionServiceServer).ResolveEntities(ctx, req.(*ResolveEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityResolutionService_CreateEntityChainFromJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityChainFromJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityResolutionServiceServer).CreateEntityChainFromJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityResolutionService_CreateEntityChainFromJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityResolutionServiceServer).CreateEntityChainFromJwt(ctx, req.(*CreateEntityChainFromJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityResolutionService_ServiceDesc is the grpc.ServiceDesc for EntityResolutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityResolutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entityresolution.EntityResolutionService",
	HandlerType: (*EntityResolutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveEntities",
			Handler:    _EntityResolutionService_ResolveEntities_Handler,
		},
		{
			MethodName: "CreateEntityChainFromJwt",
			Handler:    _EntityResolutionService_CreateEntityChainFromJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entityresolution/entity_resolution.proto",
}
