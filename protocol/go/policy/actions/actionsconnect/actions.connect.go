// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/actions/actions.proto

package actionsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	actions "github.com/opentdf/platform/protocol/go/policy/actions"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ActionServiceName is the fully-qualified name of the ActionService service.
	ActionServiceName = "policy.actions.ActionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActionServiceGetActionProcedure is the fully-qualified name of the ActionService's GetAction RPC.
	ActionServiceGetActionProcedure = "/policy.actions.ActionService/GetAction"
	// ActionServiceListActionsProcedure is the fully-qualified name of the ActionService's ListActions
	// RPC.
	ActionServiceListActionsProcedure = "/policy.actions.ActionService/ListActions"
	// ActionServiceCreateActionProcedure is the fully-qualified name of the ActionService's
	// CreateAction RPC.
	ActionServiceCreateActionProcedure = "/policy.actions.ActionService/CreateAction"
	// ActionServiceUpdateActionProcedure is the fully-qualified name of the ActionService's
	// UpdateAction RPC.
	ActionServiceUpdateActionProcedure = "/policy.actions.ActionService/UpdateAction"
	// ActionServiceDeleteActionProcedure is the fully-qualified name of the ActionService's
	// DeleteAction RPC.
	ActionServiceDeleteActionProcedure = "/policy.actions.ActionService/DeleteAction"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	actionServiceServiceDescriptor            = actions.File_policy_actions_actions_proto.Services().ByName("ActionService")
	actionServiceGetActionMethodDescriptor    = actionServiceServiceDescriptor.Methods().ByName("GetAction")
	actionServiceListActionsMethodDescriptor  = actionServiceServiceDescriptor.Methods().ByName("ListActions")
	actionServiceCreateActionMethodDescriptor = actionServiceServiceDescriptor.Methods().ByName("CreateAction")
	actionServiceUpdateActionMethodDescriptor = actionServiceServiceDescriptor.Methods().ByName("UpdateAction")
	actionServiceDeleteActionMethodDescriptor = actionServiceServiceDescriptor.Methods().ByName("DeleteAction")
)

// ActionServiceClient is a client for the policy.actions.ActionService service.
type ActionServiceClient interface {
	GetAction(context.Context, *connect.Request[actions.GetActionRequest]) (*connect.Response[actions.GetActionResponse], error)
	ListActions(context.Context, *connect.Request[actions.ListActionsRequest]) (*connect.Response[actions.ListActionsResponse], error)
	CreateAction(context.Context, *connect.Request[actions.CreateActionRequest]) (*connect.Response[actions.CreateActionResponse], error)
	UpdateAction(context.Context, *connect.Request[actions.UpdateActionRequest]) (*connect.Response[actions.UpdateActionResponse], error)
	DeleteAction(context.Context, *connect.Request[actions.DeleteActionRequest]) (*connect.Response[actions.DeleteActionResponse], error)
}

// NewActionServiceClient constructs a client for the policy.actions.ActionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ActionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &actionServiceClient{
		getAction: connect.NewClient[actions.GetActionRequest, actions.GetActionResponse](
			httpClient,
			baseURL+ActionServiceGetActionProcedure,
			connect.WithSchema(actionServiceGetActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listActions: connect.NewClient[actions.ListActionsRequest, actions.ListActionsResponse](
			httpClient,
			baseURL+ActionServiceListActionsProcedure,
			connect.WithSchema(actionServiceListActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAction: connect.NewClient[actions.CreateActionRequest, actions.CreateActionResponse](
			httpClient,
			baseURL+ActionServiceCreateActionProcedure,
			connect.WithSchema(actionServiceCreateActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAction: connect.NewClient[actions.UpdateActionRequest, actions.UpdateActionResponse](
			httpClient,
			baseURL+ActionServiceUpdateActionProcedure,
			connect.WithSchema(actionServiceUpdateActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAction: connect.NewClient[actions.DeleteActionRequest, actions.DeleteActionResponse](
			httpClient,
			baseURL+ActionServiceDeleteActionProcedure,
			connect.WithSchema(actionServiceDeleteActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// actionServiceClient implements ActionServiceClient.
type actionServiceClient struct {
	getAction    *connect.Client[actions.GetActionRequest, actions.GetActionResponse]
	listActions  *connect.Client[actions.ListActionsRequest, actions.ListActionsResponse]
	createAction *connect.Client[actions.CreateActionRequest, actions.CreateActionResponse]
	updateAction *connect.Client[actions.UpdateActionRequest, actions.UpdateActionResponse]
	deleteAction *connect.Client[actions.DeleteActionRequest, actions.DeleteActionResponse]
}

// GetAction calls policy.actions.ActionService.GetAction.
func (c *actionServiceClient) GetAction(ctx context.Context, req *connect.Request[actions.GetActionRequest]) (*connect.Response[actions.GetActionResponse], error) {
	return c.getAction.CallUnary(ctx, req)
}

// ListActions calls policy.actions.ActionService.ListActions.
func (c *actionServiceClient) ListActions(ctx context.Context, req *connect.Request[actions.ListActionsRequest]) (*connect.Response[actions.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// CreateAction calls policy.actions.ActionService.CreateAction.
func (c *actionServiceClient) CreateAction(ctx context.Context, req *connect.Request[actions.CreateActionRequest]) (*connect.Response[actions.CreateActionResponse], error) {
	return c.createAction.CallUnary(ctx, req)
}

// UpdateAction calls policy.actions.ActionService.UpdateAction.
func (c *actionServiceClient) UpdateAction(ctx context.Context, req *connect.Request[actions.UpdateActionRequest]) (*connect.Response[actions.UpdateActionResponse], error) {
	return c.updateAction.CallUnary(ctx, req)
}

// DeleteAction calls policy.actions.ActionService.DeleteAction.
func (c *actionServiceClient) DeleteAction(ctx context.Context, req *connect.Request[actions.DeleteActionRequest]) (*connect.Response[actions.DeleteActionResponse], error) {
	return c.deleteAction.CallUnary(ctx, req)
}

// ActionServiceHandler is an implementation of the policy.actions.ActionService service.
type ActionServiceHandler interface {
	GetAction(context.Context, *connect.Request[actions.GetActionRequest]) (*connect.Response[actions.GetActionResponse], error)
	ListActions(context.Context, *connect.Request[actions.ListActionsRequest]) (*connect.Response[actions.ListActionsResponse], error)
	CreateAction(context.Context, *connect.Request[actions.CreateActionRequest]) (*connect.Response[actions.CreateActionResponse], error)
	UpdateAction(context.Context, *connect.Request[actions.UpdateActionRequest]) (*connect.Response[actions.UpdateActionResponse], error)
	DeleteAction(context.Context, *connect.Request[actions.DeleteActionRequest]) (*connect.Response[actions.DeleteActionResponse], error)
}

// NewActionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActionServiceHandler(svc ActionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	actionServiceGetActionHandler := connect.NewUnaryHandler(
		ActionServiceGetActionProcedure,
		svc.GetAction,
		connect.WithSchema(actionServiceGetActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	actionServiceListActionsHandler := connect.NewUnaryHandler(
		ActionServiceListActionsProcedure,
		svc.ListActions,
		connect.WithSchema(actionServiceListActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	actionServiceCreateActionHandler := connect.NewUnaryHandler(
		ActionServiceCreateActionProcedure,
		svc.CreateAction,
		connect.WithSchema(actionServiceCreateActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	actionServiceUpdateActionHandler := connect.NewUnaryHandler(
		ActionServiceUpdateActionProcedure,
		svc.UpdateAction,
		connect.WithSchema(actionServiceUpdateActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	actionServiceDeleteActionHandler := connect.NewUnaryHandler(
		ActionServiceDeleteActionProcedure,
		svc.DeleteAction,
		connect.WithSchema(actionServiceDeleteActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.actions.ActionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ActionServiceGetActionProcedure:
			actionServiceGetActionHandler.ServeHTTP(w, r)
		case ActionServiceListActionsProcedure:
			actionServiceListActionsHandler.ServeHTTP(w, r)
		case ActionServiceCreateActionProcedure:
			actionServiceCreateActionHandler.ServeHTTP(w, r)
		case ActionServiceUpdateActionProcedure:
			actionServiceUpdateActionHandler.ServeHTTP(w, r)
		case ActionServiceDeleteActionProcedure:
			actionServiceDeleteActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedActionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActionServiceHandler struct{}

func (UnimplementedActionServiceHandler) GetAction(context.Context, *connect.Request[actions.GetActionRequest]) (*connect.Response[actions.GetActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.actions.ActionService.GetAction is not implemented"))
}

func (UnimplementedActionServiceHandler) ListActions(context.Context, *connect.Request[actions.ListActionsRequest]) (*connect.Response[actions.ListActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.actions.ActionService.ListActions is not implemented"))
}

func (UnimplementedActionServiceHandler) CreateAction(context.Context, *connect.Request[actions.CreateActionRequest]) (*connect.Response[actions.CreateActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.actions.ActionService.CreateAction is not implemented"))
}

func (UnimplementedActionServiceHandler) UpdateAction(context.Context, *connect.Request[actions.UpdateActionRequest]) (*connect.Response[actions.UpdateActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.actions.ActionService.UpdateAction is not implemented"))
}

func (UnimplementedActionServiceHandler) DeleteAction(context.Context, *connect.Request[actions.DeleteActionRequest]) (*connect.Response[actions.DeleteActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.actions.ActionService.DeleteAction is not implemented"))
}
