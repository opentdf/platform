// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/attributes/attributes.proto

package attributesconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	attributes "github.com/opentdf/platform/protocol/go/policy/attributes"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttributesServiceName is the fully-qualified name of the AttributesService service.
	AttributesServiceName = "policy.attributes.AttributesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttributesServiceListAttributesProcedure is the fully-qualified name of the AttributesService's
	// ListAttributes RPC.
	AttributesServiceListAttributesProcedure = "/policy.attributes.AttributesService/ListAttributes"
	// AttributesServiceListAttributeValuesProcedure is the fully-qualified name of the
	// AttributesService's ListAttributeValues RPC.
	AttributesServiceListAttributeValuesProcedure = "/policy.attributes.AttributesService/ListAttributeValues"
	// AttributesServiceGetAttributeProcedure is the fully-qualified name of the AttributesService's
	// GetAttribute RPC.
	AttributesServiceGetAttributeProcedure = "/policy.attributes.AttributesService/GetAttribute"
	// AttributesServiceGetAttributeValuesByFqnsProcedure is the fully-qualified name of the
	// AttributesService's GetAttributeValuesByFqns RPC.
	AttributesServiceGetAttributeValuesByFqnsProcedure = "/policy.attributes.AttributesService/GetAttributeValuesByFqns"
	// AttributesServiceCreateAttributeProcedure is the fully-qualified name of the AttributesService's
	// CreateAttribute RPC.
	AttributesServiceCreateAttributeProcedure = "/policy.attributes.AttributesService/CreateAttribute"
	// AttributesServiceUpdateAttributeProcedure is the fully-qualified name of the AttributesService's
	// UpdateAttribute RPC.
	AttributesServiceUpdateAttributeProcedure = "/policy.attributes.AttributesService/UpdateAttribute"
	// AttributesServiceDeactivateAttributeProcedure is the fully-qualified name of the
	// AttributesService's DeactivateAttribute RPC.
	AttributesServiceDeactivateAttributeProcedure = "/policy.attributes.AttributesService/DeactivateAttribute"
	// AttributesServiceGetAttributeValueProcedure is the fully-qualified name of the
	// AttributesService's GetAttributeValue RPC.
	AttributesServiceGetAttributeValueProcedure = "/policy.attributes.AttributesService/GetAttributeValue"
	// AttributesServiceCreateAttributeValueProcedure is the fully-qualified name of the
	// AttributesService's CreateAttributeValue RPC.
	AttributesServiceCreateAttributeValueProcedure = "/policy.attributes.AttributesService/CreateAttributeValue"
	// AttributesServiceUpdateAttributeValueProcedure is the fully-qualified name of the
	// AttributesService's UpdateAttributeValue RPC.
	AttributesServiceUpdateAttributeValueProcedure = "/policy.attributes.AttributesService/UpdateAttributeValue"
	// AttributesServiceDeactivateAttributeValueProcedure is the fully-qualified name of the
	// AttributesService's DeactivateAttributeValue RPC.
	AttributesServiceDeactivateAttributeValueProcedure = "/policy.attributes.AttributesService/DeactivateAttributeValue"
	// AttributesServiceAssignKeyAccessServerToAttributeProcedure is the fully-qualified name of the
	// AttributesService's AssignKeyAccessServerToAttribute RPC.
	AttributesServiceAssignKeyAccessServerToAttributeProcedure = "/policy.attributes.AttributesService/AssignKeyAccessServerToAttribute"
	// AttributesServiceRemoveKeyAccessServerFromAttributeProcedure is the fully-qualified name of the
	// AttributesService's RemoveKeyAccessServerFromAttribute RPC.
	AttributesServiceRemoveKeyAccessServerFromAttributeProcedure = "/policy.attributes.AttributesService/RemoveKeyAccessServerFromAttribute"
	// AttributesServiceAssignKeyAccessServerToValueProcedure is the fully-qualified name of the
	// AttributesService's AssignKeyAccessServerToValue RPC.
	AttributesServiceAssignKeyAccessServerToValueProcedure = "/policy.attributes.AttributesService/AssignKeyAccessServerToValue"
	// AttributesServiceRemoveKeyAccessServerFromValueProcedure is the fully-qualified name of the
	// AttributesService's RemoveKeyAccessServerFromValue RPC.
	AttributesServiceRemoveKeyAccessServerFromValueProcedure = "/policy.attributes.AttributesService/RemoveKeyAccessServerFromValue"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	attributesServiceServiceDescriptor                                  = attributes.File_policy_attributes_attributes_proto.Services().ByName("AttributesService")
	attributesServiceListAttributesMethodDescriptor                     = attributesServiceServiceDescriptor.Methods().ByName("ListAttributes")
	attributesServiceListAttributeValuesMethodDescriptor                = attributesServiceServiceDescriptor.Methods().ByName("ListAttributeValues")
	attributesServiceGetAttributeMethodDescriptor                       = attributesServiceServiceDescriptor.Methods().ByName("GetAttribute")
	attributesServiceGetAttributeValuesByFqnsMethodDescriptor           = attributesServiceServiceDescriptor.Methods().ByName("GetAttributeValuesByFqns")
	attributesServiceCreateAttributeMethodDescriptor                    = attributesServiceServiceDescriptor.Methods().ByName("CreateAttribute")
	attributesServiceUpdateAttributeMethodDescriptor                    = attributesServiceServiceDescriptor.Methods().ByName("UpdateAttribute")
	attributesServiceDeactivateAttributeMethodDescriptor                = attributesServiceServiceDescriptor.Methods().ByName("DeactivateAttribute")
	attributesServiceGetAttributeValueMethodDescriptor                  = attributesServiceServiceDescriptor.Methods().ByName("GetAttributeValue")
	attributesServiceCreateAttributeValueMethodDescriptor               = attributesServiceServiceDescriptor.Methods().ByName("CreateAttributeValue")
	attributesServiceUpdateAttributeValueMethodDescriptor               = attributesServiceServiceDescriptor.Methods().ByName("UpdateAttributeValue")
	attributesServiceDeactivateAttributeValueMethodDescriptor           = attributesServiceServiceDescriptor.Methods().ByName("DeactivateAttributeValue")
	attributesServiceAssignKeyAccessServerToAttributeMethodDescriptor   = attributesServiceServiceDescriptor.Methods().ByName("AssignKeyAccessServerToAttribute")
	attributesServiceRemoveKeyAccessServerFromAttributeMethodDescriptor = attributesServiceServiceDescriptor.Methods().ByName("RemoveKeyAccessServerFromAttribute")
	attributesServiceAssignKeyAccessServerToValueMethodDescriptor       = attributesServiceServiceDescriptor.Methods().ByName("AssignKeyAccessServerToValue")
	attributesServiceRemoveKeyAccessServerFromValueMethodDescriptor     = attributesServiceServiceDescriptor.Methods().ByName("RemoveKeyAccessServerFromValue")
)

// AttributesServiceClient is a client for the policy.attributes.AttributesService service.
type AttributesServiceClient interface {
	// --------------------------------------*
	// Attribute RPCs
	// ---------------------------------------
	ListAttributes(context.Context, *connect.Request[attributes.ListAttributesRequest]) (*connect.Response[attributes.ListAttributesResponse], error)
	ListAttributeValues(context.Context, *connect.Request[attributes.ListAttributeValuesRequest]) (*connect.Response[attributes.ListAttributeValuesResponse], error)
	GetAttribute(context.Context, *connect.Request[attributes.GetAttributeRequest]) (*connect.Response[attributes.GetAttributeResponse], error)
	GetAttributeValuesByFqns(context.Context, *connect.Request[attributes.GetAttributeValuesByFqnsRequest]) (*connect.Response[attributes.GetAttributeValuesByFqnsResponse], error)
	CreateAttribute(context.Context, *connect.Request[attributes.CreateAttributeRequest]) (*connect.Response[attributes.CreateAttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[attributes.UpdateAttributeRequest]) (*connect.Response[attributes.UpdateAttributeResponse], error)
	DeactivateAttribute(context.Context, *connect.Request[attributes.DeactivateAttributeRequest]) (*connect.Response[attributes.DeactivateAttributeResponse], error)
	// --------------------------------------*
	// Value RPCs
	// ---------------------------------------
	GetAttributeValue(context.Context, *connect.Request[attributes.GetAttributeValueRequest]) (*connect.Response[attributes.GetAttributeValueResponse], error)
	CreateAttributeValue(context.Context, *connect.Request[attributes.CreateAttributeValueRequest]) (*connect.Response[attributes.CreateAttributeValueResponse], error)
	UpdateAttributeValue(context.Context, *connect.Request[attributes.UpdateAttributeValueRequest]) (*connect.Response[attributes.UpdateAttributeValueResponse], error)
	DeactivateAttributeValue(context.Context, *connect.Request[attributes.DeactivateAttributeValueRequest]) (*connect.Response[attributes.DeactivateAttributeValueResponse], error)
	// --------------------------------------*
	// Attribute <> Key Access Server RPCs
	// ---------------------------------------
	AssignKeyAccessServerToAttribute(context.Context, *connect.Request[attributes.AssignKeyAccessServerToAttributeRequest]) (*connect.Response[attributes.AssignKeyAccessServerToAttributeResponse], error)
	RemoveKeyAccessServerFromAttribute(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromAttributeRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromAttributeResponse], error)
	AssignKeyAccessServerToValue(context.Context, *connect.Request[attributes.AssignKeyAccessServerToValueRequest]) (*connect.Response[attributes.AssignKeyAccessServerToValueResponse], error)
	RemoveKeyAccessServerFromValue(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromValueRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromValueResponse], error)
}

// NewAttributesServiceClient constructs a client for the policy.attributes.AttributesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttributesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttributesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &attributesServiceClient{
		listAttributes: connect.NewClient[attributes.ListAttributesRequest, attributes.ListAttributesResponse](
			httpClient,
			baseURL+AttributesServiceListAttributesProcedure,
			connect.WithSchema(attributesServiceListAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAttributeValues: connect.NewClient[attributes.ListAttributeValuesRequest, attributes.ListAttributeValuesResponse](
			httpClient,
			baseURL+AttributesServiceListAttributeValuesProcedure,
			connect.WithSchema(attributesServiceListAttributeValuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttribute: connect.NewClient[attributes.GetAttributeRequest, attributes.GetAttributeResponse](
			httpClient,
			baseURL+AttributesServiceGetAttributeProcedure,
			connect.WithSchema(attributesServiceGetAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttributeValuesByFqns: connect.NewClient[attributes.GetAttributeValuesByFqnsRequest, attributes.GetAttributeValuesByFqnsResponse](
			httpClient,
			baseURL+AttributesServiceGetAttributeValuesByFqnsProcedure,
			connect.WithSchema(attributesServiceGetAttributeValuesByFqnsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAttribute: connect.NewClient[attributes.CreateAttributeRequest, attributes.CreateAttributeResponse](
			httpClient,
			baseURL+AttributesServiceCreateAttributeProcedure,
			connect.WithSchema(attributesServiceCreateAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAttribute: connect.NewClient[attributes.UpdateAttributeRequest, attributes.UpdateAttributeResponse](
			httpClient,
			baseURL+AttributesServiceUpdateAttributeProcedure,
			connect.WithSchema(attributesServiceUpdateAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateAttribute: connect.NewClient[attributes.DeactivateAttributeRequest, attributes.DeactivateAttributeResponse](
			httpClient,
			baseURL+AttributesServiceDeactivateAttributeProcedure,
			connect.WithSchema(attributesServiceDeactivateAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttributeValue: connect.NewClient[attributes.GetAttributeValueRequest, attributes.GetAttributeValueResponse](
			httpClient,
			baseURL+AttributesServiceGetAttributeValueProcedure,
			connect.WithSchema(attributesServiceGetAttributeValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAttributeValue: connect.NewClient[attributes.CreateAttributeValueRequest, attributes.CreateAttributeValueResponse](
			httpClient,
			baseURL+AttributesServiceCreateAttributeValueProcedure,
			connect.WithSchema(attributesServiceCreateAttributeValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAttributeValue: connect.NewClient[attributes.UpdateAttributeValueRequest, attributes.UpdateAttributeValueResponse](
			httpClient,
			baseURL+AttributesServiceUpdateAttributeValueProcedure,
			connect.WithSchema(attributesServiceUpdateAttributeValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateAttributeValue: connect.NewClient[attributes.DeactivateAttributeValueRequest, attributes.DeactivateAttributeValueResponse](
			httpClient,
			baseURL+AttributesServiceDeactivateAttributeValueProcedure,
			connect.WithSchema(attributesServiceDeactivateAttributeValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assignKeyAccessServerToAttribute: connect.NewClient[attributes.AssignKeyAccessServerToAttributeRequest, attributes.AssignKeyAccessServerToAttributeResponse](
			httpClient,
			baseURL+AttributesServiceAssignKeyAccessServerToAttributeProcedure,
			connect.WithSchema(attributesServiceAssignKeyAccessServerToAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeKeyAccessServerFromAttribute: connect.NewClient[attributes.RemoveKeyAccessServerFromAttributeRequest, attributes.RemoveKeyAccessServerFromAttributeResponse](
			httpClient,
			baseURL+AttributesServiceRemoveKeyAccessServerFromAttributeProcedure,
			connect.WithSchema(attributesServiceRemoveKeyAccessServerFromAttributeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assignKeyAccessServerToValue: connect.NewClient[attributes.AssignKeyAccessServerToValueRequest, attributes.AssignKeyAccessServerToValueResponse](
			httpClient,
			baseURL+AttributesServiceAssignKeyAccessServerToValueProcedure,
			connect.WithSchema(attributesServiceAssignKeyAccessServerToValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeKeyAccessServerFromValue: connect.NewClient[attributes.RemoveKeyAccessServerFromValueRequest, attributes.RemoveKeyAccessServerFromValueResponse](
			httpClient,
			baseURL+AttributesServiceRemoveKeyAccessServerFromValueProcedure,
			connect.WithSchema(attributesServiceRemoveKeyAccessServerFromValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// attributesServiceClient implements AttributesServiceClient.
type attributesServiceClient struct {
	listAttributes                     *connect.Client[attributes.ListAttributesRequest, attributes.ListAttributesResponse]
	listAttributeValues                *connect.Client[attributes.ListAttributeValuesRequest, attributes.ListAttributeValuesResponse]
	getAttribute                       *connect.Client[attributes.GetAttributeRequest, attributes.GetAttributeResponse]
	getAttributeValuesByFqns           *connect.Client[attributes.GetAttributeValuesByFqnsRequest, attributes.GetAttributeValuesByFqnsResponse]
	createAttribute                    *connect.Client[attributes.CreateAttributeRequest, attributes.CreateAttributeResponse]
	updateAttribute                    *connect.Client[attributes.UpdateAttributeRequest, attributes.UpdateAttributeResponse]
	deactivateAttribute                *connect.Client[attributes.DeactivateAttributeRequest, attributes.DeactivateAttributeResponse]
	getAttributeValue                  *connect.Client[attributes.GetAttributeValueRequest, attributes.GetAttributeValueResponse]
	createAttributeValue               *connect.Client[attributes.CreateAttributeValueRequest, attributes.CreateAttributeValueResponse]
	updateAttributeValue               *connect.Client[attributes.UpdateAttributeValueRequest, attributes.UpdateAttributeValueResponse]
	deactivateAttributeValue           *connect.Client[attributes.DeactivateAttributeValueRequest, attributes.DeactivateAttributeValueResponse]
	assignKeyAccessServerToAttribute   *connect.Client[attributes.AssignKeyAccessServerToAttributeRequest, attributes.AssignKeyAccessServerToAttributeResponse]
	removeKeyAccessServerFromAttribute *connect.Client[attributes.RemoveKeyAccessServerFromAttributeRequest, attributes.RemoveKeyAccessServerFromAttributeResponse]
	assignKeyAccessServerToValue       *connect.Client[attributes.AssignKeyAccessServerToValueRequest, attributes.AssignKeyAccessServerToValueResponse]
	removeKeyAccessServerFromValue     *connect.Client[attributes.RemoveKeyAccessServerFromValueRequest, attributes.RemoveKeyAccessServerFromValueResponse]
}

// ListAttributes calls policy.attributes.AttributesService.ListAttributes.
func (c *attributesServiceClient) ListAttributes(ctx context.Context, req *connect.Request[attributes.ListAttributesRequest]) (*connect.Response[attributes.ListAttributesResponse], error) {
	return c.listAttributes.CallUnary(ctx, req)
}

// ListAttributeValues calls policy.attributes.AttributesService.ListAttributeValues.
func (c *attributesServiceClient) ListAttributeValues(ctx context.Context, req *connect.Request[attributes.ListAttributeValuesRequest]) (*connect.Response[attributes.ListAttributeValuesResponse], error) {
	return c.listAttributeValues.CallUnary(ctx, req)
}

// GetAttribute calls policy.attributes.AttributesService.GetAttribute.
func (c *attributesServiceClient) GetAttribute(ctx context.Context, req *connect.Request[attributes.GetAttributeRequest]) (*connect.Response[attributes.GetAttributeResponse], error) {
	return c.getAttribute.CallUnary(ctx, req)
}

// GetAttributeValuesByFqns calls policy.attributes.AttributesService.GetAttributeValuesByFqns.
func (c *attributesServiceClient) GetAttributeValuesByFqns(ctx context.Context, req *connect.Request[attributes.GetAttributeValuesByFqnsRequest]) (*connect.Response[attributes.GetAttributeValuesByFqnsResponse], error) {
	return c.getAttributeValuesByFqns.CallUnary(ctx, req)
}

// CreateAttribute calls policy.attributes.AttributesService.CreateAttribute.
func (c *attributesServiceClient) CreateAttribute(ctx context.Context, req *connect.Request[attributes.CreateAttributeRequest]) (*connect.Response[attributes.CreateAttributeResponse], error) {
	return c.createAttribute.CallUnary(ctx, req)
}

// UpdateAttribute calls policy.attributes.AttributesService.UpdateAttribute.
func (c *attributesServiceClient) UpdateAttribute(ctx context.Context, req *connect.Request[attributes.UpdateAttributeRequest]) (*connect.Response[attributes.UpdateAttributeResponse], error) {
	return c.updateAttribute.CallUnary(ctx, req)
}

// DeactivateAttribute calls policy.attributes.AttributesService.DeactivateAttribute.
func (c *attributesServiceClient) DeactivateAttribute(ctx context.Context, req *connect.Request[attributes.DeactivateAttributeRequest]) (*connect.Response[attributes.DeactivateAttributeResponse], error) {
	return c.deactivateAttribute.CallUnary(ctx, req)
}

// GetAttributeValue calls policy.attributes.AttributesService.GetAttributeValue.
func (c *attributesServiceClient) GetAttributeValue(ctx context.Context, req *connect.Request[attributes.GetAttributeValueRequest]) (*connect.Response[attributes.GetAttributeValueResponse], error) {
	return c.getAttributeValue.CallUnary(ctx, req)
}

// CreateAttributeValue calls policy.attributes.AttributesService.CreateAttributeValue.
func (c *attributesServiceClient) CreateAttributeValue(ctx context.Context, req *connect.Request[attributes.CreateAttributeValueRequest]) (*connect.Response[attributes.CreateAttributeValueResponse], error) {
	return c.createAttributeValue.CallUnary(ctx, req)
}

// UpdateAttributeValue calls policy.attributes.AttributesService.UpdateAttributeValue.
func (c *attributesServiceClient) UpdateAttributeValue(ctx context.Context, req *connect.Request[attributes.UpdateAttributeValueRequest]) (*connect.Response[attributes.UpdateAttributeValueResponse], error) {
	return c.updateAttributeValue.CallUnary(ctx, req)
}

// DeactivateAttributeValue calls policy.attributes.AttributesService.DeactivateAttributeValue.
func (c *attributesServiceClient) DeactivateAttributeValue(ctx context.Context, req *connect.Request[attributes.DeactivateAttributeValueRequest]) (*connect.Response[attributes.DeactivateAttributeValueResponse], error) {
	return c.deactivateAttributeValue.CallUnary(ctx, req)
}

// AssignKeyAccessServerToAttribute calls
// policy.attributes.AttributesService.AssignKeyAccessServerToAttribute.
func (c *attributesServiceClient) AssignKeyAccessServerToAttribute(ctx context.Context, req *connect.Request[attributes.AssignKeyAccessServerToAttributeRequest]) (*connect.Response[attributes.AssignKeyAccessServerToAttributeResponse], error) {
	return c.assignKeyAccessServerToAttribute.CallUnary(ctx, req)
}

// RemoveKeyAccessServerFromAttribute calls
// policy.attributes.AttributesService.RemoveKeyAccessServerFromAttribute.
func (c *attributesServiceClient) RemoveKeyAccessServerFromAttribute(ctx context.Context, req *connect.Request[attributes.RemoveKeyAccessServerFromAttributeRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromAttributeResponse], error) {
	return c.removeKeyAccessServerFromAttribute.CallUnary(ctx, req)
}

// AssignKeyAccessServerToValue calls
// policy.attributes.AttributesService.AssignKeyAccessServerToValue.
func (c *attributesServiceClient) AssignKeyAccessServerToValue(ctx context.Context, req *connect.Request[attributes.AssignKeyAccessServerToValueRequest]) (*connect.Response[attributes.AssignKeyAccessServerToValueResponse], error) {
	return c.assignKeyAccessServerToValue.CallUnary(ctx, req)
}

// RemoveKeyAccessServerFromValue calls
// policy.attributes.AttributesService.RemoveKeyAccessServerFromValue.
func (c *attributesServiceClient) RemoveKeyAccessServerFromValue(ctx context.Context, req *connect.Request[attributes.RemoveKeyAccessServerFromValueRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromValueResponse], error) {
	return c.removeKeyAccessServerFromValue.CallUnary(ctx, req)
}

// AttributesServiceHandler is an implementation of the policy.attributes.AttributesService service.
type AttributesServiceHandler interface {
	// --------------------------------------*
	// Attribute RPCs
	// ---------------------------------------
	ListAttributes(context.Context, *connect.Request[attributes.ListAttributesRequest]) (*connect.Response[attributes.ListAttributesResponse], error)
	ListAttributeValues(context.Context, *connect.Request[attributes.ListAttributeValuesRequest]) (*connect.Response[attributes.ListAttributeValuesResponse], error)
	GetAttribute(context.Context, *connect.Request[attributes.GetAttributeRequest]) (*connect.Response[attributes.GetAttributeResponse], error)
	GetAttributeValuesByFqns(context.Context, *connect.Request[attributes.GetAttributeValuesByFqnsRequest]) (*connect.Response[attributes.GetAttributeValuesByFqnsResponse], error)
	CreateAttribute(context.Context, *connect.Request[attributes.CreateAttributeRequest]) (*connect.Response[attributes.CreateAttributeResponse], error)
	UpdateAttribute(context.Context, *connect.Request[attributes.UpdateAttributeRequest]) (*connect.Response[attributes.UpdateAttributeResponse], error)
	DeactivateAttribute(context.Context, *connect.Request[attributes.DeactivateAttributeRequest]) (*connect.Response[attributes.DeactivateAttributeResponse], error)
	// --------------------------------------*
	// Value RPCs
	// ---------------------------------------
	GetAttributeValue(context.Context, *connect.Request[attributes.GetAttributeValueRequest]) (*connect.Response[attributes.GetAttributeValueResponse], error)
	CreateAttributeValue(context.Context, *connect.Request[attributes.CreateAttributeValueRequest]) (*connect.Response[attributes.CreateAttributeValueResponse], error)
	UpdateAttributeValue(context.Context, *connect.Request[attributes.UpdateAttributeValueRequest]) (*connect.Response[attributes.UpdateAttributeValueResponse], error)
	DeactivateAttributeValue(context.Context, *connect.Request[attributes.DeactivateAttributeValueRequest]) (*connect.Response[attributes.DeactivateAttributeValueResponse], error)
	// --------------------------------------*
	// Attribute <> Key Access Server RPCs
	// ---------------------------------------
	AssignKeyAccessServerToAttribute(context.Context, *connect.Request[attributes.AssignKeyAccessServerToAttributeRequest]) (*connect.Response[attributes.AssignKeyAccessServerToAttributeResponse], error)
	RemoveKeyAccessServerFromAttribute(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromAttributeRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromAttributeResponse], error)
	AssignKeyAccessServerToValue(context.Context, *connect.Request[attributes.AssignKeyAccessServerToValueRequest]) (*connect.Response[attributes.AssignKeyAccessServerToValueResponse], error)
	RemoveKeyAccessServerFromValue(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromValueRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromValueResponse], error)
}

// NewAttributesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttributesServiceHandler(svc AttributesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attributesServiceListAttributesHandler := connect.NewUnaryHandler(
		AttributesServiceListAttributesProcedure,
		svc.ListAttributes,
		connect.WithSchema(attributesServiceListAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceListAttributeValuesHandler := connect.NewUnaryHandler(
		AttributesServiceListAttributeValuesProcedure,
		svc.ListAttributeValues,
		connect.WithSchema(attributesServiceListAttributeValuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceGetAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceGetAttributeProcedure,
		svc.GetAttribute,
		connect.WithSchema(attributesServiceGetAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceGetAttributeValuesByFqnsHandler := connect.NewUnaryHandler(
		AttributesServiceGetAttributeValuesByFqnsProcedure,
		svc.GetAttributeValuesByFqns,
		connect.WithSchema(attributesServiceGetAttributeValuesByFqnsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceCreateAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceCreateAttributeProcedure,
		svc.CreateAttribute,
		connect.WithSchema(attributesServiceCreateAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceUpdateAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceUpdateAttributeProcedure,
		svc.UpdateAttribute,
		connect.WithSchema(attributesServiceUpdateAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceDeactivateAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceDeactivateAttributeProcedure,
		svc.DeactivateAttribute,
		connect.WithSchema(attributesServiceDeactivateAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceGetAttributeValueHandler := connect.NewUnaryHandler(
		AttributesServiceGetAttributeValueProcedure,
		svc.GetAttributeValue,
		connect.WithSchema(attributesServiceGetAttributeValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceCreateAttributeValueHandler := connect.NewUnaryHandler(
		AttributesServiceCreateAttributeValueProcedure,
		svc.CreateAttributeValue,
		connect.WithSchema(attributesServiceCreateAttributeValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceUpdateAttributeValueHandler := connect.NewUnaryHandler(
		AttributesServiceUpdateAttributeValueProcedure,
		svc.UpdateAttributeValue,
		connect.WithSchema(attributesServiceUpdateAttributeValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceDeactivateAttributeValueHandler := connect.NewUnaryHandler(
		AttributesServiceDeactivateAttributeValueProcedure,
		svc.DeactivateAttributeValue,
		connect.WithSchema(attributesServiceDeactivateAttributeValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceAssignKeyAccessServerToAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceAssignKeyAccessServerToAttributeProcedure,
		svc.AssignKeyAccessServerToAttribute,
		connect.WithSchema(attributesServiceAssignKeyAccessServerToAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceRemoveKeyAccessServerFromAttributeHandler := connect.NewUnaryHandler(
		AttributesServiceRemoveKeyAccessServerFromAttributeProcedure,
		svc.RemoveKeyAccessServerFromAttribute,
		connect.WithSchema(attributesServiceRemoveKeyAccessServerFromAttributeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceAssignKeyAccessServerToValueHandler := connect.NewUnaryHandler(
		AttributesServiceAssignKeyAccessServerToValueProcedure,
		svc.AssignKeyAccessServerToValue,
		connect.WithSchema(attributesServiceAssignKeyAccessServerToValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	attributesServiceRemoveKeyAccessServerFromValueHandler := connect.NewUnaryHandler(
		AttributesServiceRemoveKeyAccessServerFromValueProcedure,
		svc.RemoveKeyAccessServerFromValue,
		connect.WithSchema(attributesServiceRemoveKeyAccessServerFromValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.attributes.AttributesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttributesServiceListAttributesProcedure:
			attributesServiceListAttributesHandler.ServeHTTP(w, r)
		case AttributesServiceListAttributeValuesProcedure:
			attributesServiceListAttributeValuesHandler.ServeHTTP(w, r)
		case AttributesServiceGetAttributeProcedure:
			attributesServiceGetAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceGetAttributeValuesByFqnsProcedure:
			attributesServiceGetAttributeValuesByFqnsHandler.ServeHTTP(w, r)
		case AttributesServiceCreateAttributeProcedure:
			attributesServiceCreateAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceUpdateAttributeProcedure:
			attributesServiceUpdateAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceDeactivateAttributeProcedure:
			attributesServiceDeactivateAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceGetAttributeValueProcedure:
			attributesServiceGetAttributeValueHandler.ServeHTTP(w, r)
		case AttributesServiceCreateAttributeValueProcedure:
			attributesServiceCreateAttributeValueHandler.ServeHTTP(w, r)
		case AttributesServiceUpdateAttributeValueProcedure:
			attributesServiceUpdateAttributeValueHandler.ServeHTTP(w, r)
		case AttributesServiceDeactivateAttributeValueProcedure:
			attributesServiceDeactivateAttributeValueHandler.ServeHTTP(w, r)
		case AttributesServiceAssignKeyAccessServerToAttributeProcedure:
			attributesServiceAssignKeyAccessServerToAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceRemoveKeyAccessServerFromAttributeProcedure:
			attributesServiceRemoveKeyAccessServerFromAttributeHandler.ServeHTTP(w, r)
		case AttributesServiceAssignKeyAccessServerToValueProcedure:
			attributesServiceAssignKeyAccessServerToValueHandler.ServeHTTP(w, r)
		case AttributesServiceRemoveKeyAccessServerFromValueProcedure:
			attributesServiceRemoveKeyAccessServerFromValueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttributesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttributesServiceHandler struct{}

func (UnimplementedAttributesServiceHandler) ListAttributes(context.Context, *connect.Request[attributes.ListAttributesRequest]) (*connect.Response[attributes.ListAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.ListAttributes is not implemented"))
}

func (UnimplementedAttributesServiceHandler) ListAttributeValues(context.Context, *connect.Request[attributes.ListAttributeValuesRequest]) (*connect.Response[attributes.ListAttributeValuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.ListAttributeValues is not implemented"))
}

func (UnimplementedAttributesServiceHandler) GetAttribute(context.Context, *connect.Request[attributes.GetAttributeRequest]) (*connect.Response[attributes.GetAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.GetAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) GetAttributeValuesByFqns(context.Context, *connect.Request[attributes.GetAttributeValuesByFqnsRequest]) (*connect.Response[attributes.GetAttributeValuesByFqnsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.GetAttributeValuesByFqns is not implemented"))
}

func (UnimplementedAttributesServiceHandler) CreateAttribute(context.Context, *connect.Request[attributes.CreateAttributeRequest]) (*connect.Response[attributes.CreateAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.CreateAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) UpdateAttribute(context.Context, *connect.Request[attributes.UpdateAttributeRequest]) (*connect.Response[attributes.UpdateAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.UpdateAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) DeactivateAttribute(context.Context, *connect.Request[attributes.DeactivateAttributeRequest]) (*connect.Response[attributes.DeactivateAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.DeactivateAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) GetAttributeValue(context.Context, *connect.Request[attributes.GetAttributeValueRequest]) (*connect.Response[attributes.GetAttributeValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.GetAttributeValue is not implemented"))
}

func (UnimplementedAttributesServiceHandler) CreateAttributeValue(context.Context, *connect.Request[attributes.CreateAttributeValueRequest]) (*connect.Response[attributes.CreateAttributeValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.CreateAttributeValue is not implemented"))
}

func (UnimplementedAttributesServiceHandler) UpdateAttributeValue(context.Context, *connect.Request[attributes.UpdateAttributeValueRequest]) (*connect.Response[attributes.UpdateAttributeValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.UpdateAttributeValue is not implemented"))
}

func (UnimplementedAttributesServiceHandler) DeactivateAttributeValue(context.Context, *connect.Request[attributes.DeactivateAttributeValueRequest]) (*connect.Response[attributes.DeactivateAttributeValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.DeactivateAttributeValue is not implemented"))
}

func (UnimplementedAttributesServiceHandler) AssignKeyAccessServerToAttribute(context.Context, *connect.Request[attributes.AssignKeyAccessServerToAttributeRequest]) (*connect.Response[attributes.AssignKeyAccessServerToAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.AssignKeyAccessServerToAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) RemoveKeyAccessServerFromAttribute(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromAttributeRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.RemoveKeyAccessServerFromAttribute is not implemented"))
}

func (UnimplementedAttributesServiceHandler) AssignKeyAccessServerToValue(context.Context, *connect.Request[attributes.AssignKeyAccessServerToValueRequest]) (*connect.Response[attributes.AssignKeyAccessServerToValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.AssignKeyAccessServerToValue is not implemented"))
}

func (UnimplementedAttributesServiceHandler) RemoveKeyAccessServerFromValue(context.Context, *connect.Request[attributes.RemoveKeyAccessServerFromValueRequest]) (*connect.Response[attributes.RemoveKeyAccessServerFromValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.attributes.AttributesService.RemoveKeyAccessServerFromValue is not implemented"))
}
