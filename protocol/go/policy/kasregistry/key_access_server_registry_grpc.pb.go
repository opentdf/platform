// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy/kasregistry/key_access_server_registry.proto

package kasregistry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyAccessServerRegistryService_ListKeyAccessServers_FullMethodName      = "/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServers"
	KeyAccessServerRegistryService_GetKeyAccessServer_FullMethodName        = "/policy.kasregistry.KeyAccessServerRegistryService/GetKeyAccessServer"
	KeyAccessServerRegistryService_CreateKeyAccessServer_FullMethodName     = "/policy.kasregistry.KeyAccessServerRegistryService/CreateKeyAccessServer"
	KeyAccessServerRegistryService_UpdateKeyAccessServer_FullMethodName     = "/policy.kasregistry.KeyAccessServerRegistryService/UpdateKeyAccessServer"
	KeyAccessServerRegistryService_DeleteKeyAccessServer_FullMethodName     = "/policy.kasregistry.KeyAccessServerRegistryService/DeleteKeyAccessServer"
	KeyAccessServerRegistryService_ListKeyAccessServerGrants_FullMethodName = "/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServerGrants"
	KeyAccessServerRegistryService_CreatePublicKey_FullMethodName           = "/policy.kasregistry.KeyAccessServerRegistryService/CreatePublicKey"
	KeyAccessServerRegistryService_GetPublicKey_FullMethodName              = "/policy.kasregistry.KeyAccessServerRegistryService/GetPublicKey"
	KeyAccessServerRegistryService_ListPublicKeys_FullMethodName            = "/policy.kasregistry.KeyAccessServerRegistryService/ListPublicKeys"
	KeyAccessServerRegistryService_ListPublicKeyMapping_FullMethodName      = "/policy.kasregistry.KeyAccessServerRegistryService/ListPublicKeyMapping"
	KeyAccessServerRegistryService_UpdatePublicKey_FullMethodName           = "/policy.kasregistry.KeyAccessServerRegistryService/UpdatePublicKey"
	KeyAccessServerRegistryService_DeactivatePublicKey_FullMethodName       = "/policy.kasregistry.KeyAccessServerRegistryService/DeactivatePublicKey"
	KeyAccessServerRegistryService_ActivatePublicKey_FullMethodName         = "/policy.kasregistry.KeyAccessServerRegistryService/ActivatePublicKey"
)

// KeyAccessServerRegistryServiceClient is the client API for KeyAccessServerRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyAccessServerRegistryServiceClient interface {
	ListKeyAccessServers(ctx context.Context, in *ListKeyAccessServersRequest, opts ...grpc.CallOption) (*ListKeyAccessServersResponse, error)
	GetKeyAccessServer(ctx context.Context, in *GetKeyAccessServerRequest, opts ...grpc.CallOption) (*GetKeyAccessServerResponse, error)
	CreateKeyAccessServer(ctx context.Context, in *CreateKeyAccessServerRequest, opts ...grpc.CallOption) (*CreateKeyAccessServerResponse, error)
	UpdateKeyAccessServer(ctx context.Context, in *UpdateKeyAccessServerRequest, opts ...grpc.CallOption) (*UpdateKeyAccessServerResponse, error)
	DeleteKeyAccessServer(ctx context.Context, in *DeleteKeyAccessServerRequest, opts ...grpc.CallOption) (*DeleteKeyAccessServerResponse, error)
	// Deprecated
	ListKeyAccessServerGrants(ctx context.Context, in *ListKeyAccessServerGrantsRequest, opts ...grpc.CallOption) (*ListKeyAccessServerGrantsResponse, error)
	CreatePublicKey(ctx context.Context, in *CreatePublicKeyRequest, opts ...grpc.CallOption) (*CreatePublicKeyResponse, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	ListPublicKeys(ctx context.Context, in *ListPublicKeysRequest, opts ...grpc.CallOption) (*ListPublicKeysResponse, error)
	ListPublicKeyMapping(ctx context.Context, in *ListPublicKeyMappingRequest, opts ...grpc.CallOption) (*ListPublicKeyMappingResponse, error)
	UpdatePublicKey(ctx context.Context, in *UpdatePublicKeyRequest, opts ...grpc.CallOption) (*UpdatePublicKeyResponse, error)
	DeactivatePublicKey(ctx context.Context, in *DeactivatePublicKeyRequest, opts ...grpc.CallOption) (*DeactivatePublicKeyResponse, error)
	ActivatePublicKey(ctx context.Context, in *ActivatePublicKeyRequest, opts ...grpc.CallOption) (*ActivatePublicKeyResponse, error)
}

type keyAccessServerRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAccessServerRegistryServiceClient(cc grpc.ClientConnInterface) KeyAccessServerRegistryServiceClient {
	return &keyAccessServerRegistryServiceClient{cc}
}

func (c *keyAccessServerRegistryServiceClient) ListKeyAccessServers(ctx context.Context, in *ListKeyAccessServersRequest, opts ...grpc.CallOption) (*ListKeyAccessServersResponse, error) {
	out := new(ListKeyAccessServersResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_ListKeyAccessServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) GetKeyAccessServer(ctx context.Context, in *GetKeyAccessServerRequest, opts ...grpc.CallOption) (*GetKeyAccessServerResponse, error) {
	out := new(GetKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_GetKeyAccessServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) CreateKeyAccessServer(ctx context.Context, in *CreateKeyAccessServerRequest, opts ...grpc.CallOption) (*CreateKeyAccessServerResponse, error) {
	out := new(CreateKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_CreateKeyAccessServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) UpdateKeyAccessServer(ctx context.Context, in *UpdateKeyAccessServerRequest, opts ...grpc.CallOption) (*UpdateKeyAccessServerResponse, error) {
	out := new(UpdateKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_UpdateKeyAccessServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) DeleteKeyAccessServer(ctx context.Context, in *DeleteKeyAccessServerRequest, opts ...grpc.CallOption) (*DeleteKeyAccessServerResponse, error) {
	out := new(DeleteKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_DeleteKeyAccessServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) ListKeyAccessServerGrants(ctx context.Context, in *ListKeyAccessServerGrantsRequest, opts ...grpc.CallOption) (*ListKeyAccessServerGrantsResponse, error) {
	out := new(ListKeyAccessServerGrantsResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_ListKeyAccessServerGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) CreatePublicKey(ctx context.Context, in *CreatePublicKeyRequest, opts ...grpc.CallOption) (*CreatePublicKeyResponse, error) {
	out := new(CreatePublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_CreatePublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_GetPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) ListPublicKeys(ctx context.Context, in *ListPublicKeysRequest, opts ...grpc.CallOption) (*ListPublicKeysResponse, error) {
	out := new(ListPublicKeysResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_ListPublicKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) ListPublicKeyMapping(ctx context.Context, in *ListPublicKeyMappingRequest, opts ...grpc.CallOption) (*ListPublicKeyMappingResponse, error) {
	out := new(ListPublicKeyMappingResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_ListPublicKeyMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) UpdatePublicKey(ctx context.Context, in *UpdatePublicKeyRequest, opts ...grpc.CallOption) (*UpdatePublicKeyResponse, error) {
	out := new(UpdatePublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_UpdatePublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) DeactivatePublicKey(ctx context.Context, in *DeactivatePublicKeyRequest, opts ...grpc.CallOption) (*DeactivatePublicKeyResponse, error) {
	out := new(DeactivatePublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_DeactivatePublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServerRegistryServiceClient) ActivatePublicKey(ctx context.Context, in *ActivatePublicKeyRequest, opts ...grpc.CallOption) (*ActivatePublicKeyResponse, error) {
	out := new(ActivatePublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyAccessServerRegistryService_ActivatePublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAccessServerRegistryServiceServer is the server API for KeyAccessServerRegistryService service.
// All implementations must embed UnimplementedKeyAccessServerRegistryServiceServer
// for forward compatibility
type KeyAccessServerRegistryServiceServer interface {
	ListKeyAccessServers(context.Context, *ListKeyAccessServersRequest) (*ListKeyAccessServersResponse, error)
	GetKeyAccessServer(context.Context, *GetKeyAccessServerRequest) (*GetKeyAccessServerResponse, error)
	CreateKeyAccessServer(context.Context, *CreateKeyAccessServerRequest) (*CreateKeyAccessServerResponse, error)
	UpdateKeyAccessServer(context.Context, *UpdateKeyAccessServerRequest) (*UpdateKeyAccessServerResponse, error)
	DeleteKeyAccessServer(context.Context, *DeleteKeyAccessServerRequest) (*DeleteKeyAccessServerResponse, error)
	// Deprecated
	ListKeyAccessServerGrants(context.Context, *ListKeyAccessServerGrantsRequest) (*ListKeyAccessServerGrantsResponse, error)
	CreatePublicKey(context.Context, *CreatePublicKeyRequest) (*CreatePublicKeyResponse, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	ListPublicKeys(context.Context, *ListPublicKeysRequest) (*ListPublicKeysResponse, error)
	ListPublicKeyMapping(context.Context, *ListPublicKeyMappingRequest) (*ListPublicKeyMappingResponse, error)
	UpdatePublicKey(context.Context, *UpdatePublicKeyRequest) (*UpdatePublicKeyResponse, error)
	DeactivatePublicKey(context.Context, *DeactivatePublicKeyRequest) (*DeactivatePublicKeyResponse, error)
	ActivatePublicKey(context.Context, *ActivatePublicKeyRequest) (*ActivatePublicKeyResponse, error)
	mustEmbedUnimplementedKeyAccessServerRegistryServiceServer()
}

// UnimplementedKeyAccessServerRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyAccessServerRegistryServiceServer struct {
}

func (UnimplementedKeyAccessServerRegistryServiceServer) ListKeyAccessServers(context.Context, *ListKeyAccessServersRequest) (*ListKeyAccessServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyAccessServers not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) GetKeyAccessServer(context.Context, *GetKeyAccessServerRequest) (*GetKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyAccessServer not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) CreateKeyAccessServer(context.Context, *CreateKeyAccessServerRequest) (*CreateKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyAccessServer not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) UpdateKeyAccessServer(context.Context, *UpdateKeyAccessServerRequest) (*UpdateKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyAccessServer not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) DeleteKeyAccessServer(context.Context, *DeleteKeyAccessServerRequest) (*DeleteKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyAccessServer not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) ListKeyAccessServerGrants(context.Context, *ListKeyAccessServerGrantsRequest) (*ListKeyAccessServerGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyAccessServerGrants not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) CreatePublicKey(context.Context, *CreatePublicKeyRequest) (*CreatePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicKey not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) ListPublicKeys(context.Context, *ListPublicKeysRequest) (*ListPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicKeys not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) ListPublicKeyMapping(context.Context, *ListPublicKeyMappingRequest) (*ListPublicKeyMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicKeyMapping not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) UpdatePublicKey(context.Context, *UpdatePublicKeyRequest) (*UpdatePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicKey not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) DeactivatePublicKey(context.Context, *DeactivatePublicKeyRequest) (*DeactivatePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivatePublicKey not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) ActivatePublicKey(context.Context, *ActivatePublicKeyRequest) (*ActivatePublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePublicKey not implemented")
}
func (UnimplementedKeyAccessServerRegistryServiceServer) mustEmbedUnimplementedKeyAccessServerRegistryServiceServer() {
}

// UnsafeKeyAccessServerRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAccessServerRegistryServiceServer will
// result in compilation errors.
type UnsafeKeyAccessServerRegistryServiceServer interface {
	mustEmbedUnimplementedKeyAccessServerRegistryServiceServer()
}

func RegisterKeyAccessServerRegistryServiceServer(s grpc.ServiceRegistrar, srv KeyAccessServerRegistryServiceServer) {
	s.RegisterService(&KeyAccessServerRegistryService_ServiceDesc, srv)
}

func _KeyAccessServerRegistryService_ListKeyAccessServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyAccessServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).ListKeyAccessServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_ListKeyAccessServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).ListKeyAccessServers(ctx, req.(*ListKeyAccessServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_GetKeyAccessServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).GetKeyAccessServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_GetKeyAccessServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).GetKeyAccessServer(ctx, req.(*GetKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_CreateKeyAccessServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).CreateKeyAccessServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_CreateKeyAccessServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).CreateKeyAccessServer(ctx, req.(*CreateKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_UpdateKeyAccessServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).UpdateKeyAccessServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_UpdateKeyAccessServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).UpdateKeyAccessServer(ctx, req.(*UpdateKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_DeleteKeyAccessServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).DeleteKeyAccessServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_DeleteKeyAccessServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).DeleteKeyAccessServer(ctx, req.(*DeleteKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_ListKeyAccessServerGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyAccessServerGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).ListKeyAccessServerGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_ListKeyAccessServerGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).ListKeyAccessServerGrants(ctx, req.(*ListKeyAccessServerGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_CreatePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).CreatePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_CreatePublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).CreatePublicKey(ctx, req.(*CreatePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_ListPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).ListPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_ListPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).ListPublicKeys(ctx, req.(*ListPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_ListPublicKeyMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicKeyMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).ListPublicKeyMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_ListPublicKeyMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).ListPublicKeyMapping(ctx, req.(*ListPublicKeyMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_UpdatePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).UpdatePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_UpdatePublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).UpdatePublicKey(ctx, req.(*UpdatePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_DeactivatePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivatePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).DeactivatePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_DeactivatePublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).DeactivatePublicKey(ctx, req.(*DeactivatePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServerRegistryService_ActivatePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivatePublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServerRegistryServiceServer).ActivatePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServerRegistryService_ActivatePublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServerRegistryServiceServer).ActivatePublicKey(ctx, req.(*ActivatePublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAccessServerRegistryService_ServiceDesc is the grpc.ServiceDesc for KeyAccessServerRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAccessServerRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.kasregistry.KeyAccessServerRegistryService",
	HandlerType: (*KeyAccessServerRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeyAccessServers",
			Handler:    _KeyAccessServerRegistryService_ListKeyAccessServers_Handler,
		},
		{
			MethodName: "GetKeyAccessServer",
			Handler:    _KeyAccessServerRegistryService_GetKeyAccessServer_Handler,
		},
		{
			MethodName: "CreateKeyAccessServer",
			Handler:    _KeyAccessServerRegistryService_CreateKeyAccessServer_Handler,
		},
		{
			MethodName: "UpdateKeyAccessServer",
			Handler:    _KeyAccessServerRegistryService_UpdateKeyAccessServer_Handler,
		},
		{
			MethodName: "DeleteKeyAccessServer",
			Handler:    _KeyAccessServerRegistryService_DeleteKeyAccessServer_Handler,
		},
		{
			MethodName: "ListKeyAccessServerGrants",
			Handler:    _KeyAccessServerRegistryService_ListKeyAccessServerGrants_Handler,
		},
		{
			MethodName: "CreatePublicKey",
			Handler:    _KeyAccessServerRegistryService_CreatePublicKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _KeyAccessServerRegistryService_GetPublicKey_Handler,
		},
		{
			MethodName: "ListPublicKeys",
			Handler:    _KeyAccessServerRegistryService_ListPublicKeys_Handler,
		},
		{
			MethodName: "ListPublicKeyMapping",
			Handler:    _KeyAccessServerRegistryService_ListPublicKeyMapping_Handler,
		},
		{
			MethodName: "UpdatePublicKey",
			Handler:    _KeyAccessServerRegistryService_UpdatePublicKey_Handler,
		},
		{
			MethodName: "DeactivatePublicKey",
			Handler:    _KeyAccessServerRegistryService_DeactivatePublicKey_Handler,
		},
		{
			MethodName: "ActivatePublicKey",
			Handler:    _KeyAccessServerRegistryService_ActivatePublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/kasregistry/key_access_server_registry.proto",
}
