// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: policy/keymanagement/key_management.proto

package keymanagement

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/opentdf/platform/protocol/go/common"
	policy "github.com/opentdf/platform/protocol/go/policy"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Provider Configuration Requests and Response Messages
type CreateProviderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// The name of the key provider. (e.g. "AWS KMS", "Google Cloud KMS", "Azure Key Vault")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required
	// JSON configuration for the key provider. This is unique to individual key providers.
	ConfigJson []byte `protobuf:"bytes,2,opt,name=config_json,json=configJson,proto3" json:"config_json,omitempty"`
	// Common metadata
	Metadata *common.MetadataMutable `protobuf:"bytes,100,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CreateProviderConfigRequest) Reset() {
	*x = CreateProviderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProviderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderConfigRequest) ProtoMessage() {}

func (x *CreateProviderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateProviderConfigRequest) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{0}
}

func (x *CreateProviderConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProviderConfigRequest) GetConfigJson() []byte {
	if x != nil {
		return x.ConfigJson
	}
	return nil
}

func (x *CreateProviderConfigRequest) GetMetadata() *common.MetadataMutable {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateProviderConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderConfig *policy.KeyProviderConfig `protobuf:"bytes,1,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty"`
}

func (x *CreateProviderConfigResponse) Reset() {
	*x = CreateProviderConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProviderConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderConfigResponse) ProtoMessage() {}

func (x *CreateProviderConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateProviderConfigResponse) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProviderConfigResponse) GetProviderConfig() *policy.KeyProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

type GetProviderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	//
	// Types that are assignable to Identifier:
	//
	//	*GetProviderConfigRequest_Id
	//	*GetProviderConfigRequest_Name
	Identifier isGetProviderConfigRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetProviderConfigRequest) Reset() {
	*x = GetProviderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderConfigRequest) ProtoMessage() {}

func (x *GetProviderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderConfigRequest.ProtoReflect.Descriptor instead.
func (*GetProviderConfigRequest) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{2}
}

func (m *GetProviderConfigRequest) GetIdentifier() isGetProviderConfigRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetProviderConfigRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*GetProviderConfigRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetProviderConfigRequest) GetName() string {
	if x, ok := x.GetIdentifier().(*GetProviderConfigRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isGetProviderConfigRequest_Identifier interface {
	isGetProviderConfigRequest_Identifier()
}

type GetProviderConfigRequest_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type GetProviderConfigRequest_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*GetProviderConfigRequest_Id) isGetProviderConfigRequest_Identifier() {}

func (*GetProviderConfigRequest_Name) isGetProviderConfigRequest_Identifier() {}

type GetProviderConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderConfig *policy.KeyProviderConfig `protobuf:"bytes,1,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty"`
}

func (x *GetProviderConfigResponse) Reset() {
	*x = GetProviderConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderConfigResponse) ProtoMessage() {}

func (x *GetProviderConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderConfigResponse.ProtoReflect.Descriptor instead.
func (*GetProviderConfigResponse) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{3}
}

func (x *GetProviderConfigResponse) GetProviderConfig() *policy.KeyProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

type ListProviderConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional
	Pagination *policy.PageRequest `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListProviderConfigsRequest) Reset() {
	*x = ListProviderConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProviderConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderConfigsRequest) ProtoMessage() {}

func (x *ListProviderConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListProviderConfigsRequest) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{4}
}

func (x *ListProviderConfigsRequest) GetPagination() *policy.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListProviderConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderConfigs []*policy.KeyProviderConfig `protobuf:"bytes,1,rep,name=provider_configs,json=providerConfigs,proto3" json:"provider_configs,omitempty"`
	Pagination      *policy.PageResponse        `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListProviderConfigsResponse) Reset() {
	*x = ListProviderConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProviderConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderConfigsResponse) ProtoMessage() {}

func (x *ListProviderConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListProviderConfigsResponse) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{5}
}

func (x *ListProviderConfigsResponse) GetProviderConfigs() []*policy.KeyProviderConfig {
	if x != nil {
		return x.ProviderConfigs
	}
	return nil
}

func (x *ListProviderConfigsResponse) GetPagination() *policy.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateProviderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional
	ConfigJson []byte `protobuf:"bytes,3,opt,name=config_json,json=configJson,proto3" json:"config_json,omitempty"`
	// Optional
	// Common metadata
	Metadata               *common.MetadataMutable   `protobuf:"bytes,100,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MetadataUpdateBehavior common.MetadataUpdateEnum `protobuf:"varint,101,opt,name=metadata_update_behavior,json=metadataUpdateBehavior,proto3,enum=common.MetadataUpdateEnum" json:"metadata_update_behavior,omitempty"`
}

func (x *UpdateProviderConfigRequest) Reset() {
	*x = UpdateProviderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProviderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProviderConfigRequest) ProtoMessage() {}

func (x *UpdateProviderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProviderConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateProviderConfigRequest) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateProviderConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProviderConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProviderConfigRequest) GetConfigJson() []byte {
	if x != nil {
		return x.ConfigJson
	}
	return nil
}

func (x *UpdateProviderConfigRequest) GetMetadata() *common.MetadataMutable {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateProviderConfigRequest) GetMetadataUpdateBehavior() common.MetadataUpdateEnum {
	if x != nil {
		return x.MetadataUpdateBehavior
	}
	return common.MetadataUpdateEnum(0)
}

type UpdateProviderConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderConfig *policy.KeyProviderConfig `protobuf:"bytes,1,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty"`
}

func (x *UpdateProviderConfigResponse) Reset() {
	*x = UpdateProviderConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProviderConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProviderConfigResponse) ProtoMessage() {}

func (x *UpdateProviderConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProviderConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateProviderConfigResponse) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProviderConfigResponse) GetProviderConfig() *policy.KeyProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

// In order to delete a provider configuration you must first delete all keys associated with the provider.
type DeleteProviderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProviderConfigRequest) Reset() {
	*x = DeleteProviderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProviderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderConfigRequest) ProtoMessage() {}

func (x *DeleteProviderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteProviderConfigRequest) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteProviderConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProviderConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderConfig *policy.KeyProviderConfig `protobuf:"bytes,1,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty"`
}

func (x *DeleteProviderConfigResponse) Reset() {
	*x = DeleteProviderConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_keymanagement_key_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProviderConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderConfigResponse) ProtoMessage() {}

func (x *DeleteProviderConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_keymanagement_key_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteProviderConfigResponse) Descriptor() ([]byte, []int) {
	return file_policy_keymanagement_key_management_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteProviderConfigResponse) GetProviderConfig() *policy.KeyProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

var File_policy_keymanagement_key_management_proto protoreflect.FileDescriptor

var file_policy_keymanagement_key_management_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x5f, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x99, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x54, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x16, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x62, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x37, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x62, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x8f, 0x05, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b,
	0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b,
	0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x30, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xdd, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x50, 0x4b, 0x58, 0xaa,
	0x02, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c,
	0x4b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x20,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4b, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4b, 0x65, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_keymanagement_key_management_proto_rawDescOnce sync.Once
	file_policy_keymanagement_key_management_proto_rawDescData = file_policy_keymanagement_key_management_proto_rawDesc
)

func file_policy_keymanagement_key_management_proto_rawDescGZIP() []byte {
	file_policy_keymanagement_key_management_proto_rawDescOnce.Do(func() {
		file_policy_keymanagement_key_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_keymanagement_key_management_proto_rawDescData)
	})
	return file_policy_keymanagement_key_management_proto_rawDescData
}

var file_policy_keymanagement_key_management_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_policy_keymanagement_key_management_proto_goTypes = []interface{}{
	(*CreateProviderConfigRequest)(nil),  // 0: policy.keymanagement.CreateProviderConfigRequest
	(*CreateProviderConfigResponse)(nil), // 1: policy.keymanagement.CreateProviderConfigResponse
	(*GetProviderConfigRequest)(nil),     // 2: policy.keymanagement.GetProviderConfigRequest
	(*GetProviderConfigResponse)(nil),    // 3: policy.keymanagement.GetProviderConfigResponse
	(*ListProviderConfigsRequest)(nil),   // 4: policy.keymanagement.ListProviderConfigsRequest
	(*ListProviderConfigsResponse)(nil),  // 5: policy.keymanagement.ListProviderConfigsResponse
	(*UpdateProviderConfigRequest)(nil),  // 6: policy.keymanagement.UpdateProviderConfigRequest
	(*UpdateProviderConfigResponse)(nil), // 7: policy.keymanagement.UpdateProviderConfigResponse
	(*DeleteProviderConfigRequest)(nil),  // 8: policy.keymanagement.DeleteProviderConfigRequest
	(*DeleteProviderConfigResponse)(nil), // 9: policy.keymanagement.DeleteProviderConfigResponse
	(*common.MetadataMutable)(nil),       // 10: common.MetadataMutable
	(*policy.KeyProviderConfig)(nil),     // 11: policy.KeyProviderConfig
	(*policy.PageRequest)(nil),           // 12: policy.PageRequest
	(*policy.PageResponse)(nil),          // 13: policy.PageResponse
	(common.MetadataUpdateEnum)(0),       // 14: common.MetadataUpdateEnum
}
var file_policy_keymanagement_key_management_proto_depIdxs = []int32{
	10, // 0: policy.keymanagement.CreateProviderConfigRequest.metadata:type_name -> common.MetadataMutable
	11, // 1: policy.keymanagement.CreateProviderConfigResponse.provider_config:type_name -> policy.KeyProviderConfig
	11, // 2: policy.keymanagement.GetProviderConfigResponse.provider_config:type_name -> policy.KeyProviderConfig
	12, // 3: policy.keymanagement.ListProviderConfigsRequest.pagination:type_name -> policy.PageRequest
	11, // 4: policy.keymanagement.ListProviderConfigsResponse.provider_configs:type_name -> policy.KeyProviderConfig
	13, // 5: policy.keymanagement.ListProviderConfigsResponse.pagination:type_name -> policy.PageResponse
	10, // 6: policy.keymanagement.UpdateProviderConfigRequest.metadata:type_name -> common.MetadataMutable
	14, // 7: policy.keymanagement.UpdateProviderConfigRequest.metadata_update_behavior:type_name -> common.MetadataUpdateEnum
	11, // 8: policy.keymanagement.UpdateProviderConfigResponse.provider_config:type_name -> policy.KeyProviderConfig
	11, // 9: policy.keymanagement.DeleteProviderConfigResponse.provider_config:type_name -> policy.KeyProviderConfig
	0,  // 10: policy.keymanagement.KeyManagementService.CreateProviderConfig:input_type -> policy.keymanagement.CreateProviderConfigRequest
	2,  // 11: policy.keymanagement.KeyManagementService.GetProviderConfig:input_type -> policy.keymanagement.GetProviderConfigRequest
	4,  // 12: policy.keymanagement.KeyManagementService.ListProviderConfigs:input_type -> policy.keymanagement.ListProviderConfigsRequest
	6,  // 13: policy.keymanagement.KeyManagementService.UpdateProviderConfig:input_type -> policy.keymanagement.UpdateProviderConfigRequest
	8,  // 14: policy.keymanagement.KeyManagementService.DeleteProviderConfig:input_type -> policy.keymanagement.DeleteProviderConfigRequest
	1,  // 15: policy.keymanagement.KeyManagementService.CreateProviderConfig:output_type -> policy.keymanagement.CreateProviderConfigResponse
	3,  // 16: policy.keymanagement.KeyManagementService.GetProviderConfig:output_type -> policy.keymanagement.GetProviderConfigResponse
	5,  // 17: policy.keymanagement.KeyManagementService.ListProviderConfigs:output_type -> policy.keymanagement.ListProviderConfigsResponse
	7,  // 18: policy.keymanagement.KeyManagementService.UpdateProviderConfig:output_type -> policy.keymanagement.UpdateProviderConfigResponse
	9,  // 19: policy.keymanagement.KeyManagementService.DeleteProviderConfig:output_type -> policy.keymanagement.DeleteProviderConfigResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_policy_keymanagement_key_management_proto_init() }
func file_policy_keymanagement_key_management_proto_init() {
	if File_policy_keymanagement_key_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_keymanagement_key_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProviderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProviderConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProviderConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProviderConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProviderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProviderConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProviderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_keymanagement_key_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProviderConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_policy_keymanagement_key_management_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetProviderConfigRequest_Id)(nil),
		(*GetProviderConfigRequest_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_keymanagement_key_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_keymanagement_key_management_proto_goTypes,
		DependencyIndexes: file_policy_keymanagement_key_management_proto_depIdxs,
		MessageInfos:      file_policy_keymanagement_key_management_proto_msgTypes,
	}.Build()
	File_policy_keymanagement_key_management_proto = out.File
	file_policy_keymanagement_key_management_proto_rawDesc = nil
	file_policy_keymanagement_key_management_proto_goTypes = nil
	file_policy_keymanagement_key_management_proto_depIdxs = nil
}
