// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy/keymanagement/key_management.proto

package keymanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyManagementService_CreateProviderConfig_FullMethodName = "/policy.keymanagement.KeyManagementService/CreateProviderConfig"
	KeyManagementService_GetProviderConfig_FullMethodName    = "/policy.keymanagement.KeyManagementService/GetProviderConfig"
	KeyManagementService_ListProviderConfigs_FullMethodName  = "/policy.keymanagement.KeyManagementService/ListProviderConfigs"
	KeyManagementService_UpdateProviderConfig_FullMethodName = "/policy.keymanagement.KeyManagementService/UpdateProviderConfig"
	KeyManagementService_DeleteProviderConfig_FullMethodName = "/policy.keymanagement.KeyManagementService/DeleteProviderConfig"
)

// KeyManagementServiceClient is the client API for KeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyManagementServiceClient interface {
	// Key Management
	// Provider Management
	CreateProviderConfig(ctx context.Context, in *CreateProviderConfigRequest, opts ...grpc.CallOption) (*CreateProviderConfigResponse, error)
	GetProviderConfig(ctx context.Context, in *GetProviderConfigRequest, opts ...grpc.CallOption) (*GetProviderConfigResponse, error)
	ListProviderConfigs(ctx context.Context, in *ListProviderConfigsRequest, opts ...grpc.CallOption) (*ListProviderConfigsResponse, error)
	UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*UpdateProviderConfigResponse, error)
	DeleteProviderConfig(ctx context.Context, in *DeleteProviderConfigRequest, opts ...grpc.CallOption) (*DeleteProviderConfigResponse, error)
}

type keyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyManagementServiceClient(cc grpc.ClientConnInterface) KeyManagementServiceClient {
	return &keyManagementServiceClient{cc}
}

func (c *keyManagementServiceClient) CreateProviderConfig(ctx context.Context, in *CreateProviderConfigRequest, opts ...grpc.CallOption) (*CreateProviderConfigResponse, error) {
	out := new(CreateProviderConfigResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_CreateProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GetProviderConfig(ctx context.Context, in *GetProviderConfigRequest, opts ...grpc.CallOption) (*GetProviderConfigResponse, error) {
	out := new(GetProviderConfigResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_GetProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) ListProviderConfigs(ctx context.Context, in *ListProviderConfigsRequest, opts ...grpc.CallOption) (*ListProviderConfigsResponse, error) {
	out := new(ListProviderConfigsResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_ListProviderConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) UpdateProviderConfig(ctx context.Context, in *UpdateProviderConfigRequest, opts ...grpc.CallOption) (*UpdateProviderConfigResponse, error) {
	out := new(UpdateProviderConfigResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_UpdateProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DeleteProviderConfig(ctx context.Context, in *DeleteProviderConfigRequest, opts ...grpc.CallOption) (*DeleteProviderConfigResponse, error) {
	out := new(DeleteProviderConfigResponse)
	err := c.cc.Invoke(ctx, KeyManagementService_DeleteProviderConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagementServiceServer is the server API for KeyManagementService service.
// All implementations must embed UnimplementedKeyManagementServiceServer
// for forward compatibility
type KeyManagementServiceServer interface {
	// Key Management
	// Provider Management
	CreateProviderConfig(context.Context, *CreateProviderConfigRequest) (*CreateProviderConfigResponse, error)
	GetProviderConfig(context.Context, *GetProviderConfigRequest) (*GetProviderConfigResponse, error)
	ListProviderConfigs(context.Context, *ListProviderConfigsRequest) (*ListProviderConfigsResponse, error)
	UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*UpdateProviderConfigResponse, error)
	DeleteProviderConfig(context.Context, *DeleteProviderConfigRequest) (*DeleteProviderConfigResponse, error)
	mustEmbedUnimplementedKeyManagementServiceServer()
}

// UnimplementedKeyManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyManagementServiceServer struct {
}

func (UnimplementedKeyManagementServiceServer) CreateProviderConfig(context.Context, *CreateProviderConfigRequest) (*CreateProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProviderConfig not implemented")
}
func (UnimplementedKeyManagementServiceServer) GetProviderConfig(context.Context, *GetProviderConfigRequest) (*GetProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderConfig not implemented")
}
func (UnimplementedKeyManagementServiceServer) ListProviderConfigs(context.Context, *ListProviderConfigsRequest) (*ListProviderConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviderConfigs not implemented")
}
func (UnimplementedKeyManagementServiceServer) UpdateProviderConfig(context.Context, *UpdateProviderConfigRequest) (*UpdateProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProviderConfig not implemented")
}
func (UnimplementedKeyManagementServiceServer) DeleteProviderConfig(context.Context, *DeleteProviderConfigRequest) (*DeleteProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProviderConfig not implemented")
}
func (UnimplementedKeyManagementServiceServer) mustEmbedUnimplementedKeyManagementServiceServer() {}

// UnsafeKeyManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyManagementServiceServer will
// result in compilation errors.
type UnsafeKeyManagementServiceServer interface {
	mustEmbedUnimplementedKeyManagementServiceServer()
}

func RegisterKeyManagementServiceServer(s grpc.ServiceRegistrar, srv KeyManagementServiceServer) {
	s.RegisterService(&KeyManagementService_ServiceDesc, srv)
}

func _KeyManagementService_CreateProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).CreateProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_CreateProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).CreateProviderConfig(ctx, req.(*CreateProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GetProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GetProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_GetProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GetProviderConfig(ctx, req.(*GetProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_ListProviderConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProviderConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).ListProviderConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_ListProviderConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).ListProviderConfigs(ctx, req.(*ListProviderConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_UpdateProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).UpdateProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_UpdateProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).UpdateProviderConfig(ctx, req.(*UpdateProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DeleteProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DeleteProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyManagementService_DeleteProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DeleteProviderConfig(ctx, req.(*DeleteProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyManagementService_ServiceDesc is the grpc.ServiceDesc for KeyManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.keymanagement.KeyManagementService",
	HandlerType: (*KeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProviderConfig",
			Handler:    _KeyManagementService_CreateProviderConfig_Handler,
		},
		{
			MethodName: "GetProviderConfig",
			Handler:    _KeyManagementService_GetProviderConfig_Handler,
		},
		{
			MethodName: "ListProviderConfigs",
			Handler:    _KeyManagementService_ListProviderConfigs_Handler,
		},
		{
			MethodName: "UpdateProviderConfig",
			Handler:    _KeyManagementService_UpdateProviderConfig_Handler,
		},
		{
			MethodName: "DeleteProviderConfig",
			Handler:    _KeyManagementService_DeleteProviderConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/keymanagement/key_management.proto",
}
