// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/keymanagement/key_management.proto

package keymanagementconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	keymanagement "github.com/opentdf/platform/protocol/go/policy/keymanagement"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KeyManagementServiceName is the fully-qualified name of the KeyManagementService service.
	KeyManagementServiceName = "policy.keymanagement.KeyManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeyManagementServiceCreateProviderConfigProcedure is the fully-qualified name of the
	// KeyManagementService's CreateProviderConfig RPC.
	KeyManagementServiceCreateProviderConfigProcedure = "/policy.keymanagement.KeyManagementService/CreateProviderConfig"
	// KeyManagementServiceGetProviderConfigProcedure is the fully-qualified name of the
	// KeyManagementService's GetProviderConfig RPC.
	KeyManagementServiceGetProviderConfigProcedure = "/policy.keymanagement.KeyManagementService/GetProviderConfig"
	// KeyManagementServiceListProviderConfigsProcedure is the fully-qualified name of the
	// KeyManagementService's ListProviderConfigs RPC.
	KeyManagementServiceListProviderConfigsProcedure = "/policy.keymanagement.KeyManagementService/ListProviderConfigs"
	// KeyManagementServiceUpdateProviderConfigProcedure is the fully-qualified name of the
	// KeyManagementService's UpdateProviderConfig RPC.
	KeyManagementServiceUpdateProviderConfigProcedure = "/policy.keymanagement.KeyManagementService/UpdateProviderConfig"
	// KeyManagementServiceDeleteProviderConfigProcedure is the fully-qualified name of the
	// KeyManagementService's DeleteProviderConfig RPC.
	KeyManagementServiceDeleteProviderConfigProcedure = "/policy.keymanagement.KeyManagementService/DeleteProviderConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	keyManagementServiceServiceDescriptor                    = keymanagement.File_policy_keymanagement_key_management_proto.Services().ByName("KeyManagementService")
	keyManagementServiceCreateProviderConfigMethodDescriptor = keyManagementServiceServiceDescriptor.Methods().ByName("CreateProviderConfig")
	keyManagementServiceGetProviderConfigMethodDescriptor    = keyManagementServiceServiceDescriptor.Methods().ByName("GetProviderConfig")
	keyManagementServiceListProviderConfigsMethodDescriptor  = keyManagementServiceServiceDescriptor.Methods().ByName("ListProviderConfigs")
	keyManagementServiceUpdateProviderConfigMethodDescriptor = keyManagementServiceServiceDescriptor.Methods().ByName("UpdateProviderConfig")
	keyManagementServiceDeleteProviderConfigMethodDescriptor = keyManagementServiceServiceDescriptor.Methods().ByName("DeleteProviderConfig")
)

// KeyManagementServiceClient is a client for the policy.keymanagement.KeyManagementService service.
type KeyManagementServiceClient interface {
	// Key Management
	// Provider Management
	CreateProviderConfig(context.Context, *connect.Request[keymanagement.CreateProviderConfigRequest]) (*connect.Response[keymanagement.CreateProviderConfigResponse], error)
	GetProviderConfig(context.Context, *connect.Request[keymanagement.GetProviderConfigRequest]) (*connect.Response[keymanagement.GetProviderConfigResponse], error)
	ListProviderConfigs(context.Context, *connect.Request[keymanagement.ListProviderConfigsRequest]) (*connect.Response[keymanagement.ListProviderConfigsResponse], error)
	UpdateProviderConfig(context.Context, *connect.Request[keymanagement.UpdateProviderConfigRequest]) (*connect.Response[keymanagement.UpdateProviderConfigResponse], error)
	DeleteProviderConfig(context.Context, *connect.Request[keymanagement.DeleteProviderConfigRequest]) (*connect.Response[keymanagement.DeleteProviderConfigResponse], error)
}

// NewKeyManagementServiceClient constructs a client for the
// policy.keymanagement.KeyManagementService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeyManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KeyManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keyManagementServiceClient{
		createProviderConfig: connect.NewClient[keymanagement.CreateProviderConfigRequest, keymanagement.CreateProviderConfigResponse](
			httpClient,
			baseURL+KeyManagementServiceCreateProviderConfigProcedure,
			connect.WithSchema(keyManagementServiceCreateProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProviderConfig: connect.NewClient[keymanagement.GetProviderConfigRequest, keymanagement.GetProviderConfigResponse](
			httpClient,
			baseURL+KeyManagementServiceGetProviderConfigProcedure,
			connect.WithSchema(keyManagementServiceGetProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProviderConfigs: connect.NewClient[keymanagement.ListProviderConfigsRequest, keymanagement.ListProviderConfigsResponse](
			httpClient,
			baseURL+KeyManagementServiceListProviderConfigsProcedure,
			connect.WithSchema(keyManagementServiceListProviderConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProviderConfig: connect.NewClient[keymanagement.UpdateProviderConfigRequest, keymanagement.UpdateProviderConfigResponse](
			httpClient,
			baseURL+KeyManagementServiceUpdateProviderConfigProcedure,
			connect.WithSchema(keyManagementServiceUpdateProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProviderConfig: connect.NewClient[keymanagement.DeleteProviderConfigRequest, keymanagement.DeleteProviderConfigResponse](
			httpClient,
			baseURL+KeyManagementServiceDeleteProviderConfigProcedure,
			connect.WithSchema(keyManagementServiceDeleteProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// keyManagementServiceClient implements KeyManagementServiceClient.
type keyManagementServiceClient struct {
	createProviderConfig *connect.Client[keymanagement.CreateProviderConfigRequest, keymanagement.CreateProviderConfigResponse]
	getProviderConfig    *connect.Client[keymanagement.GetProviderConfigRequest, keymanagement.GetProviderConfigResponse]
	listProviderConfigs  *connect.Client[keymanagement.ListProviderConfigsRequest, keymanagement.ListProviderConfigsResponse]
	updateProviderConfig *connect.Client[keymanagement.UpdateProviderConfigRequest, keymanagement.UpdateProviderConfigResponse]
	deleteProviderConfig *connect.Client[keymanagement.DeleteProviderConfigRequest, keymanagement.DeleteProviderConfigResponse]
}

// CreateProviderConfig calls policy.keymanagement.KeyManagementService.CreateProviderConfig.
func (c *keyManagementServiceClient) CreateProviderConfig(ctx context.Context, req *connect.Request[keymanagement.CreateProviderConfigRequest]) (*connect.Response[keymanagement.CreateProviderConfigResponse], error) {
	return c.createProviderConfig.CallUnary(ctx, req)
}

// GetProviderConfig calls policy.keymanagement.KeyManagementService.GetProviderConfig.
func (c *keyManagementServiceClient) GetProviderConfig(ctx context.Context, req *connect.Request[keymanagement.GetProviderConfigRequest]) (*connect.Response[keymanagement.GetProviderConfigResponse], error) {
	return c.getProviderConfig.CallUnary(ctx, req)
}

// ListProviderConfigs calls policy.keymanagement.KeyManagementService.ListProviderConfigs.
func (c *keyManagementServiceClient) ListProviderConfigs(ctx context.Context, req *connect.Request[keymanagement.ListProviderConfigsRequest]) (*connect.Response[keymanagement.ListProviderConfigsResponse], error) {
	return c.listProviderConfigs.CallUnary(ctx, req)
}

// UpdateProviderConfig calls policy.keymanagement.KeyManagementService.UpdateProviderConfig.
func (c *keyManagementServiceClient) UpdateProviderConfig(ctx context.Context, req *connect.Request[keymanagement.UpdateProviderConfigRequest]) (*connect.Response[keymanagement.UpdateProviderConfigResponse], error) {
	return c.updateProviderConfig.CallUnary(ctx, req)
}

// DeleteProviderConfig calls policy.keymanagement.KeyManagementService.DeleteProviderConfig.
func (c *keyManagementServiceClient) DeleteProviderConfig(ctx context.Context, req *connect.Request[keymanagement.DeleteProviderConfigRequest]) (*connect.Response[keymanagement.DeleteProviderConfigResponse], error) {
	return c.deleteProviderConfig.CallUnary(ctx, req)
}

// KeyManagementServiceHandler is an implementation of the policy.keymanagement.KeyManagementService
// service.
type KeyManagementServiceHandler interface {
	// Key Management
	// Provider Management
	CreateProviderConfig(context.Context, *connect.Request[keymanagement.CreateProviderConfigRequest]) (*connect.Response[keymanagement.CreateProviderConfigResponse], error)
	GetProviderConfig(context.Context, *connect.Request[keymanagement.GetProviderConfigRequest]) (*connect.Response[keymanagement.GetProviderConfigResponse], error)
	ListProviderConfigs(context.Context, *connect.Request[keymanagement.ListProviderConfigsRequest]) (*connect.Response[keymanagement.ListProviderConfigsResponse], error)
	UpdateProviderConfig(context.Context, *connect.Request[keymanagement.UpdateProviderConfigRequest]) (*connect.Response[keymanagement.UpdateProviderConfigResponse], error)
	DeleteProviderConfig(context.Context, *connect.Request[keymanagement.DeleteProviderConfigRequest]) (*connect.Response[keymanagement.DeleteProviderConfigResponse], error)
}

// NewKeyManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeyManagementServiceHandler(svc KeyManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	keyManagementServiceCreateProviderConfigHandler := connect.NewUnaryHandler(
		KeyManagementServiceCreateProviderConfigProcedure,
		svc.CreateProviderConfig,
		connect.WithSchema(keyManagementServiceCreateProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyManagementServiceGetProviderConfigHandler := connect.NewUnaryHandler(
		KeyManagementServiceGetProviderConfigProcedure,
		svc.GetProviderConfig,
		connect.WithSchema(keyManagementServiceGetProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyManagementServiceListProviderConfigsHandler := connect.NewUnaryHandler(
		KeyManagementServiceListProviderConfigsProcedure,
		svc.ListProviderConfigs,
		connect.WithSchema(keyManagementServiceListProviderConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyManagementServiceUpdateProviderConfigHandler := connect.NewUnaryHandler(
		KeyManagementServiceUpdateProviderConfigProcedure,
		svc.UpdateProviderConfig,
		connect.WithSchema(keyManagementServiceUpdateProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keyManagementServiceDeleteProviderConfigHandler := connect.NewUnaryHandler(
		KeyManagementServiceDeleteProviderConfigProcedure,
		svc.DeleteProviderConfig,
		connect.WithSchema(keyManagementServiceDeleteProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.keymanagement.KeyManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeyManagementServiceCreateProviderConfigProcedure:
			keyManagementServiceCreateProviderConfigHandler.ServeHTTP(w, r)
		case KeyManagementServiceGetProviderConfigProcedure:
			keyManagementServiceGetProviderConfigHandler.ServeHTTP(w, r)
		case KeyManagementServiceListProviderConfigsProcedure:
			keyManagementServiceListProviderConfigsHandler.ServeHTTP(w, r)
		case KeyManagementServiceUpdateProviderConfigProcedure:
			keyManagementServiceUpdateProviderConfigHandler.ServeHTTP(w, r)
		case KeyManagementServiceDeleteProviderConfigProcedure:
			keyManagementServiceDeleteProviderConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeyManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeyManagementServiceHandler struct{}

func (UnimplementedKeyManagementServiceHandler) CreateProviderConfig(context.Context, *connect.Request[keymanagement.CreateProviderConfigRequest]) (*connect.Response[keymanagement.CreateProviderConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.keymanagement.KeyManagementService.CreateProviderConfig is not implemented"))
}

func (UnimplementedKeyManagementServiceHandler) GetProviderConfig(context.Context, *connect.Request[keymanagement.GetProviderConfigRequest]) (*connect.Response[keymanagement.GetProviderConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.keymanagement.KeyManagementService.GetProviderConfig is not implemented"))
}

func (UnimplementedKeyManagementServiceHandler) ListProviderConfigs(context.Context, *connect.Request[keymanagement.ListProviderConfigsRequest]) (*connect.Response[keymanagement.ListProviderConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.keymanagement.KeyManagementService.ListProviderConfigs is not implemented"))
}

func (UnimplementedKeyManagementServiceHandler) UpdateProviderConfig(context.Context, *connect.Request[keymanagement.UpdateProviderConfigRequest]) (*connect.Response[keymanagement.UpdateProviderConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.keymanagement.KeyManagementService.UpdateProviderConfig is not implemented"))
}

func (UnimplementedKeyManagementServiceHandler) DeleteProviderConfig(context.Context, *connect.Request[keymanagement.DeleteProviderConfigRequest]) (*connect.Response[keymanagement.DeleteProviderConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.keymanagement.KeyManagementService.DeleteProviderConfig is not implemented"))
}
