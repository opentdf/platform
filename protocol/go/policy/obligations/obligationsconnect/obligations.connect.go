// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/obligations/obligations.proto

package obligationsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	obligations "github.com/opentdf/platform/protocol/go/policy/obligations"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ObligationsServiceName is the fully-qualified name of the ObligationsService service.
	ObligationsServiceName = "policy.obligations.ObligationsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ObligationsServiceListObligationsProcedure is the fully-qualified name of the
	// ObligationsService's ListObligations RPC.
	ObligationsServiceListObligationsProcedure = "/policy.obligations.ObligationsService/ListObligations"
	// ObligationsServiceGetObligationProcedure is the fully-qualified name of the ObligationsService's
	// GetObligation RPC.
	ObligationsServiceGetObligationProcedure = "/policy.obligations.ObligationsService/GetObligation"
	// ObligationsServiceCreateObligationProcedure is the fully-qualified name of the
	// ObligationsService's CreateObligation RPC.
	ObligationsServiceCreateObligationProcedure = "/policy.obligations.ObligationsService/CreateObligation"
	// ObligationsServiceUpdateObligationProcedure is the fully-qualified name of the
	// ObligationsService's UpdateObligation RPC.
	ObligationsServiceUpdateObligationProcedure = "/policy.obligations.ObligationsService/UpdateObligation"
	// ObligationsServiceDeleteObligationProcedure is the fully-qualified name of the
	// ObligationsService's DeleteObligation RPC.
	ObligationsServiceDeleteObligationProcedure = "/policy.obligations.ObligationsService/DeleteObligation"
	// ObligationsServiceListObligationValuesProcedure is the fully-qualified name of the
	// ObligationsService's ListObligationValues RPC.
	ObligationsServiceListObligationValuesProcedure = "/policy.obligations.ObligationsService/ListObligationValues"
	// ObligationsServiceGetObligationValueProcedure is the fully-qualified name of the
	// ObligationsService's GetObligationValue RPC.
	ObligationsServiceGetObligationValueProcedure = "/policy.obligations.ObligationsService/GetObligationValue"
	// ObligationsServiceCreateObligationValueProcedure is the fully-qualified name of the
	// ObligationsService's CreateObligationValue RPC.
	ObligationsServiceCreateObligationValueProcedure = "/policy.obligations.ObligationsService/CreateObligationValue"
	// ObligationsServiceUpdateObligationValueProcedure is the fully-qualified name of the
	// ObligationsService's UpdateObligationValue RPC.
	ObligationsServiceUpdateObligationValueProcedure = "/policy.obligations.ObligationsService/UpdateObligationValue"
	// ObligationsServiceDeleteObligationValueProcedure is the fully-qualified name of the
	// ObligationsService's DeleteObligationValue RPC.
	ObligationsServiceDeleteObligationValueProcedure = "/policy.obligations.ObligationsService/DeleteObligationValue"
	// ObligationsServiceAddObligationTriggerProcedure is the fully-qualified name of the
	// ObligationsService's AddObligationTrigger RPC.
	ObligationsServiceAddObligationTriggerProcedure = "/policy.obligations.ObligationsService/AddObligationTrigger"
	// ObligationsServiceRemoveObligationTriggerProcedure is the fully-qualified name of the
	// ObligationsService's RemoveObligationTrigger RPC.
	ObligationsServiceRemoveObligationTriggerProcedure = "/policy.obligations.ObligationsService/RemoveObligationTrigger"
	// ObligationsServiceAddObligationFulfillerProcedure is the fully-qualified name of the
	// ObligationsService's AddObligationFulfiller RPC.
	ObligationsServiceAddObligationFulfillerProcedure = "/policy.obligations.ObligationsService/AddObligationFulfiller"
	// ObligationsServiceRemoveObligationFulfillerProcedure is the fully-qualified name of the
	// ObligationsService's RemoveObligationFulfiller RPC.
	ObligationsServiceRemoveObligationFulfillerProcedure = "/policy.obligations.ObligationsService/RemoveObligationFulfiller"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	obligationsServiceServiceDescriptor                         = obligations.File_policy_obligations_obligations_proto.Services().ByName("ObligationsService")
	obligationsServiceListObligationsMethodDescriptor           = obligationsServiceServiceDescriptor.Methods().ByName("ListObligations")
	obligationsServiceGetObligationMethodDescriptor             = obligationsServiceServiceDescriptor.Methods().ByName("GetObligation")
	obligationsServiceCreateObligationMethodDescriptor          = obligationsServiceServiceDescriptor.Methods().ByName("CreateObligation")
	obligationsServiceUpdateObligationMethodDescriptor          = obligationsServiceServiceDescriptor.Methods().ByName("UpdateObligation")
	obligationsServiceDeleteObligationMethodDescriptor          = obligationsServiceServiceDescriptor.Methods().ByName("DeleteObligation")
	obligationsServiceListObligationValuesMethodDescriptor      = obligationsServiceServiceDescriptor.Methods().ByName("ListObligationValues")
	obligationsServiceGetObligationValueMethodDescriptor        = obligationsServiceServiceDescriptor.Methods().ByName("GetObligationValue")
	obligationsServiceCreateObligationValueMethodDescriptor     = obligationsServiceServiceDescriptor.Methods().ByName("CreateObligationValue")
	obligationsServiceUpdateObligationValueMethodDescriptor     = obligationsServiceServiceDescriptor.Methods().ByName("UpdateObligationValue")
	obligationsServiceDeleteObligationValueMethodDescriptor     = obligationsServiceServiceDescriptor.Methods().ByName("DeleteObligationValue")
	obligationsServiceAddObligationTriggerMethodDescriptor      = obligationsServiceServiceDescriptor.Methods().ByName("AddObligationTrigger")
	obligationsServiceRemoveObligationTriggerMethodDescriptor   = obligationsServiceServiceDescriptor.Methods().ByName("RemoveObligationTrigger")
	obligationsServiceAddObligationFulfillerMethodDescriptor    = obligationsServiceServiceDescriptor.Methods().ByName("AddObligationFulfiller")
	obligationsServiceRemoveObligationFulfillerMethodDescriptor = obligationsServiceServiceDescriptor.Methods().ByName("RemoveObligationFulfiller")
)

// ObligationsServiceClient is a client for the policy.obligations.ObligationsService service.
type ObligationsServiceClient interface {
	ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error)
	GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error)
	CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error)
	UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error)
	DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error)
	ListObligationValues(context.Context, *connect.Request[obligations.ListObligationValuesRequest]) (*connect.Response[obligations.ListObligationValuesResponse], error)
	GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error)
	CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error)
	UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error)
	DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error)
	AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error)
	RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error)
	AddObligationFulfiller(context.Context, *connect.Request[obligations.AddObligationFulfillerRequest]) (*connect.Response[obligations.AddObligationFulfillerResponse], error)
	RemoveObligationFulfiller(context.Context, *connect.Request[obligations.RemoveObligationFulfillerRequest]) (*connect.Response[obligations.RemoveObligationFulfillerResponse], error)
}

// NewObligationsServiceClient constructs a client for the policy.obligations.ObligationsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewObligationsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ObligationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &obligationsServiceClient{
		listObligations: connect.NewClient[obligations.ListObligationsRequest, obligations.ListObligationsResponse](
			httpClient,
			baseURL+ObligationsServiceListObligationsProcedure,
			connect.WithSchema(obligationsServiceListObligationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getObligation: connect.NewClient[obligations.GetObligationRequest, obligations.GetObligationResponse](
			httpClient,
			baseURL+ObligationsServiceGetObligationProcedure,
			connect.WithSchema(obligationsServiceGetObligationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createObligation: connect.NewClient[obligations.CreateObligationRequest, obligations.CreateObligationResponse](
			httpClient,
			baseURL+ObligationsServiceCreateObligationProcedure,
			connect.WithSchema(obligationsServiceCreateObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateObligation: connect.NewClient[obligations.UpdateObligationRequest, obligations.UpdateObligationResponse](
			httpClient,
			baseURL+ObligationsServiceUpdateObligationProcedure,
			connect.WithSchema(obligationsServiceUpdateObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObligation: connect.NewClient[obligations.DeleteObligationRequest, obligations.DeleteObligationResponse](
			httpClient,
			baseURL+ObligationsServiceDeleteObligationProcedure,
			connect.WithSchema(obligationsServiceDeleteObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listObligationValues: connect.NewClient[obligations.ListObligationValuesRequest, obligations.ListObligationValuesResponse](
			httpClient,
			baseURL+ObligationsServiceListObligationValuesProcedure,
			connect.WithSchema(obligationsServiceListObligationValuesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getObligationValue: connect.NewClient[obligations.GetObligationValueRequest, obligations.GetObligationValueResponse](
			httpClient,
			baseURL+ObligationsServiceGetObligationValueProcedure,
			connect.WithSchema(obligationsServiceGetObligationValueMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createObligationValue: connect.NewClient[obligations.CreateObligationValueRequest, obligations.CreateObligationValueResponse](
			httpClient,
			baseURL+ObligationsServiceCreateObligationValueProcedure,
			connect.WithSchema(obligationsServiceCreateObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateObligationValue: connect.NewClient[obligations.UpdateObligationValueRequest, obligations.UpdateObligationValueResponse](
			httpClient,
			baseURL+ObligationsServiceUpdateObligationValueProcedure,
			connect.WithSchema(obligationsServiceUpdateObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObligationValue: connect.NewClient[obligations.DeleteObligationValueRequest, obligations.DeleteObligationValueResponse](
			httpClient,
			baseURL+ObligationsServiceDeleteObligationValueProcedure,
			connect.WithSchema(obligationsServiceDeleteObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addObligationTrigger: connect.NewClient[obligations.AddObligationTriggerRequest, obligations.AddObligationTriggerResponse](
			httpClient,
			baseURL+ObligationsServiceAddObligationTriggerProcedure,
			connect.WithSchema(obligationsServiceAddObligationTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeObligationTrigger: connect.NewClient[obligations.RemoveObligationTriggerRequest, obligations.RemoveObligationTriggerResponse](
			httpClient,
			baseURL+ObligationsServiceRemoveObligationTriggerProcedure,
			connect.WithSchema(obligationsServiceRemoveObligationTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addObligationFulfiller: connect.NewClient[obligations.AddObligationFulfillerRequest, obligations.AddObligationFulfillerResponse](
			httpClient,
			baseURL+ObligationsServiceAddObligationFulfillerProcedure,
			connect.WithSchema(obligationsServiceAddObligationFulfillerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeObligationFulfiller: connect.NewClient[obligations.RemoveObligationFulfillerRequest, obligations.RemoveObligationFulfillerResponse](
			httpClient,
			baseURL+ObligationsServiceRemoveObligationFulfillerProcedure,
			connect.WithSchema(obligationsServiceRemoveObligationFulfillerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// obligationsServiceClient implements ObligationsServiceClient.
type obligationsServiceClient struct {
	listObligations           *connect.Client[obligations.ListObligationsRequest, obligations.ListObligationsResponse]
	getObligation             *connect.Client[obligations.GetObligationRequest, obligations.GetObligationResponse]
	createObligation          *connect.Client[obligations.CreateObligationRequest, obligations.CreateObligationResponse]
	updateObligation          *connect.Client[obligations.UpdateObligationRequest, obligations.UpdateObligationResponse]
	deleteObligation          *connect.Client[obligations.DeleteObligationRequest, obligations.DeleteObligationResponse]
	listObligationValues      *connect.Client[obligations.ListObligationValuesRequest, obligations.ListObligationValuesResponse]
	getObligationValue        *connect.Client[obligations.GetObligationValueRequest, obligations.GetObligationValueResponse]
	createObligationValue     *connect.Client[obligations.CreateObligationValueRequest, obligations.CreateObligationValueResponse]
	updateObligationValue     *connect.Client[obligations.UpdateObligationValueRequest, obligations.UpdateObligationValueResponse]
	deleteObligationValue     *connect.Client[obligations.DeleteObligationValueRequest, obligations.DeleteObligationValueResponse]
	addObligationTrigger      *connect.Client[obligations.AddObligationTriggerRequest, obligations.AddObligationTriggerResponse]
	removeObligationTrigger   *connect.Client[obligations.RemoveObligationTriggerRequest, obligations.RemoveObligationTriggerResponse]
	addObligationFulfiller    *connect.Client[obligations.AddObligationFulfillerRequest, obligations.AddObligationFulfillerResponse]
	removeObligationFulfiller *connect.Client[obligations.RemoveObligationFulfillerRequest, obligations.RemoveObligationFulfillerResponse]
}

// ListObligations calls policy.obligations.ObligationsService.ListObligations.
func (c *obligationsServiceClient) ListObligations(ctx context.Context, req *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error) {
	return c.listObligations.CallUnary(ctx, req)
}

// GetObligation calls policy.obligations.ObligationsService.GetObligation.
func (c *obligationsServiceClient) GetObligation(ctx context.Context, req *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error) {
	return c.getObligation.CallUnary(ctx, req)
}

// CreateObligation calls policy.obligations.ObligationsService.CreateObligation.
func (c *obligationsServiceClient) CreateObligation(ctx context.Context, req *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error) {
	return c.createObligation.CallUnary(ctx, req)
}

// UpdateObligation calls policy.obligations.ObligationsService.UpdateObligation.
func (c *obligationsServiceClient) UpdateObligation(ctx context.Context, req *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error) {
	return c.updateObligation.CallUnary(ctx, req)
}

// DeleteObligation calls policy.obligations.ObligationsService.DeleteObligation.
func (c *obligationsServiceClient) DeleteObligation(ctx context.Context, req *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error) {
	return c.deleteObligation.CallUnary(ctx, req)
}

// ListObligationValues calls policy.obligations.ObligationsService.ListObligationValues.
func (c *obligationsServiceClient) ListObligationValues(ctx context.Context, req *connect.Request[obligations.ListObligationValuesRequest]) (*connect.Response[obligations.ListObligationValuesResponse], error) {
	return c.listObligationValues.CallUnary(ctx, req)
}

// GetObligationValue calls policy.obligations.ObligationsService.GetObligationValue.
func (c *obligationsServiceClient) GetObligationValue(ctx context.Context, req *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error) {
	return c.getObligationValue.CallUnary(ctx, req)
}

// CreateObligationValue calls policy.obligations.ObligationsService.CreateObligationValue.
func (c *obligationsServiceClient) CreateObligationValue(ctx context.Context, req *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error) {
	return c.createObligationValue.CallUnary(ctx, req)
}

// UpdateObligationValue calls policy.obligations.ObligationsService.UpdateObligationValue.
func (c *obligationsServiceClient) UpdateObligationValue(ctx context.Context, req *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error) {
	return c.updateObligationValue.CallUnary(ctx, req)
}

// DeleteObligationValue calls policy.obligations.ObligationsService.DeleteObligationValue.
func (c *obligationsServiceClient) DeleteObligationValue(ctx context.Context, req *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error) {
	return c.deleteObligationValue.CallUnary(ctx, req)
}

// AddObligationTrigger calls policy.obligations.ObligationsService.AddObligationTrigger.
func (c *obligationsServiceClient) AddObligationTrigger(ctx context.Context, req *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error) {
	return c.addObligationTrigger.CallUnary(ctx, req)
}

// RemoveObligationTrigger calls policy.obligations.ObligationsService.RemoveObligationTrigger.
func (c *obligationsServiceClient) RemoveObligationTrigger(ctx context.Context, req *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error) {
	return c.removeObligationTrigger.CallUnary(ctx, req)
}

// AddObligationFulfiller calls policy.obligations.ObligationsService.AddObligationFulfiller.
func (c *obligationsServiceClient) AddObligationFulfiller(ctx context.Context, req *connect.Request[obligations.AddObligationFulfillerRequest]) (*connect.Response[obligations.AddObligationFulfillerResponse], error) {
	return c.addObligationFulfiller.CallUnary(ctx, req)
}

// RemoveObligationFulfiller calls policy.obligations.ObligationsService.RemoveObligationFulfiller.
func (c *obligationsServiceClient) RemoveObligationFulfiller(ctx context.Context, req *connect.Request[obligations.RemoveObligationFulfillerRequest]) (*connect.Response[obligations.RemoveObligationFulfillerResponse], error) {
	return c.removeObligationFulfiller.CallUnary(ctx, req)
}

// ObligationsServiceHandler is an implementation of the policy.obligations.ObligationsService
// service.
type ObligationsServiceHandler interface {
	ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error)
	GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error)
	CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error)
	UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error)
	DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error)
	ListObligationValues(context.Context, *connect.Request[obligations.ListObligationValuesRequest]) (*connect.Response[obligations.ListObligationValuesResponse], error)
	GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error)
	CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error)
	UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error)
	DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error)
	AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error)
	RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error)
	AddObligationFulfiller(context.Context, *connect.Request[obligations.AddObligationFulfillerRequest]) (*connect.Response[obligations.AddObligationFulfillerResponse], error)
	RemoveObligationFulfiller(context.Context, *connect.Request[obligations.RemoveObligationFulfillerRequest]) (*connect.Response[obligations.RemoveObligationFulfillerResponse], error)
}

// NewObligationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewObligationsServiceHandler(svc ObligationsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	obligationsServiceListObligationsHandler := connect.NewUnaryHandler(
		ObligationsServiceListObligationsProcedure,
		svc.ListObligations,
		connect.WithSchema(obligationsServiceListObligationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceGetObligationHandler := connect.NewUnaryHandler(
		ObligationsServiceGetObligationProcedure,
		svc.GetObligation,
		connect.WithSchema(obligationsServiceGetObligationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceCreateObligationHandler := connect.NewUnaryHandler(
		ObligationsServiceCreateObligationProcedure,
		svc.CreateObligation,
		connect.WithSchema(obligationsServiceCreateObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceUpdateObligationHandler := connect.NewUnaryHandler(
		ObligationsServiceUpdateObligationProcedure,
		svc.UpdateObligation,
		connect.WithSchema(obligationsServiceUpdateObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceDeleteObligationHandler := connect.NewUnaryHandler(
		ObligationsServiceDeleteObligationProcedure,
		svc.DeleteObligation,
		connect.WithSchema(obligationsServiceDeleteObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceListObligationValuesHandler := connect.NewUnaryHandler(
		ObligationsServiceListObligationValuesProcedure,
		svc.ListObligationValues,
		connect.WithSchema(obligationsServiceListObligationValuesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceGetObligationValueHandler := connect.NewUnaryHandler(
		ObligationsServiceGetObligationValueProcedure,
		svc.GetObligationValue,
		connect.WithSchema(obligationsServiceGetObligationValueMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceCreateObligationValueHandler := connect.NewUnaryHandler(
		ObligationsServiceCreateObligationValueProcedure,
		svc.CreateObligationValue,
		connect.WithSchema(obligationsServiceCreateObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceUpdateObligationValueHandler := connect.NewUnaryHandler(
		ObligationsServiceUpdateObligationValueProcedure,
		svc.UpdateObligationValue,
		connect.WithSchema(obligationsServiceUpdateObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceDeleteObligationValueHandler := connect.NewUnaryHandler(
		ObligationsServiceDeleteObligationValueProcedure,
		svc.DeleteObligationValue,
		connect.WithSchema(obligationsServiceDeleteObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceAddObligationTriggerHandler := connect.NewUnaryHandler(
		ObligationsServiceAddObligationTriggerProcedure,
		svc.AddObligationTrigger,
		connect.WithSchema(obligationsServiceAddObligationTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceRemoveObligationTriggerHandler := connect.NewUnaryHandler(
		ObligationsServiceRemoveObligationTriggerProcedure,
		svc.RemoveObligationTrigger,
		connect.WithSchema(obligationsServiceRemoveObligationTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceAddObligationFulfillerHandler := connect.NewUnaryHandler(
		ObligationsServiceAddObligationFulfillerProcedure,
		svc.AddObligationFulfiller,
		connect.WithSchema(obligationsServiceAddObligationFulfillerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	obligationsServiceRemoveObligationFulfillerHandler := connect.NewUnaryHandler(
		ObligationsServiceRemoveObligationFulfillerProcedure,
		svc.RemoveObligationFulfiller,
		connect.WithSchema(obligationsServiceRemoveObligationFulfillerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.obligations.ObligationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ObligationsServiceListObligationsProcedure:
			obligationsServiceListObligationsHandler.ServeHTTP(w, r)
		case ObligationsServiceGetObligationProcedure:
			obligationsServiceGetObligationHandler.ServeHTTP(w, r)
		case ObligationsServiceCreateObligationProcedure:
			obligationsServiceCreateObligationHandler.ServeHTTP(w, r)
		case ObligationsServiceUpdateObligationProcedure:
			obligationsServiceUpdateObligationHandler.ServeHTTP(w, r)
		case ObligationsServiceDeleteObligationProcedure:
			obligationsServiceDeleteObligationHandler.ServeHTTP(w, r)
		case ObligationsServiceListObligationValuesProcedure:
			obligationsServiceListObligationValuesHandler.ServeHTTP(w, r)
		case ObligationsServiceGetObligationValueProcedure:
			obligationsServiceGetObligationValueHandler.ServeHTTP(w, r)
		case ObligationsServiceCreateObligationValueProcedure:
			obligationsServiceCreateObligationValueHandler.ServeHTTP(w, r)
		case ObligationsServiceUpdateObligationValueProcedure:
			obligationsServiceUpdateObligationValueHandler.ServeHTTP(w, r)
		case ObligationsServiceDeleteObligationValueProcedure:
			obligationsServiceDeleteObligationValueHandler.ServeHTTP(w, r)
		case ObligationsServiceAddObligationTriggerProcedure:
			obligationsServiceAddObligationTriggerHandler.ServeHTTP(w, r)
		case ObligationsServiceRemoveObligationTriggerProcedure:
			obligationsServiceRemoveObligationTriggerHandler.ServeHTTP(w, r)
		case ObligationsServiceAddObligationFulfillerProcedure:
			obligationsServiceAddObligationFulfillerHandler.ServeHTTP(w, r)
		case ObligationsServiceRemoveObligationFulfillerProcedure:
			obligationsServiceRemoveObligationFulfillerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedObligationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedObligationsServiceHandler struct{}

func (UnimplementedObligationsServiceHandler) ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.ListObligations is not implemented"))
}

func (UnimplementedObligationsServiceHandler) GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.GetObligation is not implemented"))
}

func (UnimplementedObligationsServiceHandler) CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.CreateObligation is not implemented"))
}

func (UnimplementedObligationsServiceHandler) UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.UpdateObligation is not implemented"))
}

func (UnimplementedObligationsServiceHandler) DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.DeleteObligation is not implemented"))
}

func (UnimplementedObligationsServiceHandler) ListObligationValues(context.Context, *connect.Request[obligations.ListObligationValuesRequest]) (*connect.Response[obligations.ListObligationValuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.ListObligationValues is not implemented"))
}

func (UnimplementedObligationsServiceHandler) GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.GetObligationValue is not implemented"))
}

func (UnimplementedObligationsServiceHandler) CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.CreateObligationValue is not implemented"))
}

func (UnimplementedObligationsServiceHandler) UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.UpdateObligationValue is not implemented"))
}

func (UnimplementedObligationsServiceHandler) DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.DeleteObligationValue is not implemented"))
}

func (UnimplementedObligationsServiceHandler) AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.AddObligationTrigger is not implemented"))
}

func (UnimplementedObligationsServiceHandler) RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.RemoveObligationTrigger is not implemented"))
}

func (UnimplementedObligationsServiceHandler) AddObligationFulfiller(context.Context, *connect.Request[obligations.AddObligationFulfillerRequest]) (*connect.Response[obligations.AddObligationFulfillerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.AddObligationFulfiller is not implemented"))
}

func (UnimplementedObligationsServiceHandler) RemoveObligationFulfiller(context.Context, *connect.Request[obligations.RemoveObligationFulfillerRequest]) (*connect.Response[obligations.RemoveObligationFulfillerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.ObligationsService.RemoveObligationFulfiller is not implemented"))
}
