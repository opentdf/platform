// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/obligations/obligations.proto

package obligationsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	obligations "github.com/opentdf/platform/protocol/go/policy/obligations"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "policy.obligations.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceListObligationsProcedure is the fully-qualified name of the Service's ListObligations RPC.
	ServiceListObligationsProcedure = "/policy.obligations.Service/ListObligations"
	// ServiceGetObligationProcedure is the fully-qualified name of the Service's GetObligation RPC.
	ServiceGetObligationProcedure = "/policy.obligations.Service/GetObligation"
	// ServiceGetObligationsByFQNsProcedure is the fully-qualified name of the Service's
	// GetObligationsByFQNs RPC.
	ServiceGetObligationsByFQNsProcedure = "/policy.obligations.Service/GetObligationsByFQNs"
	// ServiceCreateObligationProcedure is the fully-qualified name of the Service's CreateObligation
	// RPC.
	ServiceCreateObligationProcedure = "/policy.obligations.Service/CreateObligation"
	// ServiceUpdateObligationProcedure is the fully-qualified name of the Service's UpdateObligation
	// RPC.
	ServiceUpdateObligationProcedure = "/policy.obligations.Service/UpdateObligation"
	// ServiceDeleteObligationProcedure is the fully-qualified name of the Service's DeleteObligation
	// RPC.
	ServiceDeleteObligationProcedure = "/policy.obligations.Service/DeleteObligation"
	// ServiceGetObligationValueProcedure is the fully-qualified name of the Service's
	// GetObligationValue RPC.
	ServiceGetObligationValueProcedure = "/policy.obligations.Service/GetObligationValue"
	// ServiceGetObligationValuesByFQNsProcedure is the fully-qualified name of the Service's
	// GetObligationValuesByFQNs RPC.
	ServiceGetObligationValuesByFQNsProcedure = "/policy.obligations.Service/GetObligationValuesByFQNs"
	// ServiceCreateObligationValueProcedure is the fully-qualified name of the Service's
	// CreateObligationValue RPC.
	ServiceCreateObligationValueProcedure = "/policy.obligations.Service/CreateObligationValue"
	// ServiceUpdateObligationValueProcedure is the fully-qualified name of the Service's
	// UpdateObligationValue RPC.
	ServiceUpdateObligationValueProcedure = "/policy.obligations.Service/UpdateObligationValue"
	// ServiceDeleteObligationValueProcedure is the fully-qualified name of the Service's
	// DeleteObligationValue RPC.
	ServiceDeleteObligationValueProcedure = "/policy.obligations.Service/DeleteObligationValue"
	// ServiceAddObligationTriggerProcedure is the fully-qualified name of the Service's
	// AddObligationTrigger RPC.
	ServiceAddObligationTriggerProcedure = "/policy.obligations.Service/AddObligationTrigger"
	// ServiceRemoveObligationTriggerProcedure is the fully-qualified name of the Service's
	// RemoveObligationTrigger RPC.
	ServiceRemoveObligationTriggerProcedure = "/policy.obligations.Service/RemoveObligationTrigger"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor                         = obligations.File_policy_obligations_obligations_proto.Services().ByName("Service")
	serviceListObligationsMethodDescriptor           = serviceServiceDescriptor.Methods().ByName("ListObligations")
	serviceGetObligationMethodDescriptor             = serviceServiceDescriptor.Methods().ByName("GetObligation")
	serviceGetObligationsByFQNsMethodDescriptor      = serviceServiceDescriptor.Methods().ByName("GetObligationsByFQNs")
	serviceCreateObligationMethodDescriptor          = serviceServiceDescriptor.Methods().ByName("CreateObligation")
	serviceUpdateObligationMethodDescriptor          = serviceServiceDescriptor.Methods().ByName("UpdateObligation")
	serviceDeleteObligationMethodDescriptor          = serviceServiceDescriptor.Methods().ByName("DeleteObligation")
	serviceGetObligationValueMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("GetObligationValue")
	serviceGetObligationValuesByFQNsMethodDescriptor = serviceServiceDescriptor.Methods().ByName("GetObligationValuesByFQNs")
	serviceCreateObligationValueMethodDescriptor     = serviceServiceDescriptor.Methods().ByName("CreateObligationValue")
	serviceUpdateObligationValueMethodDescriptor     = serviceServiceDescriptor.Methods().ByName("UpdateObligationValue")
	serviceDeleteObligationValueMethodDescriptor     = serviceServiceDescriptor.Methods().ByName("DeleteObligationValue")
	serviceAddObligationTriggerMethodDescriptor      = serviceServiceDescriptor.Methods().ByName("AddObligationTrigger")
	serviceRemoveObligationTriggerMethodDescriptor   = serviceServiceDescriptor.Methods().ByName("RemoveObligationTrigger")
)

// ServiceClient is a client for the policy.obligations.Service service.
type ServiceClient interface {
	ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error)
	GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error)
	GetObligationsByFQNs(context.Context, *connect.Request[obligations.GetObligationsByFQNsRequest]) (*connect.Response[obligations.GetObligationsByFQNsResponse], error)
	CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error)
	UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error)
	DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error)
	GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error)
	GetObligationValuesByFQNs(context.Context, *connect.Request[obligations.GetObligationValuesByFQNsRequest]) (*connect.Response[obligations.GetObligationValuesByFQNsResponse], error)
	CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error)
	UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error)
	DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error)
	AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error)
	RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error)
}

// NewServiceClient constructs a client for the policy.obligations.Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		listObligations: connect.NewClient[obligations.ListObligationsRequest, obligations.ListObligationsResponse](
			httpClient,
			baseURL+ServiceListObligationsProcedure,
			connect.WithSchema(serviceListObligationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getObligation: connect.NewClient[obligations.GetObligationRequest, obligations.GetObligationResponse](
			httpClient,
			baseURL+ServiceGetObligationProcedure,
			connect.WithSchema(serviceGetObligationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getObligationsByFQNs: connect.NewClient[obligations.GetObligationsByFQNsRequest, obligations.GetObligationsByFQNsResponse](
			httpClient,
			baseURL+ServiceGetObligationsByFQNsProcedure,
			connect.WithSchema(serviceGetObligationsByFQNsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createObligation: connect.NewClient[obligations.CreateObligationRequest, obligations.CreateObligationResponse](
			httpClient,
			baseURL+ServiceCreateObligationProcedure,
			connect.WithSchema(serviceCreateObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateObligation: connect.NewClient[obligations.UpdateObligationRequest, obligations.UpdateObligationResponse](
			httpClient,
			baseURL+ServiceUpdateObligationProcedure,
			connect.WithSchema(serviceUpdateObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObligation: connect.NewClient[obligations.DeleteObligationRequest, obligations.DeleteObligationResponse](
			httpClient,
			baseURL+ServiceDeleteObligationProcedure,
			connect.WithSchema(serviceDeleteObligationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getObligationValue: connect.NewClient[obligations.GetObligationValueRequest, obligations.GetObligationValueResponse](
			httpClient,
			baseURL+ServiceGetObligationValueProcedure,
			connect.WithSchema(serviceGetObligationValueMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getObligationValuesByFQNs: connect.NewClient[obligations.GetObligationValuesByFQNsRequest, obligations.GetObligationValuesByFQNsResponse](
			httpClient,
			baseURL+ServiceGetObligationValuesByFQNsProcedure,
			connect.WithSchema(serviceGetObligationValuesByFQNsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createObligationValue: connect.NewClient[obligations.CreateObligationValueRequest, obligations.CreateObligationValueResponse](
			httpClient,
			baseURL+ServiceCreateObligationValueProcedure,
			connect.WithSchema(serviceCreateObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateObligationValue: connect.NewClient[obligations.UpdateObligationValueRequest, obligations.UpdateObligationValueResponse](
			httpClient,
			baseURL+ServiceUpdateObligationValueProcedure,
			connect.WithSchema(serviceUpdateObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObligationValue: connect.NewClient[obligations.DeleteObligationValueRequest, obligations.DeleteObligationValueResponse](
			httpClient,
			baseURL+ServiceDeleteObligationValueProcedure,
			connect.WithSchema(serviceDeleteObligationValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addObligationTrigger: connect.NewClient[obligations.AddObligationTriggerRequest, obligations.AddObligationTriggerResponse](
			httpClient,
			baseURL+ServiceAddObligationTriggerProcedure,
			connect.WithSchema(serviceAddObligationTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeObligationTrigger: connect.NewClient[obligations.RemoveObligationTriggerRequest, obligations.RemoveObligationTriggerResponse](
			httpClient,
			baseURL+ServiceRemoveObligationTriggerProcedure,
			connect.WithSchema(serviceRemoveObligationTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	listObligations           *connect.Client[obligations.ListObligationsRequest, obligations.ListObligationsResponse]
	getObligation             *connect.Client[obligations.GetObligationRequest, obligations.GetObligationResponse]
	getObligationsByFQNs      *connect.Client[obligations.GetObligationsByFQNsRequest, obligations.GetObligationsByFQNsResponse]
	createObligation          *connect.Client[obligations.CreateObligationRequest, obligations.CreateObligationResponse]
	updateObligation          *connect.Client[obligations.UpdateObligationRequest, obligations.UpdateObligationResponse]
	deleteObligation          *connect.Client[obligations.DeleteObligationRequest, obligations.DeleteObligationResponse]
	getObligationValue        *connect.Client[obligations.GetObligationValueRequest, obligations.GetObligationValueResponse]
	getObligationValuesByFQNs *connect.Client[obligations.GetObligationValuesByFQNsRequest, obligations.GetObligationValuesByFQNsResponse]
	createObligationValue     *connect.Client[obligations.CreateObligationValueRequest, obligations.CreateObligationValueResponse]
	updateObligationValue     *connect.Client[obligations.UpdateObligationValueRequest, obligations.UpdateObligationValueResponse]
	deleteObligationValue     *connect.Client[obligations.DeleteObligationValueRequest, obligations.DeleteObligationValueResponse]
	addObligationTrigger      *connect.Client[obligations.AddObligationTriggerRequest, obligations.AddObligationTriggerResponse]
	removeObligationTrigger   *connect.Client[obligations.RemoveObligationTriggerRequest, obligations.RemoveObligationTriggerResponse]
}

// ListObligations calls policy.obligations.Service.ListObligations.
func (c *serviceClient) ListObligations(ctx context.Context, req *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error) {
	return c.listObligations.CallUnary(ctx, req)
}

// GetObligation calls policy.obligations.Service.GetObligation.
func (c *serviceClient) GetObligation(ctx context.Context, req *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error) {
	return c.getObligation.CallUnary(ctx, req)
}

// GetObligationsByFQNs calls policy.obligations.Service.GetObligationsByFQNs.
func (c *serviceClient) GetObligationsByFQNs(ctx context.Context, req *connect.Request[obligations.GetObligationsByFQNsRequest]) (*connect.Response[obligations.GetObligationsByFQNsResponse], error) {
	return c.getObligationsByFQNs.CallUnary(ctx, req)
}

// CreateObligation calls policy.obligations.Service.CreateObligation.
func (c *serviceClient) CreateObligation(ctx context.Context, req *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error) {
	return c.createObligation.CallUnary(ctx, req)
}

// UpdateObligation calls policy.obligations.Service.UpdateObligation.
func (c *serviceClient) UpdateObligation(ctx context.Context, req *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error) {
	return c.updateObligation.CallUnary(ctx, req)
}

// DeleteObligation calls policy.obligations.Service.DeleteObligation.
func (c *serviceClient) DeleteObligation(ctx context.Context, req *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error) {
	return c.deleteObligation.CallUnary(ctx, req)
}

// GetObligationValue calls policy.obligations.Service.GetObligationValue.
func (c *serviceClient) GetObligationValue(ctx context.Context, req *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error) {
	return c.getObligationValue.CallUnary(ctx, req)
}

// GetObligationValuesByFQNs calls policy.obligations.Service.GetObligationValuesByFQNs.
func (c *serviceClient) GetObligationValuesByFQNs(ctx context.Context, req *connect.Request[obligations.GetObligationValuesByFQNsRequest]) (*connect.Response[obligations.GetObligationValuesByFQNsResponse], error) {
	return c.getObligationValuesByFQNs.CallUnary(ctx, req)
}

// CreateObligationValue calls policy.obligations.Service.CreateObligationValue.
func (c *serviceClient) CreateObligationValue(ctx context.Context, req *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error) {
	return c.createObligationValue.CallUnary(ctx, req)
}

// UpdateObligationValue calls policy.obligations.Service.UpdateObligationValue.
func (c *serviceClient) UpdateObligationValue(ctx context.Context, req *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error) {
	return c.updateObligationValue.CallUnary(ctx, req)
}

// DeleteObligationValue calls policy.obligations.Service.DeleteObligationValue.
func (c *serviceClient) DeleteObligationValue(ctx context.Context, req *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error) {
	return c.deleteObligationValue.CallUnary(ctx, req)
}

// AddObligationTrigger calls policy.obligations.Service.AddObligationTrigger.
func (c *serviceClient) AddObligationTrigger(ctx context.Context, req *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error) {
	return c.addObligationTrigger.CallUnary(ctx, req)
}

// RemoveObligationTrigger calls policy.obligations.Service.RemoveObligationTrigger.
func (c *serviceClient) RemoveObligationTrigger(ctx context.Context, req *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error) {
	return c.removeObligationTrigger.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the policy.obligations.Service service.
type ServiceHandler interface {
	ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error)
	GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error)
	GetObligationsByFQNs(context.Context, *connect.Request[obligations.GetObligationsByFQNsRequest]) (*connect.Response[obligations.GetObligationsByFQNsResponse], error)
	CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error)
	UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error)
	DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error)
	GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error)
	GetObligationValuesByFQNs(context.Context, *connect.Request[obligations.GetObligationValuesByFQNsRequest]) (*connect.Response[obligations.GetObligationValuesByFQNsResponse], error)
	CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error)
	UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error)
	DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error)
	AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error)
	RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceListObligationsHandler := connect.NewUnaryHandler(
		ServiceListObligationsProcedure,
		svc.ListObligations,
		connect.WithSchema(serviceListObligationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetObligationHandler := connect.NewUnaryHandler(
		ServiceGetObligationProcedure,
		svc.GetObligation,
		connect.WithSchema(serviceGetObligationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetObligationsByFQNsHandler := connect.NewUnaryHandler(
		ServiceGetObligationsByFQNsProcedure,
		svc.GetObligationsByFQNs,
		connect.WithSchema(serviceGetObligationsByFQNsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceCreateObligationHandler := connect.NewUnaryHandler(
		ServiceCreateObligationProcedure,
		svc.CreateObligation,
		connect.WithSchema(serviceCreateObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceUpdateObligationHandler := connect.NewUnaryHandler(
		ServiceUpdateObligationProcedure,
		svc.UpdateObligation,
		connect.WithSchema(serviceUpdateObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteObligationHandler := connect.NewUnaryHandler(
		ServiceDeleteObligationProcedure,
		svc.DeleteObligation,
		connect.WithSchema(serviceDeleteObligationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetObligationValueHandler := connect.NewUnaryHandler(
		ServiceGetObligationValueProcedure,
		svc.GetObligationValue,
		connect.WithSchema(serviceGetObligationValueMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetObligationValuesByFQNsHandler := connect.NewUnaryHandler(
		ServiceGetObligationValuesByFQNsProcedure,
		svc.GetObligationValuesByFQNs,
		connect.WithSchema(serviceGetObligationValuesByFQNsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceCreateObligationValueHandler := connect.NewUnaryHandler(
		ServiceCreateObligationValueProcedure,
		svc.CreateObligationValue,
		connect.WithSchema(serviceCreateObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceUpdateObligationValueHandler := connect.NewUnaryHandler(
		ServiceUpdateObligationValueProcedure,
		svc.UpdateObligationValue,
		connect.WithSchema(serviceUpdateObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteObligationValueHandler := connect.NewUnaryHandler(
		ServiceDeleteObligationValueProcedure,
		svc.DeleteObligationValue,
		connect.WithSchema(serviceDeleteObligationValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAddObligationTriggerHandler := connect.NewUnaryHandler(
		ServiceAddObligationTriggerProcedure,
		svc.AddObligationTrigger,
		connect.WithSchema(serviceAddObligationTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceRemoveObligationTriggerHandler := connect.NewUnaryHandler(
		ServiceRemoveObligationTriggerProcedure,
		svc.RemoveObligationTrigger,
		connect.WithSchema(serviceRemoveObligationTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.obligations.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceListObligationsProcedure:
			serviceListObligationsHandler.ServeHTTP(w, r)
		case ServiceGetObligationProcedure:
			serviceGetObligationHandler.ServeHTTP(w, r)
		case ServiceGetObligationsByFQNsProcedure:
			serviceGetObligationsByFQNsHandler.ServeHTTP(w, r)
		case ServiceCreateObligationProcedure:
			serviceCreateObligationHandler.ServeHTTP(w, r)
		case ServiceUpdateObligationProcedure:
			serviceUpdateObligationHandler.ServeHTTP(w, r)
		case ServiceDeleteObligationProcedure:
			serviceDeleteObligationHandler.ServeHTTP(w, r)
		case ServiceGetObligationValueProcedure:
			serviceGetObligationValueHandler.ServeHTTP(w, r)
		case ServiceGetObligationValuesByFQNsProcedure:
			serviceGetObligationValuesByFQNsHandler.ServeHTTP(w, r)
		case ServiceCreateObligationValueProcedure:
			serviceCreateObligationValueHandler.ServeHTTP(w, r)
		case ServiceUpdateObligationValueProcedure:
			serviceUpdateObligationValueHandler.ServeHTTP(w, r)
		case ServiceDeleteObligationValueProcedure:
			serviceDeleteObligationValueHandler.ServeHTTP(w, r)
		case ServiceAddObligationTriggerProcedure:
			serviceAddObligationTriggerHandler.ServeHTTP(w, r)
		case ServiceRemoveObligationTriggerProcedure:
			serviceRemoveObligationTriggerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) ListObligations(context.Context, *connect.Request[obligations.ListObligationsRequest]) (*connect.Response[obligations.ListObligationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.ListObligations is not implemented"))
}

func (UnimplementedServiceHandler) GetObligation(context.Context, *connect.Request[obligations.GetObligationRequest]) (*connect.Response[obligations.GetObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.GetObligation is not implemented"))
}

func (UnimplementedServiceHandler) GetObligationsByFQNs(context.Context, *connect.Request[obligations.GetObligationsByFQNsRequest]) (*connect.Response[obligations.GetObligationsByFQNsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.GetObligationsByFQNs is not implemented"))
}

func (UnimplementedServiceHandler) CreateObligation(context.Context, *connect.Request[obligations.CreateObligationRequest]) (*connect.Response[obligations.CreateObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.CreateObligation is not implemented"))
}

func (UnimplementedServiceHandler) UpdateObligation(context.Context, *connect.Request[obligations.UpdateObligationRequest]) (*connect.Response[obligations.UpdateObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.UpdateObligation is not implemented"))
}

func (UnimplementedServiceHandler) DeleteObligation(context.Context, *connect.Request[obligations.DeleteObligationRequest]) (*connect.Response[obligations.DeleteObligationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.DeleteObligation is not implemented"))
}

func (UnimplementedServiceHandler) GetObligationValue(context.Context, *connect.Request[obligations.GetObligationValueRequest]) (*connect.Response[obligations.GetObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.GetObligationValue is not implemented"))
}

func (UnimplementedServiceHandler) GetObligationValuesByFQNs(context.Context, *connect.Request[obligations.GetObligationValuesByFQNsRequest]) (*connect.Response[obligations.GetObligationValuesByFQNsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.GetObligationValuesByFQNs is not implemented"))
}

func (UnimplementedServiceHandler) CreateObligationValue(context.Context, *connect.Request[obligations.CreateObligationValueRequest]) (*connect.Response[obligations.CreateObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.CreateObligationValue is not implemented"))
}

func (UnimplementedServiceHandler) UpdateObligationValue(context.Context, *connect.Request[obligations.UpdateObligationValueRequest]) (*connect.Response[obligations.UpdateObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.UpdateObligationValue is not implemented"))
}

func (UnimplementedServiceHandler) DeleteObligationValue(context.Context, *connect.Request[obligations.DeleteObligationValueRequest]) (*connect.Response[obligations.DeleteObligationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.DeleteObligationValue is not implemented"))
}

func (UnimplementedServiceHandler) AddObligationTrigger(context.Context, *connect.Request[obligations.AddObligationTriggerRequest]) (*connect.Response[obligations.AddObligationTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.AddObligationTrigger is not implemented"))
}

func (UnimplementedServiceHandler) RemoveObligationTrigger(context.Context, *connect.Request[obligations.RemoveObligationTriggerRequest]) (*connect.Response[obligations.RemoveObligationTriggerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.obligations.Service.RemoveObligationTrigger is not implemented"))
}
