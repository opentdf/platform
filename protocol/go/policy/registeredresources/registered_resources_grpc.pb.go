// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy/registeredresources/registered_resources.proto

package registeredresources

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisteredResourcesService_CreateRegisteredResource_FullMethodName      = "/policy.registeredresources.RegisteredResourcesService/CreateRegisteredResource"
	RegisteredResourcesService_GetRegisteredResource_FullMethodName         = "/policy.registeredresources.RegisteredResourcesService/GetRegisteredResource"
	RegisteredResourcesService_ListRegisteredResources_FullMethodName       = "/policy.registeredresources.RegisteredResourcesService/ListRegisteredResources"
	RegisteredResourcesService_UpdateRegisteredResource_FullMethodName      = "/policy.registeredresources.RegisteredResourcesService/UpdateRegisteredResource"
	RegisteredResourcesService_DeleteRegisteredResource_FullMethodName      = "/policy.registeredresources.RegisteredResourcesService/DeleteRegisteredResource"
	RegisteredResourcesService_CreateRegisteredResourceValue_FullMethodName = "/policy.registeredresources.RegisteredResourcesService/CreateRegisteredResourceValue"
	RegisteredResourcesService_GetRegisteredResourceValue_FullMethodName    = "/policy.registeredresources.RegisteredResourcesService/GetRegisteredResourceValue"
	RegisteredResourcesService_ListRegisteredResourceValues_FullMethodName  = "/policy.registeredresources.RegisteredResourcesService/ListRegisteredResourceValues"
	RegisteredResourcesService_UpdateRegisteredResourceValue_FullMethodName = "/policy.registeredresources.RegisteredResourcesService/UpdateRegisteredResourceValue"
	RegisteredResourcesService_DeleteRegisteredResourceValue_FullMethodName = "/policy.registeredresources.RegisteredResourcesService/DeleteRegisteredResourceValue"
)

// RegisteredResourcesServiceClient is the client API for RegisteredResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisteredResourcesServiceClient interface {
	CreateRegisteredResource(ctx context.Context, in *CreateRegisteredResourceRequest, opts ...grpc.CallOption) (*CreateRegisteredResourceResponse, error)
	GetRegisteredResource(ctx context.Context, in *GetRegisteredResourceRequest, opts ...grpc.CallOption) (*GetRegisteredResourceResponse, error)
	ListRegisteredResources(ctx context.Context, in *ListRegisteredResourcesRequest, opts ...grpc.CallOption) (*ListRegisteredResourcesResponse, error)
	UpdateRegisteredResource(ctx context.Context, in *UpdateRegisteredResourceRequest, opts ...grpc.CallOption) (*UpdateRegisteredResourceResponse, error)
	DeleteRegisteredResource(ctx context.Context, in *DeleteRegisteredResourceRequest, opts ...grpc.CallOption) (*DeleteRegisteredResourceResponse, error)
	CreateRegisteredResourceValue(ctx context.Context, in *CreateRegisteredResourceValueRequest, opts ...grpc.CallOption) (*CreateRegisteredResourceValueResponse, error)
	GetRegisteredResourceValue(ctx context.Context, in *GetRegisteredResourceValueRequest, opts ...grpc.CallOption) (*GetRegisteredResourceValueResponse, error)
	ListRegisteredResourceValues(ctx context.Context, in *ListRegisteredResourceValuesRequest, opts ...grpc.CallOption) (*ListRegisteredResourceValuesResponse, error)
	UpdateRegisteredResourceValue(ctx context.Context, in *UpdateRegisteredResourceValueRequest, opts ...grpc.CallOption) (*UpdateRegisteredResourceValueResponse, error)
	DeleteRegisteredResourceValue(ctx context.Context, in *DeleteRegisteredResourceValueRequest, opts ...grpc.CallOption) (*DeleteRegisteredResourceValueResponse, error)
}

type registeredResourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisteredResourcesServiceClient(cc grpc.ClientConnInterface) RegisteredResourcesServiceClient {
	return &registeredResourcesServiceClient{cc}
}

func (c *registeredResourcesServiceClient) CreateRegisteredResource(ctx context.Context, in *CreateRegisteredResourceRequest, opts ...grpc.CallOption) (*CreateRegisteredResourceResponse, error) {
	out := new(CreateRegisteredResourceResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_CreateRegisteredResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) GetRegisteredResource(ctx context.Context, in *GetRegisteredResourceRequest, opts ...grpc.CallOption) (*GetRegisteredResourceResponse, error) {
	out := new(GetRegisteredResourceResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_GetRegisteredResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) ListRegisteredResources(ctx context.Context, in *ListRegisteredResourcesRequest, opts ...grpc.CallOption) (*ListRegisteredResourcesResponse, error) {
	out := new(ListRegisteredResourcesResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_ListRegisteredResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) UpdateRegisteredResource(ctx context.Context, in *UpdateRegisteredResourceRequest, opts ...grpc.CallOption) (*UpdateRegisteredResourceResponse, error) {
	out := new(UpdateRegisteredResourceResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_UpdateRegisteredResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) DeleteRegisteredResource(ctx context.Context, in *DeleteRegisteredResourceRequest, opts ...grpc.CallOption) (*DeleteRegisteredResourceResponse, error) {
	out := new(DeleteRegisteredResourceResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_DeleteRegisteredResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) CreateRegisteredResourceValue(ctx context.Context, in *CreateRegisteredResourceValueRequest, opts ...grpc.CallOption) (*CreateRegisteredResourceValueResponse, error) {
	out := new(CreateRegisteredResourceValueResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_CreateRegisteredResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) GetRegisteredResourceValue(ctx context.Context, in *GetRegisteredResourceValueRequest, opts ...grpc.CallOption) (*GetRegisteredResourceValueResponse, error) {
	out := new(GetRegisteredResourceValueResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_GetRegisteredResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) ListRegisteredResourceValues(ctx context.Context, in *ListRegisteredResourceValuesRequest, opts ...grpc.CallOption) (*ListRegisteredResourceValuesResponse, error) {
	out := new(ListRegisteredResourceValuesResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_ListRegisteredResourceValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) UpdateRegisteredResourceValue(ctx context.Context, in *UpdateRegisteredResourceValueRequest, opts ...grpc.CallOption) (*UpdateRegisteredResourceValueResponse, error) {
	out := new(UpdateRegisteredResourceValueResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_UpdateRegisteredResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeredResourcesServiceClient) DeleteRegisteredResourceValue(ctx context.Context, in *DeleteRegisteredResourceValueRequest, opts ...grpc.CallOption) (*DeleteRegisteredResourceValueResponse, error) {
	out := new(DeleteRegisteredResourceValueResponse)
	err := c.cc.Invoke(ctx, RegisteredResourcesService_DeleteRegisteredResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisteredResourcesServiceServer is the server API for RegisteredResourcesService service.
// All implementations must embed UnimplementedRegisteredResourcesServiceServer
// for forward compatibility
type RegisteredResourcesServiceServer interface {
	CreateRegisteredResource(context.Context, *CreateRegisteredResourceRequest) (*CreateRegisteredResourceResponse, error)
	GetRegisteredResource(context.Context, *GetRegisteredResourceRequest) (*GetRegisteredResourceResponse, error)
	ListRegisteredResources(context.Context, *ListRegisteredResourcesRequest) (*ListRegisteredResourcesResponse, error)
	UpdateRegisteredResource(context.Context, *UpdateRegisteredResourceRequest) (*UpdateRegisteredResourceResponse, error)
	DeleteRegisteredResource(context.Context, *DeleteRegisteredResourceRequest) (*DeleteRegisteredResourceResponse, error)
	CreateRegisteredResourceValue(context.Context, *CreateRegisteredResourceValueRequest) (*CreateRegisteredResourceValueResponse, error)
	GetRegisteredResourceValue(context.Context, *GetRegisteredResourceValueRequest) (*GetRegisteredResourceValueResponse, error)
	ListRegisteredResourceValues(context.Context, *ListRegisteredResourceValuesRequest) (*ListRegisteredResourceValuesResponse, error)
	UpdateRegisteredResourceValue(context.Context, *UpdateRegisteredResourceValueRequest) (*UpdateRegisteredResourceValueResponse, error)
	DeleteRegisteredResourceValue(context.Context, *DeleteRegisteredResourceValueRequest) (*DeleteRegisteredResourceValueResponse, error)
	mustEmbedUnimplementedRegisteredResourcesServiceServer()
}

// UnimplementedRegisteredResourcesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegisteredResourcesServiceServer struct {
}

func (UnimplementedRegisteredResourcesServiceServer) CreateRegisteredResource(context.Context, *CreateRegisteredResourceRequest) (*CreateRegisteredResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisteredResource not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) GetRegisteredResource(context.Context, *GetRegisteredResourceRequest) (*GetRegisteredResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredResource not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) ListRegisteredResources(context.Context, *ListRegisteredResourcesRequest) (*ListRegisteredResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredResources not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) UpdateRegisteredResource(context.Context, *UpdateRegisteredResourceRequest) (*UpdateRegisteredResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisteredResource not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) DeleteRegisteredResource(context.Context, *DeleteRegisteredResourceRequest) (*DeleteRegisteredResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisteredResource not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) CreateRegisteredResourceValue(context.Context, *CreateRegisteredResourceValueRequest) (*CreateRegisteredResourceValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisteredResourceValue not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) GetRegisteredResourceValue(context.Context, *GetRegisteredResourceValueRequest) (*GetRegisteredResourceValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredResourceValue not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) ListRegisteredResourceValues(context.Context, *ListRegisteredResourceValuesRequest) (*ListRegisteredResourceValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredResourceValues not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) UpdateRegisteredResourceValue(context.Context, *UpdateRegisteredResourceValueRequest) (*UpdateRegisteredResourceValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisteredResourceValue not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) DeleteRegisteredResourceValue(context.Context, *DeleteRegisteredResourceValueRequest) (*DeleteRegisteredResourceValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisteredResourceValue not implemented")
}
func (UnimplementedRegisteredResourcesServiceServer) mustEmbedUnimplementedRegisteredResourcesServiceServer() {
}

// UnsafeRegisteredResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisteredResourcesServiceServer will
// result in compilation errors.
type UnsafeRegisteredResourcesServiceServer interface {
	mustEmbedUnimplementedRegisteredResourcesServiceServer()
}

func RegisterRegisteredResourcesServiceServer(s grpc.ServiceRegistrar, srv RegisteredResourcesServiceServer) {
	s.RegisterService(&RegisteredResourcesService_ServiceDesc, srv)
}

func _RegisteredResourcesService_CreateRegisteredResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegisteredResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).CreateRegisteredResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_CreateRegisteredResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).CreateRegisteredResource(ctx, req.(*CreateRegisteredResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_GetRegisteredResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).GetRegisteredResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_GetRegisteredResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).GetRegisteredResource(ctx, req.(*GetRegisteredResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_ListRegisteredResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).ListRegisteredResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_ListRegisteredResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).ListRegisteredResources(ctx, req.(*ListRegisteredResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_UpdateRegisteredResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegisteredResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).UpdateRegisteredResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_UpdateRegisteredResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).UpdateRegisteredResource(ctx, req.(*UpdateRegisteredResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_DeleteRegisteredResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).DeleteRegisteredResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_DeleteRegisteredResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).DeleteRegisteredResource(ctx, req.(*DeleteRegisteredResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_CreateRegisteredResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegisteredResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).CreateRegisteredResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_CreateRegisteredResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).CreateRegisteredResourceValue(ctx, req.(*CreateRegisteredResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_GetRegisteredResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).GetRegisteredResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_GetRegisteredResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).GetRegisteredResourceValue(ctx, req.(*GetRegisteredResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_ListRegisteredResourceValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredResourceValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).ListRegisteredResourceValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_ListRegisteredResourceValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).ListRegisteredResourceValues(ctx, req.(*ListRegisteredResourceValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_UpdateRegisteredResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegisteredResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).UpdateRegisteredResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_UpdateRegisteredResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).UpdateRegisteredResourceValue(ctx, req.(*UpdateRegisteredResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteredResourcesService_DeleteRegisteredResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteredResourcesServiceServer).DeleteRegisteredResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteredResourcesService_DeleteRegisteredResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteredResourcesServiceServer).DeleteRegisteredResourceValue(ctx, req.(*DeleteRegisteredResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisteredResourcesService_ServiceDesc is the grpc.ServiceDesc for RegisteredResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisteredResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.registeredresources.RegisteredResourcesService",
	HandlerType: (*RegisteredResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegisteredResource",
			Handler:    _RegisteredResourcesService_CreateRegisteredResource_Handler,
		},
		{
			MethodName: "GetRegisteredResource",
			Handler:    _RegisteredResourcesService_GetRegisteredResource_Handler,
		},
		{
			MethodName: "ListRegisteredResources",
			Handler:    _RegisteredResourcesService_ListRegisteredResources_Handler,
		},
		{
			MethodName: "UpdateRegisteredResource",
			Handler:    _RegisteredResourcesService_UpdateRegisteredResource_Handler,
		},
		{
			MethodName: "DeleteRegisteredResource",
			Handler:    _RegisteredResourcesService_DeleteRegisteredResource_Handler,
		},
		{
			MethodName: "CreateRegisteredResourceValue",
			Handler:    _RegisteredResourcesService_CreateRegisteredResourceValue_Handler,
		},
		{
			MethodName: "GetRegisteredResourceValue",
			Handler:    _RegisteredResourcesService_GetRegisteredResourceValue_Handler,
		},
		{
			MethodName: "ListRegisteredResourceValues",
			Handler:    _RegisteredResourcesService_ListRegisteredResourceValues_Handler,
		},
		{
			MethodName: "UpdateRegisteredResourceValue",
			Handler:    _RegisteredResourcesService_UpdateRegisteredResourceValue_Handler,
		},
		{
			MethodName: "DeleteRegisteredResourceValue",
			Handler:    _RegisteredResourcesService_DeleteRegisteredResourceValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/registeredresources/registered_resources.proto",
}
