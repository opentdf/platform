// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy/resourcemappinggroup/resource_mapping_group.proto

package resourcemappinggroup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceMappingGroupService_ListResourceMappingGroups_FullMethodName  = "/policy.resourcemappinggroup.ResourceMappingGroupService/ListResourceMappingGroups"
	ResourceMappingGroupService_GetResourceMappingGroup_FullMethodName    = "/policy.resourcemappinggroup.ResourceMappingGroupService/GetResourceMappingGroup"
	ResourceMappingGroupService_CreateResourceMappingGroup_FullMethodName = "/policy.resourcemappinggroup.ResourceMappingGroupService/CreateResourceMappingGroup"
	ResourceMappingGroupService_UpdateResourceMappingGroup_FullMethodName = "/policy.resourcemappinggroup.ResourceMappingGroupService/UpdateResourceMappingGroup"
	ResourceMappingGroupService_DeleteResourceMappingGroup_FullMethodName = "/policy.resourcemappinggroup.ResourceMappingGroupService/DeleteResourceMappingGroup"
)

// ResourceMappingGroupServiceClient is the client API for ResourceMappingGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceMappingGroupServiceClient interface {
	ListResourceMappingGroups(ctx context.Context, in *ListResourceMappingGroupsRequest, opts ...grpc.CallOption) (*ListResourceMappingGroupsResponse, error)
	GetResourceMappingGroup(ctx context.Context, in *GetResourceMappingGroupRequest, opts ...grpc.CallOption) (*GetResourceMappingGroupResponse, error)
	CreateResourceMappingGroup(ctx context.Context, in *CreateResourceMappingGroupRequest, opts ...grpc.CallOption) (*CreateResourceMappingGroupResponse, error)
	UpdateResourceMappingGroup(ctx context.Context, in *UpdateResourceMappingGroupRequest, opts ...grpc.CallOption) (*UpdateResourceMappingGroupResponse, error)
	DeleteResourceMappingGroup(ctx context.Context, in *DeleteResourceMappingGroupRequest, opts ...grpc.CallOption) (*DeleteResourceMappingGroupResponse, error)
}

type resourceMappingGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceMappingGroupServiceClient(cc grpc.ClientConnInterface) ResourceMappingGroupServiceClient {
	return &resourceMappingGroupServiceClient{cc}
}

func (c *resourceMappingGroupServiceClient) ListResourceMappingGroups(ctx context.Context, in *ListResourceMappingGroupsRequest, opts ...grpc.CallOption) (*ListResourceMappingGroupsResponse, error) {
	out := new(ListResourceMappingGroupsResponse)
	err := c.cc.Invoke(ctx, ResourceMappingGroupService_ListResourceMappingGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMappingGroupServiceClient) GetResourceMappingGroup(ctx context.Context, in *GetResourceMappingGroupRequest, opts ...grpc.CallOption) (*GetResourceMappingGroupResponse, error) {
	out := new(GetResourceMappingGroupResponse)
	err := c.cc.Invoke(ctx, ResourceMappingGroupService_GetResourceMappingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMappingGroupServiceClient) CreateResourceMappingGroup(ctx context.Context, in *CreateResourceMappingGroupRequest, opts ...grpc.CallOption) (*CreateResourceMappingGroupResponse, error) {
	out := new(CreateResourceMappingGroupResponse)
	err := c.cc.Invoke(ctx, ResourceMappingGroupService_CreateResourceMappingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMappingGroupServiceClient) UpdateResourceMappingGroup(ctx context.Context, in *UpdateResourceMappingGroupRequest, opts ...grpc.CallOption) (*UpdateResourceMappingGroupResponse, error) {
	out := new(UpdateResourceMappingGroupResponse)
	err := c.cc.Invoke(ctx, ResourceMappingGroupService_UpdateResourceMappingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMappingGroupServiceClient) DeleteResourceMappingGroup(ctx context.Context, in *DeleteResourceMappingGroupRequest, opts ...grpc.CallOption) (*DeleteResourceMappingGroupResponse, error) {
	out := new(DeleteResourceMappingGroupResponse)
	err := c.cc.Invoke(ctx, ResourceMappingGroupService_DeleteResourceMappingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceMappingGroupServiceServer is the server API for ResourceMappingGroupService service.
// All implementations must embed UnimplementedResourceMappingGroupServiceServer
// for forward compatibility
type ResourceMappingGroupServiceServer interface {
	ListResourceMappingGroups(context.Context, *ListResourceMappingGroupsRequest) (*ListResourceMappingGroupsResponse, error)
	GetResourceMappingGroup(context.Context, *GetResourceMappingGroupRequest) (*GetResourceMappingGroupResponse, error)
	CreateResourceMappingGroup(context.Context, *CreateResourceMappingGroupRequest) (*CreateResourceMappingGroupResponse, error)
	UpdateResourceMappingGroup(context.Context, *UpdateResourceMappingGroupRequest) (*UpdateResourceMappingGroupResponse, error)
	DeleteResourceMappingGroup(context.Context, *DeleteResourceMappingGroupRequest) (*DeleteResourceMappingGroupResponse, error)
	mustEmbedUnimplementedResourceMappingGroupServiceServer()
}

// UnimplementedResourceMappingGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceMappingGroupServiceServer struct {
}

func (UnimplementedResourceMappingGroupServiceServer) ListResourceMappingGroups(context.Context, *ListResourceMappingGroupsRequest) (*ListResourceMappingGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceMappingGroups not implemented")
}
func (UnimplementedResourceMappingGroupServiceServer) GetResourceMappingGroup(context.Context, *GetResourceMappingGroupRequest) (*GetResourceMappingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceMappingGroup not implemented")
}
func (UnimplementedResourceMappingGroupServiceServer) CreateResourceMappingGroup(context.Context, *CreateResourceMappingGroupRequest) (*CreateResourceMappingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceMappingGroup not implemented")
}
func (UnimplementedResourceMappingGroupServiceServer) UpdateResourceMappingGroup(context.Context, *UpdateResourceMappingGroupRequest) (*UpdateResourceMappingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceMappingGroup not implemented")
}
func (UnimplementedResourceMappingGroupServiceServer) DeleteResourceMappingGroup(context.Context, *DeleteResourceMappingGroupRequest) (*DeleteResourceMappingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceMappingGroup not implemented")
}
func (UnimplementedResourceMappingGroupServiceServer) mustEmbedUnimplementedResourceMappingGroupServiceServer() {
}

// UnsafeResourceMappingGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceMappingGroupServiceServer will
// result in compilation errors.
type UnsafeResourceMappingGroupServiceServer interface {
	mustEmbedUnimplementedResourceMappingGroupServiceServer()
}

func RegisterResourceMappingGroupServiceServer(s grpc.ServiceRegistrar, srv ResourceMappingGroupServiceServer) {
	s.RegisterService(&ResourceMappingGroupService_ServiceDesc, srv)
}

func _ResourceMappingGroupService_ListResourceMappingGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceMappingGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMappingGroupServiceServer).ListResourceMappingGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceMappingGroupService_ListResourceMappingGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMappingGroupServiceServer).ListResourceMappingGroups(ctx, req.(*ListResourceMappingGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMappingGroupService_GetResourceMappingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceMappingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMappingGroupServiceServer).GetResourceMappingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceMappingGroupService_GetResourceMappingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMappingGroupServiceServer).GetResourceMappingGroup(ctx, req.(*GetResourceMappingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMappingGroupService_CreateResourceMappingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceMappingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMappingGroupServiceServer).CreateResourceMappingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceMappingGroupService_CreateResourceMappingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMappingGroupServiceServer).CreateResourceMappingGroup(ctx, req.(*CreateResourceMappingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMappingGroupService_UpdateResourceMappingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceMappingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMappingGroupServiceServer).UpdateResourceMappingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceMappingGroupService_UpdateResourceMappingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMappingGroupServiceServer).UpdateResourceMappingGroup(ctx, req.(*UpdateResourceMappingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMappingGroupService_DeleteResourceMappingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceMappingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMappingGroupServiceServer).DeleteResourceMappingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceMappingGroupService_DeleteResourceMappingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMappingGroupServiceServer).DeleteResourceMappingGroup(ctx, req.(*DeleteResourceMappingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceMappingGroupService_ServiceDesc is the grpc.ServiceDesc for ResourceMappingGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceMappingGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.resourcemappinggroup.ResourceMappingGroupService",
	HandlerType: (*ResourceMappingGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceMappingGroups",
			Handler:    _ResourceMappingGroupService_ListResourceMappingGroups_Handler,
		},
		{
			MethodName: "GetResourceMappingGroup",
			Handler:    _ResourceMappingGroupService_GetResourceMappingGroup_Handler,
		},
		{
			MethodName: "CreateResourceMappingGroup",
			Handler:    _ResourceMappingGroupService_CreateResourceMappingGroup_Handler,
		},
		{
			MethodName: "UpdateResourceMappingGroup",
			Handler:    _ResourceMappingGroupService_UpdateResourceMappingGroup_Handler,
		},
		{
			MethodName: "DeleteResourceMappingGroup",
			Handler:    _ResourceMappingGroupService_DeleteResourceMappingGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/resourcemappinggroup/resource_mapping_group.proto",
}
