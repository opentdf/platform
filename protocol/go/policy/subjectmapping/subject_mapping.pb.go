// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: policy/subjectmapping/subject_mapping.proto

package subjectmapping

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	authorization "github.com/opentdf/platform/protocol/go/authorization"
	common "github.com/opentdf/platform/protocol/go/common"
	attributes "github.com/opentdf/platform/protocol/go/policy/attributes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
type SubjectMappingOperatorEnum int32

const (
	SubjectMappingOperatorEnum_SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED SubjectMappingOperatorEnum = 0
	SubjectMappingOperatorEnum_SUBJECT_MAPPING_OPERATOR_ENUM_IN          SubjectMappingOperatorEnum = 1
	SubjectMappingOperatorEnum_SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN      SubjectMappingOperatorEnum = 2
)

// Enum value maps for SubjectMappingOperatorEnum.
var (
	SubjectMappingOperatorEnum_name = map[int32]string{
		0: "SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED",
		1: "SUBJECT_MAPPING_OPERATOR_ENUM_IN",
		2: "SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN",
	}
	SubjectMappingOperatorEnum_value = map[string]int32{
		"SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED": 0,
		"SUBJECT_MAPPING_OPERATOR_ENUM_IN":          1,
		"SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN":      2,
	}
)

func (x SubjectMappingOperatorEnum) Enum() *SubjectMappingOperatorEnum {
	p := new(SubjectMappingOperatorEnum)
	*p = x
	return p
}

func (x SubjectMappingOperatorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectMappingOperatorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_subjectmapping_subject_mapping_proto_enumTypes[0].Descriptor()
}

func (SubjectMappingOperatorEnum) Type() protoreflect.EnumType {
	return &file_policy_subjectmapping_subject_mapping_proto_enumTypes[0]
}

func (x SubjectMappingOperatorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectMappingOperatorEnum.Descriptor instead.
func (SubjectMappingOperatorEnum) EnumDescriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{0}
}

// buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
type ConditionBooleanTypeEnum int32

const (
	ConditionBooleanTypeEnum_CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED ConditionBooleanTypeEnum = 0
	ConditionBooleanTypeEnum_CONDITION_BOOLEAN_TYPE_ENUM_AND         ConditionBooleanTypeEnum = 1
	ConditionBooleanTypeEnum_CONDITION_BOOLEAN_TYPE_ENUM_OR          ConditionBooleanTypeEnum = 2
)

// Enum value maps for ConditionBooleanTypeEnum.
var (
	ConditionBooleanTypeEnum_name = map[int32]string{
		0: "CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED",
		1: "CONDITION_BOOLEAN_TYPE_ENUM_AND",
		2: "CONDITION_BOOLEAN_TYPE_ENUM_OR",
	}
	ConditionBooleanTypeEnum_value = map[string]int32{
		"CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED": 0,
		"CONDITION_BOOLEAN_TYPE_ENUM_AND":         1,
		"CONDITION_BOOLEAN_TYPE_ENUM_OR":          2,
	}
)

func (x ConditionBooleanTypeEnum) Enum() *ConditionBooleanTypeEnum {
	p := new(ConditionBooleanTypeEnum)
	*p = x
	return p
}

func (x ConditionBooleanTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionBooleanTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_subjectmapping_subject_mapping_proto_enumTypes[1].Descriptor()
}

func (ConditionBooleanTypeEnum) Type() protoreflect.EnumType {
	return &file_policy_subjectmapping_subject_mapping_proto_enumTypes[1]
}

func (x ConditionBooleanTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionBooleanTypeEnum.Descriptor instead.
func (ConditionBooleanTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{1}
}

// *
// A Condition defines a rule of <subject attribute> <operator> <subject values>
//
// Example:  Match Subjects with an attribute "division" with a value of "Accounting" or "Marketing":
// {
// "subject_attribute": "division",
// "operator": "IN",
// "subject_values" : ["Accounting", "Marketing"]
// }
//
// Example: Match a subject by preferred username:
// {
// "subject_attribute": "preferredUsername",
// "operator": "IN",
// "subject_values" : ["alice@example.org"]
// }
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource Attribute Key; NOT Attribute Definition Attribute name
	SubjectAttribute string `protobuf:"bytes,1,opt,name=subject_attribute,json=subjectAttribute,proto3" json:"subject_attribute,omitempty"`
	// the operator
	Operator SubjectMappingOperatorEnum `protobuf:"varint,2,opt,name=operator,proto3,enum=policy.subjectmapping.SubjectMappingOperatorEnum" json:"operator,omitempty"`
	// The list of comparison values for a resource's <attribute> value
	SubjectValues []string `protobuf:"bytes,3,rep,name=subject_values,json=subjectValues,proto3" json:"subject_values,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetSubjectAttribute() string {
	if x != nil {
		return x.SubjectAttribute
	}
	return ""
}

func (x *Condition) GetOperator() SubjectMappingOperatorEnum {
	if x != nil {
		return x.Operator
	}
	return SubjectMappingOperatorEnum_SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED
}

func (x *Condition) GetSubjectValues() []string {
	if x != nil {
		return x.SubjectValues
	}
	return nil
}

// A Group of conditions with either OR or AND evaluation across the contained conditions
type ConditionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// the boolean evaluation type across the conditions
	BooleanType ConditionBooleanTypeEnum `protobuf:"varint,2,opt,name=boolean_type,json=booleanType,proto3,enum=policy.subjectmapping.ConditionBooleanTypeEnum" json:"boolean_type,omitempty"`
}

func (x *ConditionGroup) Reset() {
	*x = ConditionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionGroup) ProtoMessage() {}

func (x *ConditionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionGroup.ProtoReflect.Descriptor instead.
func (*ConditionGroup) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionGroup) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ConditionGroup) GetBooleanType() ConditionBooleanTypeEnum {
	if x != nil {
		return x.BooleanType
	}
	return ConditionBooleanTypeEnum_CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED
}

// A Set of subjects described by matching criteria via a list of condition groups.
// A Subject Set can be used by multiple Subject Mappings
type SubjectSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The conditions groups describing the matching rules for subjects in the set
	ConditionGroups []*ConditionGroup `protobuf:"bytes,3,rep,name=condition_groups,json=conditionGroups,proto3" json:"condition_groups,omitempty"`
}

func (x *SubjectSet) Reset() {
	*x = SubjectSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectSet) ProtoMessage() {}

func (x *SubjectSet) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectSet.ProtoReflect.Descriptor instead.
func (*SubjectSet) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *SubjectSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubjectSet) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubjectSet) GetConditionGroups() []*ConditionGroup {
	if x != nil {
		return x.ConditionGroups
	}
	return nil
}

// Subject Mapping: A Policy assigning Subject Set(s) to a permitted attribute value + action(s) combination
//
// Example: Subjects in sets 1 and 2 are entitled attribute value http://wwww.example.org/attr/example/value/one
// with permitted actions TRANSMIT and DECRYPT
// {
// "id": "someid",
// "attribute_value": {example_one_attribute_value...},
// "subject_sets": [{subject_set_1},{subject_set_2}]
// "actions": ["TRANSMIT", "DECRYPT"]
// }
type SubjectMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"` //TODO should this be a list of values?
	// Attribute Value to be mapped to; aka: "The Entity Entitlement Attribute"
	AttributeValue *attributes.Value `protobuf:"bytes,3,opt,name=attribute_value,json=attributeValue,proto3" json:"attribute_value,omitempty"`
	// the subjects included in this mapping
	SubjectSets []*SubjectSet `protobuf:"bytes,4,rep,name=subject_sets,json=subjectSets,proto3" json:"subject_sets,omitempty"`
	// The actions permitted by subjects in this mapping
	Actions []*authorization.Action `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SubjectMapping) Reset() {
	*x = SubjectMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectMapping) ProtoMessage() {}

func (x *SubjectMapping) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectMapping.ProtoReflect.Descriptor instead.
func (*SubjectMapping) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{3}
}

func (x *SubjectMapping) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubjectMapping) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubjectMapping) GetAttributeValue() *attributes.Value {
	if x != nil {
		return x.AttributeValue
	}
	return nil
}

func (x *SubjectMapping) GetSubjectSets() []*SubjectSet {
	if x != nil {
		return x.SubjectSets
	}
	return nil
}

func (x *SubjectMapping) GetActions() []*authorization.Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type SubjectSetCreateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *common.MetadataMutable `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ConditionGroups []*ConditionGroup       `protobuf:"bytes,2,rep,name=condition_groups,json=conditionGroups,proto3" json:"condition_groups,omitempty"`
}

func (x *SubjectSetCreateUpdate) Reset() {
	*x = SubjectSetCreateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectSetCreateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectSetCreateUpdate) ProtoMessage() {}

func (x *SubjectSetCreateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectSetCreateUpdate.ProtoReflect.Descriptor instead.
func (*SubjectSetCreateUpdate) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{4}
}

func (x *SubjectSetCreateUpdate) GetMetadata() *common.MetadataMutable {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubjectSetCreateUpdate) GetConditionGroups() []*ConditionGroup {
	if x != nil {
		return x.ConditionGroups
	}
	return nil
}

type GetSubjectSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubjectSetRequest) Reset() {
	*x = GetSubjectSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectSetRequest) ProtoMessage() {}

func (x *GetSubjectSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectSetRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectSetRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubjectSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubjectSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSet *SubjectSet `protobuf:"bytes,1,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *GetSubjectSetResponse) Reset() {
	*x = GetSubjectSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectSetResponse) ProtoMessage() {}

func (x *GetSubjectSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectSetResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectSetResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubjectSetResponse) GetSubjectSet() *SubjectSet {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type CreateSubjectSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSet *SubjectSetCreateUpdate `protobuf:"bytes,1,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *CreateSubjectSetRequest) Reset() {
	*x = CreateSubjectSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectSetRequest) ProtoMessage() {}

func (x *CreateSubjectSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectSetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubjectSetRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSubjectSetRequest) GetSubjectSet() *SubjectSetCreateUpdate {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type CreateSubjectSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSet *SubjectSet `protobuf:"bytes,1,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *CreateSubjectSetResponse) Reset() {
	*x = CreateSubjectSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectSetResponse) ProtoMessage() {}

func (x *CreateSubjectSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectSetResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectSetResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSubjectSetResponse) GetSubjectSet() *SubjectSet {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type UpdateSubjectSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectSet *SubjectSetCreateUpdate `protobuf:"bytes,2,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *UpdateSubjectSetRequest) Reset() {
	*x = UpdateSubjectSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectSetRequest) ProtoMessage() {}

func (x *UpdateSubjectSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubjectSetRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSubjectSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubjectSetRequest) GetSubjectSet() *SubjectSetCreateUpdate {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type UpdateSubjectSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSet *SubjectSet `protobuf:"bytes,1,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *UpdateSubjectSetResponse) Reset() {
	*x = UpdateSubjectSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectSetResponse) ProtoMessage() {}

func (x *UpdateSubjectSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectSetResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubjectSetResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSubjectSetResponse) GetSubjectSet() *SubjectSet {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type DeleteSubjectSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubjectSetRequest) Reset() {
	*x = DeleteSubjectSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectSetRequest) ProtoMessage() {}

func (x *DeleteSubjectSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectSetRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSubjectSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubjectSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSet *SubjectSet `protobuf:"bytes,1,opt,name=subject_set,json=subjectSet,proto3" json:"subject_set,omitempty"`
}

func (x *DeleteSubjectSetResponse) Reset() {
	*x = DeleteSubjectSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectSetResponse) ProtoMessage() {}

func (x *DeleteSubjectSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubjectSetResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSubjectSetResponse) GetSubjectSet() *SubjectSet {
	if x != nil {
		return x.SubjectSet
	}
	return nil
}

type ListSubjectSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSubjectSetsRequest) Reset() {
	*x = ListSubjectSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectSetsRequest) ProtoMessage() {}

func (x *ListSubjectSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectSetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubjectSetsRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{13}
}

type ListSubjectSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectSets []*SubjectSet `protobuf:"bytes,1,rep,name=subject_sets,json=subjectSets,proto3" json:"subject_sets,omitempty"`
}

func (x *ListSubjectSetsResponse) Reset() {
	*x = ListSubjectSetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectSetsResponse) ProtoMessage() {}

func (x *ListSubjectSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectSetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubjectSetsResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{14}
}

func (x *ListSubjectSetsResponse) GetSubjectSets() []*SubjectSet {
	if x != nil {
		return x.SubjectSets
	}
	return nil
}

// A Representation of a subject as attribute->value pairs.  This would mirror user attributes retrieved
// from an authoritative source such as an IDP (Identity Provider) or User Store.  Examples include such ADFS/LDAP, OKTA, etc.
type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *structpb.Struct `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{15}
}

func (x *Subject) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type MatchSubjectMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *MatchSubjectMappingsRequest) Reset() {
	*x = MatchSubjectMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSubjectMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSubjectMappingsRequest) ProtoMessage() {}

func (x *MatchSubjectMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSubjectMappingsRequest.ProtoReflect.Descriptor instead.
func (*MatchSubjectMappingsRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{16}
}

func (x *MatchSubjectMappingsRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type MatchSubjectMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMappings []*SubjectMapping `protobuf:"bytes,1,rep,name=subject_mappings,json=subjectMappings,proto3" json:"subject_mappings,omitempty"`
}

func (x *MatchSubjectMappingsResponse) Reset() {
	*x = MatchSubjectMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSubjectMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSubjectMappingsResponse) ProtoMessage() {}

func (x *MatchSubjectMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSubjectMappingsResponse.ProtoReflect.Descriptor instead.
func (*MatchSubjectMappingsResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{17}
}

func (x *MatchSubjectMappingsResponse) GetSubjectMappings() []*SubjectMapping {
	if x != nil {
		return x.SubjectMappings
	}
	return nil
}

type SubjectMappingCreateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.MetadataMutable `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Attribute Value to be mapped to
	AttributeValueId string `protobuf:"bytes,2,opt,name=attribute_value_id,json=attributeValueId,proto3" json:"attribute_value_id,omitempty"`
	// the subjects sets in this mapping
	SubjectSetIds []string `protobuf:"bytes,3,rep,name=subject_set_ids,json=subjectSetIds,proto3" json:"subject_set_ids,omitempty"`
	// The actions permitted by subjects in this mapping
	Actions []*authorization.Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SubjectMappingCreateUpdate) Reset() {
	*x = SubjectMappingCreateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectMappingCreateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectMappingCreateUpdate) ProtoMessage() {}

func (x *SubjectMappingCreateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectMappingCreateUpdate.ProtoReflect.Descriptor instead.
func (*SubjectMappingCreateUpdate) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{18}
}

func (x *SubjectMappingCreateUpdate) GetMetadata() *common.MetadataMutable {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubjectMappingCreateUpdate) GetAttributeValueId() string {
	if x != nil {
		return x.AttributeValueId
	}
	return ""
}

func (x *SubjectMappingCreateUpdate) GetSubjectSetIds() []string {
	if x != nil {
		return x.SubjectSetIds
	}
	return nil
}

func (x *SubjectMappingCreateUpdate) GetActions() []*authorization.Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type GetSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubjectMappingRequest) Reset() {
	*x = GetSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectMappingRequest) ProtoMessage() {}

func (x *GetSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{19}
}

func (x *GetSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *GetSubjectMappingResponse) Reset() {
	*x = GetSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectMappingResponse) ProtoMessage() {}

func (x *GetSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{20}
}

func (x *GetSubjectMappingResponse) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type ListSubjectMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSubjectMappingsRequest) Reset() {
	*x = ListSubjectMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectMappingsRequest) ProtoMessage() {}

func (x *ListSubjectMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListSubjectMappingsRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{21}
}

type ListSubjectMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMappings []*SubjectMapping `protobuf:"bytes,1,rep,name=subject_mappings,json=subjectMappings,proto3" json:"subject_mappings,omitempty"`
}

func (x *ListSubjectMappingsResponse) Reset() {
	*x = ListSubjectMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectMappingsResponse) ProtoMessage() {}

func (x *ListSubjectMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListSubjectMappingsResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{22}
}

func (x *ListSubjectMappingsResponse) GetSubjectMappings() []*SubjectMapping {
	if x != nil {
		return x.SubjectMappings
	}
	return nil
}

type CreateSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMappingCreateUpdate `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *CreateSubjectMappingRequest) Reset() {
	*x = CreateSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectMappingRequest) ProtoMessage() {}

func (x *CreateSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSubjectMappingRequest) GetSubjectMapping() *SubjectMappingCreateUpdate {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type CreateSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *CreateSubjectMappingResponse) Reset() {
	*x = CreateSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectMappingResponse) ProtoMessage() {}

func (x *CreateSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{24}
}

func (x *CreateSubjectMappingResponse) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type UpdateSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectMapping *SubjectMappingCreateUpdate `protobuf:"bytes,2,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *UpdateSubjectMappingRequest) Reset() {
	*x = UpdateSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectMappingRequest) ProtoMessage() {}

func (x *UpdateSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubjectMappingRequest) GetSubjectMapping() *SubjectMappingCreateUpdate {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type UpdateSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *UpdateSubjectMappingResponse) Reset() {
	*x = UpdateSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectMappingResponse) ProtoMessage() {}

func (x *UpdateSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateSubjectMappingResponse) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type DeleteSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubjectMappingRequest) Reset() {
	*x = DeleteSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectMappingRequest) ProtoMessage() {}

func (x *DeleteSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *DeleteSubjectMappingResponse) Reset() {
	*x = DeleteSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectMappingResponse) ProtoMessage() {}

func (x *DeleteSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_subjectmapping_subject_mapping_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteSubjectMappingResponse) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

var File_policy_subjectmapping_subject_mapping_proto protoreflect.FileDescriptor

var file_policy_subjectmapping_subject_mapping_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x88, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x2e, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x71, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x5e, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x18, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x1b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x70, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6f, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x6e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0x6e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2a, 0x9b, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x55, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x32, 0xd7, 0x0d, 0x0a, 0x15, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x97, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x0d, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x3a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x22, 0x12, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x17, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x97, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xab, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x11, 0x2f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xb0,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x16, 0x2f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x42, 0xf4, 0x01, 0x0a, 0x29, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x64, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x13, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x58, 0xaa, 0x02, 0x15,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x21,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_policy_subjectmapping_subject_mapping_proto_rawDescOnce sync.Once
	file_policy_subjectmapping_subject_mapping_proto_rawDescData = file_policy_subjectmapping_subject_mapping_proto_rawDesc
)

func file_policy_subjectmapping_subject_mapping_proto_rawDescGZIP() []byte {
	file_policy_subjectmapping_subject_mapping_proto_rawDescOnce.Do(func() {
		file_policy_subjectmapping_subject_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_subjectmapping_subject_mapping_proto_rawDescData)
	})
	return file_policy_subjectmapping_subject_mapping_proto_rawDescData
}

var file_policy_subjectmapping_subject_mapping_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_policy_subjectmapping_subject_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_policy_subjectmapping_subject_mapping_proto_goTypes = []interface{}{
	(SubjectMappingOperatorEnum)(0),      // 0: policy.subjectmapping.SubjectMappingOperatorEnum
	(ConditionBooleanTypeEnum)(0),        // 1: policy.subjectmapping.ConditionBooleanTypeEnum
	(*Condition)(nil),                    // 2: policy.subjectmapping.Condition
	(*ConditionGroup)(nil),               // 3: policy.subjectmapping.ConditionGroup
	(*SubjectSet)(nil),                   // 4: policy.subjectmapping.SubjectSet
	(*SubjectMapping)(nil),               // 5: policy.subjectmapping.SubjectMapping
	(*SubjectSetCreateUpdate)(nil),       // 6: policy.subjectmapping.SubjectSetCreateUpdate
	(*GetSubjectSetRequest)(nil),         // 7: policy.subjectmapping.GetSubjectSetRequest
	(*GetSubjectSetResponse)(nil),        // 8: policy.subjectmapping.GetSubjectSetResponse
	(*CreateSubjectSetRequest)(nil),      // 9: policy.subjectmapping.CreateSubjectSetRequest
	(*CreateSubjectSetResponse)(nil),     // 10: policy.subjectmapping.CreateSubjectSetResponse
	(*UpdateSubjectSetRequest)(nil),      // 11: policy.subjectmapping.UpdateSubjectSetRequest
	(*UpdateSubjectSetResponse)(nil),     // 12: policy.subjectmapping.UpdateSubjectSetResponse
	(*DeleteSubjectSetRequest)(nil),      // 13: policy.subjectmapping.DeleteSubjectSetRequest
	(*DeleteSubjectSetResponse)(nil),     // 14: policy.subjectmapping.DeleteSubjectSetResponse
	(*ListSubjectSetsRequest)(nil),       // 15: policy.subjectmapping.ListSubjectSetsRequest
	(*ListSubjectSetsResponse)(nil),      // 16: policy.subjectmapping.ListSubjectSetsResponse
	(*Subject)(nil),                      // 17: policy.subjectmapping.Subject
	(*MatchSubjectMappingsRequest)(nil),  // 18: policy.subjectmapping.MatchSubjectMappingsRequest
	(*MatchSubjectMappingsResponse)(nil), // 19: policy.subjectmapping.MatchSubjectMappingsResponse
	(*SubjectMappingCreateUpdate)(nil),   // 20: policy.subjectmapping.SubjectMappingCreateUpdate
	(*GetSubjectMappingRequest)(nil),     // 21: policy.subjectmapping.GetSubjectMappingRequest
	(*GetSubjectMappingResponse)(nil),    // 22: policy.subjectmapping.GetSubjectMappingResponse
	(*ListSubjectMappingsRequest)(nil),   // 23: policy.subjectmapping.ListSubjectMappingsRequest
	(*ListSubjectMappingsResponse)(nil),  // 24: policy.subjectmapping.ListSubjectMappingsResponse
	(*CreateSubjectMappingRequest)(nil),  // 25: policy.subjectmapping.CreateSubjectMappingRequest
	(*CreateSubjectMappingResponse)(nil), // 26: policy.subjectmapping.CreateSubjectMappingResponse
	(*UpdateSubjectMappingRequest)(nil),  // 27: policy.subjectmapping.UpdateSubjectMappingRequest
	(*UpdateSubjectMappingResponse)(nil), // 28: policy.subjectmapping.UpdateSubjectMappingResponse
	(*DeleteSubjectMappingRequest)(nil),  // 29: policy.subjectmapping.DeleteSubjectMappingRequest
	(*DeleteSubjectMappingResponse)(nil), // 30: policy.subjectmapping.DeleteSubjectMappingResponse
	(*common.Metadata)(nil),              // 31: common.Metadata
	(*attributes.Value)(nil),             // 32: policy.attributes.Value
	(*authorization.Action)(nil),         // 33: authorization.Action
	(*common.MetadataMutable)(nil),       // 34: common.MetadataMutable
	(*structpb.Struct)(nil),              // 35: google.protobuf.Struct
}
var file_policy_subjectmapping_subject_mapping_proto_depIdxs = []int32{
	0,  // 0: policy.subjectmapping.Condition.operator:type_name -> policy.subjectmapping.SubjectMappingOperatorEnum
	2,  // 1: policy.subjectmapping.ConditionGroup.conditions:type_name -> policy.subjectmapping.Condition
	1,  // 2: policy.subjectmapping.ConditionGroup.boolean_type:type_name -> policy.subjectmapping.ConditionBooleanTypeEnum
	31, // 3: policy.subjectmapping.SubjectSet.metadata:type_name -> common.Metadata
	3,  // 4: policy.subjectmapping.SubjectSet.condition_groups:type_name -> policy.subjectmapping.ConditionGroup
	31, // 5: policy.subjectmapping.SubjectMapping.metadata:type_name -> common.Metadata
	32, // 6: policy.subjectmapping.SubjectMapping.attribute_value:type_name -> policy.attributes.Value
	4,  // 7: policy.subjectmapping.SubjectMapping.subject_sets:type_name -> policy.subjectmapping.SubjectSet
	33, // 8: policy.subjectmapping.SubjectMapping.actions:type_name -> authorization.Action
	34, // 9: policy.subjectmapping.SubjectSetCreateUpdate.metadata:type_name -> common.MetadataMutable
	3,  // 10: policy.subjectmapping.SubjectSetCreateUpdate.condition_groups:type_name -> policy.subjectmapping.ConditionGroup
	4,  // 11: policy.subjectmapping.GetSubjectSetResponse.subject_set:type_name -> policy.subjectmapping.SubjectSet
	6,  // 12: policy.subjectmapping.CreateSubjectSetRequest.subject_set:type_name -> policy.subjectmapping.SubjectSetCreateUpdate
	4,  // 13: policy.subjectmapping.CreateSubjectSetResponse.subject_set:type_name -> policy.subjectmapping.SubjectSet
	6,  // 14: policy.subjectmapping.UpdateSubjectSetRequest.subject_set:type_name -> policy.subjectmapping.SubjectSetCreateUpdate
	4,  // 15: policy.subjectmapping.UpdateSubjectSetResponse.subject_set:type_name -> policy.subjectmapping.SubjectSet
	4,  // 16: policy.subjectmapping.DeleteSubjectSetResponse.subject_set:type_name -> policy.subjectmapping.SubjectSet
	4,  // 17: policy.subjectmapping.ListSubjectSetsResponse.subject_sets:type_name -> policy.subjectmapping.SubjectSet
	35, // 18: policy.subjectmapping.Subject.attributes:type_name -> google.protobuf.Struct
	17, // 19: policy.subjectmapping.MatchSubjectMappingsRequest.subject:type_name -> policy.subjectmapping.Subject
	5,  // 20: policy.subjectmapping.MatchSubjectMappingsResponse.subject_mappings:type_name -> policy.subjectmapping.SubjectMapping
	34, // 21: policy.subjectmapping.SubjectMappingCreateUpdate.metadata:type_name -> common.MetadataMutable
	33, // 22: policy.subjectmapping.SubjectMappingCreateUpdate.actions:type_name -> authorization.Action
	5,  // 23: policy.subjectmapping.GetSubjectMappingResponse.subject_mapping:type_name -> policy.subjectmapping.SubjectMapping
	5,  // 24: policy.subjectmapping.ListSubjectMappingsResponse.subject_mappings:type_name -> policy.subjectmapping.SubjectMapping
	20, // 25: policy.subjectmapping.CreateSubjectMappingRequest.subject_mapping:type_name -> policy.subjectmapping.SubjectMappingCreateUpdate
	5,  // 26: policy.subjectmapping.CreateSubjectMappingResponse.subject_mapping:type_name -> policy.subjectmapping.SubjectMapping
	20, // 27: policy.subjectmapping.UpdateSubjectMappingRequest.subject_mapping:type_name -> policy.subjectmapping.SubjectMappingCreateUpdate
	5,  // 28: policy.subjectmapping.UpdateSubjectMappingResponse.subject_mapping:type_name -> policy.subjectmapping.SubjectMapping
	5,  // 29: policy.subjectmapping.DeleteSubjectMappingResponse.subject_mapping:type_name -> policy.subjectmapping.SubjectMapping
	7,  // 30: policy.subjectmapping.SubjectMappingService.GetSubjectSet:input_type -> policy.subjectmapping.GetSubjectSetRequest
	9,  // 31: policy.subjectmapping.SubjectMappingService.CreateSubjectSet:input_type -> policy.subjectmapping.CreateSubjectSetRequest
	11, // 32: policy.subjectmapping.SubjectMappingService.UpdateSubjectSet:input_type -> policy.subjectmapping.UpdateSubjectSetRequest
	13, // 33: policy.subjectmapping.SubjectMappingService.DeleteSubjectSet:input_type -> policy.subjectmapping.DeleteSubjectSetRequest
	15, // 34: policy.subjectmapping.SubjectMappingService.ListSubjectSets:input_type -> policy.subjectmapping.ListSubjectSetsRequest
	18, // 35: policy.subjectmapping.SubjectMappingService.MatchSubjectMappings:input_type -> policy.subjectmapping.MatchSubjectMappingsRequest
	23, // 36: policy.subjectmapping.SubjectMappingService.ListSubjectMappings:input_type -> policy.subjectmapping.ListSubjectMappingsRequest
	21, // 37: policy.subjectmapping.SubjectMappingService.GetSubjectMapping:input_type -> policy.subjectmapping.GetSubjectMappingRequest
	25, // 38: policy.subjectmapping.SubjectMappingService.CreateSubjectMapping:input_type -> policy.subjectmapping.CreateSubjectMappingRequest
	27, // 39: policy.subjectmapping.SubjectMappingService.UpdateSubjectMapping:input_type -> policy.subjectmapping.UpdateSubjectMappingRequest
	29, // 40: policy.subjectmapping.SubjectMappingService.DeleteSubjectMapping:input_type -> policy.subjectmapping.DeleteSubjectMappingRequest
	8,  // 41: policy.subjectmapping.SubjectMappingService.GetSubjectSet:output_type -> policy.subjectmapping.GetSubjectSetResponse
	10, // 42: policy.subjectmapping.SubjectMappingService.CreateSubjectSet:output_type -> policy.subjectmapping.CreateSubjectSetResponse
	12, // 43: policy.subjectmapping.SubjectMappingService.UpdateSubjectSet:output_type -> policy.subjectmapping.UpdateSubjectSetResponse
	14, // 44: policy.subjectmapping.SubjectMappingService.DeleteSubjectSet:output_type -> policy.subjectmapping.DeleteSubjectSetResponse
	16, // 45: policy.subjectmapping.SubjectMappingService.ListSubjectSets:output_type -> policy.subjectmapping.ListSubjectSetsResponse
	19, // 46: policy.subjectmapping.SubjectMappingService.MatchSubjectMappings:output_type -> policy.subjectmapping.MatchSubjectMappingsResponse
	24, // 47: policy.subjectmapping.SubjectMappingService.ListSubjectMappings:output_type -> policy.subjectmapping.ListSubjectMappingsResponse
	22, // 48: policy.subjectmapping.SubjectMappingService.GetSubjectMapping:output_type -> policy.subjectmapping.GetSubjectMappingResponse
	26, // 49: policy.subjectmapping.SubjectMappingService.CreateSubjectMapping:output_type -> policy.subjectmapping.CreateSubjectMappingResponse
	28, // 50: policy.subjectmapping.SubjectMappingService.UpdateSubjectMapping:output_type -> policy.subjectmapping.UpdateSubjectMappingResponse
	30, // 51: policy.subjectmapping.SubjectMappingService.DeleteSubjectMapping:output_type -> policy.subjectmapping.DeleteSubjectMappingResponse
	41, // [41:52] is the sub-list for method output_type
	30, // [30:41] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_policy_subjectmapping_subject_mapping_proto_init() }
func file_policy_subjectmapping_subject_mapping_proto_init() {
	if File_policy_subjectmapping_subject_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectSetCreateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectSetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSubjectMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSubjectMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectMappingCreateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_subjectmapping_subject_mapping_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_subjectmapping_subject_mapping_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_subjectmapping_subject_mapping_proto_goTypes,
		DependencyIndexes: file_policy_subjectmapping_subject_mapping_proto_depIdxs,
		EnumInfos:         file_policy_subjectmapping_subject_mapping_proto_enumTypes,
		MessageInfos:      file_policy_subjectmapping_subject_mapping_proto_msgTypes,
	}.Build()
	File_policy_subjectmapping_subject_mapping_proto = out.File
	file_policy_subjectmapping_subject_mapping_proto_rawDesc = nil
	file_policy_subjectmapping_subject_mapping_proto_goTypes = nil
	file_policy_subjectmapping_subject_mapping_proto_depIdxs = nil
}
