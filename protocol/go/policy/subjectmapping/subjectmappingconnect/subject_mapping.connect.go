// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: policy/subjectmapping/subject_mapping.proto

package subjectmappingconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	subjectmapping "github.com/opentdf/platform/protocol/go/policy/subjectmapping"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubjectMappingServiceName is the fully-qualified name of the SubjectMappingService service.
	SubjectMappingServiceName = "policy.subjectmapping.SubjectMappingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubjectMappingServiceMatchSubjectMappingsProcedure is the fully-qualified name of the
	// SubjectMappingService's MatchSubjectMappings RPC.
	SubjectMappingServiceMatchSubjectMappingsProcedure = "/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings"
	// SubjectMappingServiceListSubjectMappingsProcedure is the fully-qualified name of the
	// SubjectMappingService's ListSubjectMappings RPC.
	SubjectMappingServiceListSubjectMappingsProcedure = "/policy.subjectmapping.SubjectMappingService/ListSubjectMappings"
	// SubjectMappingServiceGetSubjectMappingProcedure is the fully-qualified name of the
	// SubjectMappingService's GetSubjectMapping RPC.
	SubjectMappingServiceGetSubjectMappingProcedure = "/policy.subjectmapping.SubjectMappingService/GetSubjectMapping"
	// SubjectMappingServiceCreateSubjectMappingProcedure is the fully-qualified name of the
	// SubjectMappingService's CreateSubjectMapping RPC.
	SubjectMappingServiceCreateSubjectMappingProcedure = "/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping"
	// SubjectMappingServiceUpdateSubjectMappingProcedure is the fully-qualified name of the
	// SubjectMappingService's UpdateSubjectMapping RPC.
	SubjectMappingServiceUpdateSubjectMappingProcedure = "/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping"
	// SubjectMappingServiceDeleteSubjectMappingProcedure is the fully-qualified name of the
	// SubjectMappingService's DeleteSubjectMapping RPC.
	SubjectMappingServiceDeleteSubjectMappingProcedure = "/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping"
	// SubjectMappingServiceListSubjectConditionSetsProcedure is the fully-qualified name of the
	// SubjectMappingService's ListSubjectConditionSets RPC.
	SubjectMappingServiceListSubjectConditionSetsProcedure = "/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets"
	// SubjectMappingServiceGetSubjectConditionSetProcedure is the fully-qualified name of the
	// SubjectMappingService's GetSubjectConditionSet RPC.
	SubjectMappingServiceGetSubjectConditionSetProcedure = "/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet"
	// SubjectMappingServiceCreateSubjectConditionSetProcedure is the fully-qualified name of the
	// SubjectMappingService's CreateSubjectConditionSet RPC.
	SubjectMappingServiceCreateSubjectConditionSetProcedure = "/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet"
	// SubjectMappingServiceUpdateSubjectConditionSetProcedure is the fully-qualified name of the
	// SubjectMappingService's UpdateSubjectConditionSet RPC.
	SubjectMappingServiceUpdateSubjectConditionSetProcedure = "/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet"
	// SubjectMappingServiceDeleteSubjectConditionSetProcedure is the fully-qualified name of the
	// SubjectMappingService's DeleteSubjectConditionSet RPC.
	SubjectMappingServiceDeleteSubjectConditionSetProcedure = "/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet"
	// SubjectMappingServiceDeleteAllUnmappedSubjectConditionSetsProcedure is the fully-qualified name
	// of the SubjectMappingService's DeleteAllUnmappedSubjectConditionSets RPC.
	SubjectMappingServiceDeleteAllUnmappedSubjectConditionSetsProcedure = "/policy.subjectmapping.SubjectMappingService/DeleteAllUnmappedSubjectConditionSets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	subjectMappingServiceServiceDescriptor                                     = subjectmapping.File_policy_subjectmapping_subject_mapping_proto.Services().ByName("SubjectMappingService")
	subjectMappingServiceMatchSubjectMappingsMethodDescriptor                  = subjectMappingServiceServiceDescriptor.Methods().ByName("MatchSubjectMappings")
	subjectMappingServiceListSubjectMappingsMethodDescriptor                   = subjectMappingServiceServiceDescriptor.Methods().ByName("ListSubjectMappings")
	subjectMappingServiceGetSubjectMappingMethodDescriptor                     = subjectMappingServiceServiceDescriptor.Methods().ByName("GetSubjectMapping")
	subjectMappingServiceCreateSubjectMappingMethodDescriptor                  = subjectMappingServiceServiceDescriptor.Methods().ByName("CreateSubjectMapping")
	subjectMappingServiceUpdateSubjectMappingMethodDescriptor                  = subjectMappingServiceServiceDescriptor.Methods().ByName("UpdateSubjectMapping")
	subjectMappingServiceDeleteSubjectMappingMethodDescriptor                  = subjectMappingServiceServiceDescriptor.Methods().ByName("DeleteSubjectMapping")
	subjectMappingServiceListSubjectConditionSetsMethodDescriptor              = subjectMappingServiceServiceDescriptor.Methods().ByName("ListSubjectConditionSets")
	subjectMappingServiceGetSubjectConditionSetMethodDescriptor                = subjectMappingServiceServiceDescriptor.Methods().ByName("GetSubjectConditionSet")
	subjectMappingServiceCreateSubjectConditionSetMethodDescriptor             = subjectMappingServiceServiceDescriptor.Methods().ByName("CreateSubjectConditionSet")
	subjectMappingServiceUpdateSubjectConditionSetMethodDescriptor             = subjectMappingServiceServiceDescriptor.Methods().ByName("UpdateSubjectConditionSet")
	subjectMappingServiceDeleteSubjectConditionSetMethodDescriptor             = subjectMappingServiceServiceDescriptor.Methods().ByName("DeleteSubjectConditionSet")
	subjectMappingServiceDeleteAllUnmappedSubjectConditionSetsMethodDescriptor = subjectMappingServiceServiceDescriptor.Methods().ByName("DeleteAllUnmappedSubjectConditionSets")
)

// SubjectMappingServiceClient is a client for the policy.subjectmapping.SubjectMappingService
// service.
type SubjectMappingServiceClient interface {
	// Find matching Subject Mappings for a given Subject
	MatchSubjectMappings(context.Context, *connect.Request[subjectmapping.MatchSubjectMappingsRequest]) (*connect.Response[subjectmapping.MatchSubjectMappingsResponse], error)
	ListSubjectMappings(context.Context, *connect.Request[subjectmapping.ListSubjectMappingsRequest]) (*connect.Response[subjectmapping.ListSubjectMappingsResponse], error)
	GetSubjectMapping(context.Context, *connect.Request[subjectmapping.GetSubjectMappingRequest]) (*connect.Response[subjectmapping.GetSubjectMappingResponse], error)
	CreateSubjectMapping(context.Context, *connect.Request[subjectmapping.CreateSubjectMappingRequest]) (*connect.Response[subjectmapping.CreateSubjectMappingResponse], error)
	UpdateSubjectMapping(context.Context, *connect.Request[subjectmapping.UpdateSubjectMappingRequest]) (*connect.Response[subjectmapping.UpdateSubjectMappingResponse], error)
	DeleteSubjectMapping(context.Context, *connect.Request[subjectmapping.DeleteSubjectMappingRequest]) (*connect.Response[subjectmapping.DeleteSubjectMappingResponse], error)
	ListSubjectConditionSets(context.Context, *connect.Request[subjectmapping.ListSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.ListSubjectConditionSetsResponse], error)
	GetSubjectConditionSet(context.Context, *connect.Request[subjectmapping.GetSubjectConditionSetRequest]) (*connect.Response[subjectmapping.GetSubjectConditionSetResponse], error)
	CreateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.CreateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.CreateSubjectConditionSetResponse], error)
	UpdateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.UpdateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.UpdateSubjectConditionSetResponse], error)
	DeleteSubjectConditionSet(context.Context, *connect.Request[subjectmapping.DeleteSubjectConditionSetRequest]) (*connect.Response[subjectmapping.DeleteSubjectConditionSetResponse], error)
	DeleteAllUnmappedSubjectConditionSets(context.Context, *connect.Request[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse], error)
}

// NewSubjectMappingServiceClient constructs a client for the
// policy.subjectmapping.SubjectMappingService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubjectMappingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubjectMappingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subjectMappingServiceClient{
		matchSubjectMappings: connect.NewClient[subjectmapping.MatchSubjectMappingsRequest, subjectmapping.MatchSubjectMappingsResponse](
			httpClient,
			baseURL+SubjectMappingServiceMatchSubjectMappingsProcedure,
			connect.WithSchema(subjectMappingServiceMatchSubjectMappingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSubjectMappings: connect.NewClient[subjectmapping.ListSubjectMappingsRequest, subjectmapping.ListSubjectMappingsResponse](
			httpClient,
			baseURL+SubjectMappingServiceListSubjectMappingsProcedure,
			connect.WithSchema(subjectMappingServiceListSubjectMappingsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSubjectMapping: connect.NewClient[subjectmapping.GetSubjectMappingRequest, subjectmapping.GetSubjectMappingResponse](
			httpClient,
			baseURL+SubjectMappingServiceGetSubjectMappingProcedure,
			connect.WithSchema(subjectMappingServiceGetSubjectMappingMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSubjectMapping: connect.NewClient[subjectmapping.CreateSubjectMappingRequest, subjectmapping.CreateSubjectMappingResponse](
			httpClient,
			baseURL+SubjectMappingServiceCreateSubjectMappingProcedure,
			connect.WithSchema(subjectMappingServiceCreateSubjectMappingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSubjectMapping: connect.NewClient[subjectmapping.UpdateSubjectMappingRequest, subjectmapping.UpdateSubjectMappingResponse](
			httpClient,
			baseURL+SubjectMappingServiceUpdateSubjectMappingProcedure,
			connect.WithSchema(subjectMappingServiceUpdateSubjectMappingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubjectMapping: connect.NewClient[subjectmapping.DeleteSubjectMappingRequest, subjectmapping.DeleteSubjectMappingResponse](
			httpClient,
			baseURL+SubjectMappingServiceDeleteSubjectMappingProcedure,
			connect.WithSchema(subjectMappingServiceDeleteSubjectMappingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSubjectConditionSets: connect.NewClient[subjectmapping.ListSubjectConditionSetsRequest, subjectmapping.ListSubjectConditionSetsResponse](
			httpClient,
			baseURL+SubjectMappingServiceListSubjectConditionSetsProcedure,
			connect.WithSchema(subjectMappingServiceListSubjectConditionSetsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSubjectConditionSet: connect.NewClient[subjectmapping.GetSubjectConditionSetRequest, subjectmapping.GetSubjectConditionSetResponse](
			httpClient,
			baseURL+SubjectMappingServiceGetSubjectConditionSetProcedure,
			connect.WithSchema(subjectMappingServiceGetSubjectConditionSetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSubjectConditionSet: connect.NewClient[subjectmapping.CreateSubjectConditionSetRequest, subjectmapping.CreateSubjectConditionSetResponse](
			httpClient,
			baseURL+SubjectMappingServiceCreateSubjectConditionSetProcedure,
			connect.WithSchema(subjectMappingServiceCreateSubjectConditionSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSubjectConditionSet: connect.NewClient[subjectmapping.UpdateSubjectConditionSetRequest, subjectmapping.UpdateSubjectConditionSetResponse](
			httpClient,
			baseURL+SubjectMappingServiceUpdateSubjectConditionSetProcedure,
			connect.WithSchema(subjectMappingServiceUpdateSubjectConditionSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubjectConditionSet: connect.NewClient[subjectmapping.DeleteSubjectConditionSetRequest, subjectmapping.DeleteSubjectConditionSetResponse](
			httpClient,
			baseURL+SubjectMappingServiceDeleteSubjectConditionSetProcedure,
			connect.WithSchema(subjectMappingServiceDeleteSubjectConditionSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAllUnmappedSubjectConditionSets: connect.NewClient[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest, subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse](
			httpClient,
			baseURL+SubjectMappingServiceDeleteAllUnmappedSubjectConditionSetsProcedure,
			connect.WithSchema(subjectMappingServiceDeleteAllUnmappedSubjectConditionSetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// subjectMappingServiceClient implements SubjectMappingServiceClient.
type subjectMappingServiceClient struct {
	matchSubjectMappings                  *connect.Client[subjectmapping.MatchSubjectMappingsRequest, subjectmapping.MatchSubjectMappingsResponse]
	listSubjectMappings                   *connect.Client[subjectmapping.ListSubjectMappingsRequest, subjectmapping.ListSubjectMappingsResponse]
	getSubjectMapping                     *connect.Client[subjectmapping.GetSubjectMappingRequest, subjectmapping.GetSubjectMappingResponse]
	createSubjectMapping                  *connect.Client[subjectmapping.CreateSubjectMappingRequest, subjectmapping.CreateSubjectMappingResponse]
	updateSubjectMapping                  *connect.Client[subjectmapping.UpdateSubjectMappingRequest, subjectmapping.UpdateSubjectMappingResponse]
	deleteSubjectMapping                  *connect.Client[subjectmapping.DeleteSubjectMappingRequest, subjectmapping.DeleteSubjectMappingResponse]
	listSubjectConditionSets              *connect.Client[subjectmapping.ListSubjectConditionSetsRequest, subjectmapping.ListSubjectConditionSetsResponse]
	getSubjectConditionSet                *connect.Client[subjectmapping.GetSubjectConditionSetRequest, subjectmapping.GetSubjectConditionSetResponse]
	createSubjectConditionSet             *connect.Client[subjectmapping.CreateSubjectConditionSetRequest, subjectmapping.CreateSubjectConditionSetResponse]
	updateSubjectConditionSet             *connect.Client[subjectmapping.UpdateSubjectConditionSetRequest, subjectmapping.UpdateSubjectConditionSetResponse]
	deleteSubjectConditionSet             *connect.Client[subjectmapping.DeleteSubjectConditionSetRequest, subjectmapping.DeleteSubjectConditionSetResponse]
	deleteAllUnmappedSubjectConditionSets *connect.Client[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest, subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse]
}

// MatchSubjectMappings calls policy.subjectmapping.SubjectMappingService.MatchSubjectMappings.
func (c *subjectMappingServiceClient) MatchSubjectMappings(ctx context.Context, req *connect.Request[subjectmapping.MatchSubjectMappingsRequest]) (*connect.Response[subjectmapping.MatchSubjectMappingsResponse], error) {
	return c.matchSubjectMappings.CallUnary(ctx, req)
}

// ListSubjectMappings calls policy.subjectmapping.SubjectMappingService.ListSubjectMappings.
func (c *subjectMappingServiceClient) ListSubjectMappings(ctx context.Context, req *connect.Request[subjectmapping.ListSubjectMappingsRequest]) (*connect.Response[subjectmapping.ListSubjectMappingsResponse], error) {
	return c.listSubjectMappings.CallUnary(ctx, req)
}

// GetSubjectMapping calls policy.subjectmapping.SubjectMappingService.GetSubjectMapping.
func (c *subjectMappingServiceClient) GetSubjectMapping(ctx context.Context, req *connect.Request[subjectmapping.GetSubjectMappingRequest]) (*connect.Response[subjectmapping.GetSubjectMappingResponse], error) {
	return c.getSubjectMapping.CallUnary(ctx, req)
}

// CreateSubjectMapping calls policy.subjectmapping.SubjectMappingService.CreateSubjectMapping.
func (c *subjectMappingServiceClient) CreateSubjectMapping(ctx context.Context, req *connect.Request[subjectmapping.CreateSubjectMappingRequest]) (*connect.Response[subjectmapping.CreateSubjectMappingResponse], error) {
	return c.createSubjectMapping.CallUnary(ctx, req)
}

// UpdateSubjectMapping calls policy.subjectmapping.SubjectMappingService.UpdateSubjectMapping.
func (c *subjectMappingServiceClient) UpdateSubjectMapping(ctx context.Context, req *connect.Request[subjectmapping.UpdateSubjectMappingRequest]) (*connect.Response[subjectmapping.UpdateSubjectMappingResponse], error) {
	return c.updateSubjectMapping.CallUnary(ctx, req)
}

// DeleteSubjectMapping calls policy.subjectmapping.SubjectMappingService.DeleteSubjectMapping.
func (c *subjectMappingServiceClient) DeleteSubjectMapping(ctx context.Context, req *connect.Request[subjectmapping.DeleteSubjectMappingRequest]) (*connect.Response[subjectmapping.DeleteSubjectMappingResponse], error) {
	return c.deleteSubjectMapping.CallUnary(ctx, req)
}

// ListSubjectConditionSets calls
// policy.subjectmapping.SubjectMappingService.ListSubjectConditionSets.
func (c *subjectMappingServiceClient) ListSubjectConditionSets(ctx context.Context, req *connect.Request[subjectmapping.ListSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.ListSubjectConditionSetsResponse], error) {
	return c.listSubjectConditionSets.CallUnary(ctx, req)
}

// GetSubjectConditionSet calls policy.subjectmapping.SubjectMappingService.GetSubjectConditionSet.
func (c *subjectMappingServiceClient) GetSubjectConditionSet(ctx context.Context, req *connect.Request[subjectmapping.GetSubjectConditionSetRequest]) (*connect.Response[subjectmapping.GetSubjectConditionSetResponse], error) {
	return c.getSubjectConditionSet.CallUnary(ctx, req)
}

// CreateSubjectConditionSet calls
// policy.subjectmapping.SubjectMappingService.CreateSubjectConditionSet.
func (c *subjectMappingServiceClient) CreateSubjectConditionSet(ctx context.Context, req *connect.Request[subjectmapping.CreateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.CreateSubjectConditionSetResponse], error) {
	return c.createSubjectConditionSet.CallUnary(ctx, req)
}

// UpdateSubjectConditionSet calls
// policy.subjectmapping.SubjectMappingService.UpdateSubjectConditionSet.
func (c *subjectMappingServiceClient) UpdateSubjectConditionSet(ctx context.Context, req *connect.Request[subjectmapping.UpdateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.UpdateSubjectConditionSetResponse], error) {
	return c.updateSubjectConditionSet.CallUnary(ctx, req)
}

// DeleteSubjectConditionSet calls
// policy.subjectmapping.SubjectMappingService.DeleteSubjectConditionSet.
func (c *subjectMappingServiceClient) DeleteSubjectConditionSet(ctx context.Context, req *connect.Request[subjectmapping.DeleteSubjectConditionSetRequest]) (*connect.Response[subjectmapping.DeleteSubjectConditionSetResponse], error) {
	return c.deleteSubjectConditionSet.CallUnary(ctx, req)
}

// DeleteAllUnmappedSubjectConditionSets calls
// policy.subjectmapping.SubjectMappingService.DeleteAllUnmappedSubjectConditionSets.
func (c *subjectMappingServiceClient) DeleteAllUnmappedSubjectConditionSets(ctx context.Context, req *connect.Request[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse], error) {
	return c.deleteAllUnmappedSubjectConditionSets.CallUnary(ctx, req)
}

// SubjectMappingServiceHandler is an implementation of the
// policy.subjectmapping.SubjectMappingService service.
type SubjectMappingServiceHandler interface {
	// Find matching Subject Mappings for a given Subject
	MatchSubjectMappings(context.Context, *connect.Request[subjectmapping.MatchSubjectMappingsRequest]) (*connect.Response[subjectmapping.MatchSubjectMappingsResponse], error)
	ListSubjectMappings(context.Context, *connect.Request[subjectmapping.ListSubjectMappingsRequest]) (*connect.Response[subjectmapping.ListSubjectMappingsResponse], error)
	GetSubjectMapping(context.Context, *connect.Request[subjectmapping.GetSubjectMappingRequest]) (*connect.Response[subjectmapping.GetSubjectMappingResponse], error)
	CreateSubjectMapping(context.Context, *connect.Request[subjectmapping.CreateSubjectMappingRequest]) (*connect.Response[subjectmapping.CreateSubjectMappingResponse], error)
	UpdateSubjectMapping(context.Context, *connect.Request[subjectmapping.UpdateSubjectMappingRequest]) (*connect.Response[subjectmapping.UpdateSubjectMappingResponse], error)
	DeleteSubjectMapping(context.Context, *connect.Request[subjectmapping.DeleteSubjectMappingRequest]) (*connect.Response[subjectmapping.DeleteSubjectMappingResponse], error)
	ListSubjectConditionSets(context.Context, *connect.Request[subjectmapping.ListSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.ListSubjectConditionSetsResponse], error)
	GetSubjectConditionSet(context.Context, *connect.Request[subjectmapping.GetSubjectConditionSetRequest]) (*connect.Response[subjectmapping.GetSubjectConditionSetResponse], error)
	CreateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.CreateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.CreateSubjectConditionSetResponse], error)
	UpdateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.UpdateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.UpdateSubjectConditionSetResponse], error)
	DeleteSubjectConditionSet(context.Context, *connect.Request[subjectmapping.DeleteSubjectConditionSetRequest]) (*connect.Response[subjectmapping.DeleteSubjectConditionSetResponse], error)
	DeleteAllUnmappedSubjectConditionSets(context.Context, *connect.Request[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse], error)
}

// NewSubjectMappingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubjectMappingServiceHandler(svc SubjectMappingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subjectMappingServiceMatchSubjectMappingsHandler := connect.NewUnaryHandler(
		SubjectMappingServiceMatchSubjectMappingsProcedure,
		svc.MatchSubjectMappings,
		connect.WithSchema(subjectMappingServiceMatchSubjectMappingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceListSubjectMappingsHandler := connect.NewUnaryHandler(
		SubjectMappingServiceListSubjectMappingsProcedure,
		svc.ListSubjectMappings,
		connect.WithSchema(subjectMappingServiceListSubjectMappingsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceGetSubjectMappingHandler := connect.NewUnaryHandler(
		SubjectMappingServiceGetSubjectMappingProcedure,
		svc.GetSubjectMapping,
		connect.WithSchema(subjectMappingServiceGetSubjectMappingMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceCreateSubjectMappingHandler := connect.NewUnaryHandler(
		SubjectMappingServiceCreateSubjectMappingProcedure,
		svc.CreateSubjectMapping,
		connect.WithSchema(subjectMappingServiceCreateSubjectMappingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceUpdateSubjectMappingHandler := connect.NewUnaryHandler(
		SubjectMappingServiceUpdateSubjectMappingProcedure,
		svc.UpdateSubjectMapping,
		connect.WithSchema(subjectMappingServiceUpdateSubjectMappingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceDeleteSubjectMappingHandler := connect.NewUnaryHandler(
		SubjectMappingServiceDeleteSubjectMappingProcedure,
		svc.DeleteSubjectMapping,
		connect.WithSchema(subjectMappingServiceDeleteSubjectMappingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceListSubjectConditionSetsHandler := connect.NewUnaryHandler(
		SubjectMappingServiceListSubjectConditionSetsProcedure,
		svc.ListSubjectConditionSets,
		connect.WithSchema(subjectMappingServiceListSubjectConditionSetsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceGetSubjectConditionSetHandler := connect.NewUnaryHandler(
		SubjectMappingServiceGetSubjectConditionSetProcedure,
		svc.GetSubjectConditionSet,
		connect.WithSchema(subjectMappingServiceGetSubjectConditionSetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceCreateSubjectConditionSetHandler := connect.NewUnaryHandler(
		SubjectMappingServiceCreateSubjectConditionSetProcedure,
		svc.CreateSubjectConditionSet,
		connect.WithSchema(subjectMappingServiceCreateSubjectConditionSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceUpdateSubjectConditionSetHandler := connect.NewUnaryHandler(
		SubjectMappingServiceUpdateSubjectConditionSetProcedure,
		svc.UpdateSubjectConditionSet,
		connect.WithSchema(subjectMappingServiceUpdateSubjectConditionSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceDeleteSubjectConditionSetHandler := connect.NewUnaryHandler(
		SubjectMappingServiceDeleteSubjectConditionSetProcedure,
		svc.DeleteSubjectConditionSet,
		connect.WithSchema(subjectMappingServiceDeleteSubjectConditionSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subjectMappingServiceDeleteAllUnmappedSubjectConditionSetsHandler := connect.NewUnaryHandler(
		SubjectMappingServiceDeleteAllUnmappedSubjectConditionSetsProcedure,
		svc.DeleteAllUnmappedSubjectConditionSets,
		connect.WithSchema(subjectMappingServiceDeleteAllUnmappedSubjectConditionSetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/policy.subjectmapping.SubjectMappingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubjectMappingServiceMatchSubjectMappingsProcedure:
			subjectMappingServiceMatchSubjectMappingsHandler.ServeHTTP(w, r)
		case SubjectMappingServiceListSubjectMappingsProcedure:
			subjectMappingServiceListSubjectMappingsHandler.ServeHTTP(w, r)
		case SubjectMappingServiceGetSubjectMappingProcedure:
			subjectMappingServiceGetSubjectMappingHandler.ServeHTTP(w, r)
		case SubjectMappingServiceCreateSubjectMappingProcedure:
			subjectMappingServiceCreateSubjectMappingHandler.ServeHTTP(w, r)
		case SubjectMappingServiceUpdateSubjectMappingProcedure:
			subjectMappingServiceUpdateSubjectMappingHandler.ServeHTTP(w, r)
		case SubjectMappingServiceDeleteSubjectMappingProcedure:
			subjectMappingServiceDeleteSubjectMappingHandler.ServeHTTP(w, r)
		case SubjectMappingServiceListSubjectConditionSetsProcedure:
			subjectMappingServiceListSubjectConditionSetsHandler.ServeHTTP(w, r)
		case SubjectMappingServiceGetSubjectConditionSetProcedure:
			subjectMappingServiceGetSubjectConditionSetHandler.ServeHTTP(w, r)
		case SubjectMappingServiceCreateSubjectConditionSetProcedure:
			subjectMappingServiceCreateSubjectConditionSetHandler.ServeHTTP(w, r)
		case SubjectMappingServiceUpdateSubjectConditionSetProcedure:
			subjectMappingServiceUpdateSubjectConditionSetHandler.ServeHTTP(w, r)
		case SubjectMappingServiceDeleteSubjectConditionSetProcedure:
			subjectMappingServiceDeleteSubjectConditionSetHandler.ServeHTTP(w, r)
		case SubjectMappingServiceDeleteAllUnmappedSubjectConditionSetsProcedure:
			subjectMappingServiceDeleteAllUnmappedSubjectConditionSetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubjectMappingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubjectMappingServiceHandler struct{}

func (UnimplementedSubjectMappingServiceHandler) MatchSubjectMappings(context.Context, *connect.Request[subjectmapping.MatchSubjectMappingsRequest]) (*connect.Response[subjectmapping.MatchSubjectMappingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.MatchSubjectMappings is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) ListSubjectMappings(context.Context, *connect.Request[subjectmapping.ListSubjectMappingsRequest]) (*connect.Response[subjectmapping.ListSubjectMappingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.ListSubjectMappings is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) GetSubjectMapping(context.Context, *connect.Request[subjectmapping.GetSubjectMappingRequest]) (*connect.Response[subjectmapping.GetSubjectMappingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.GetSubjectMapping is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) CreateSubjectMapping(context.Context, *connect.Request[subjectmapping.CreateSubjectMappingRequest]) (*connect.Response[subjectmapping.CreateSubjectMappingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.CreateSubjectMapping is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) UpdateSubjectMapping(context.Context, *connect.Request[subjectmapping.UpdateSubjectMappingRequest]) (*connect.Response[subjectmapping.UpdateSubjectMappingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.UpdateSubjectMapping is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) DeleteSubjectMapping(context.Context, *connect.Request[subjectmapping.DeleteSubjectMappingRequest]) (*connect.Response[subjectmapping.DeleteSubjectMappingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.DeleteSubjectMapping is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) ListSubjectConditionSets(context.Context, *connect.Request[subjectmapping.ListSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.ListSubjectConditionSetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.ListSubjectConditionSets is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) GetSubjectConditionSet(context.Context, *connect.Request[subjectmapping.GetSubjectConditionSetRequest]) (*connect.Response[subjectmapping.GetSubjectConditionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.GetSubjectConditionSet is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) CreateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.CreateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.CreateSubjectConditionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.CreateSubjectConditionSet is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) UpdateSubjectConditionSet(context.Context, *connect.Request[subjectmapping.UpdateSubjectConditionSetRequest]) (*connect.Response[subjectmapping.UpdateSubjectConditionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.UpdateSubjectConditionSet is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) DeleteSubjectConditionSet(context.Context, *connect.Request[subjectmapping.DeleteSubjectConditionSetRequest]) (*connect.Response[subjectmapping.DeleteSubjectConditionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.DeleteSubjectConditionSet is not implemented"))
}

func (UnimplementedSubjectMappingServiceHandler) DeleteAllUnmappedSubjectConditionSets(context.Context, *connect.Request[subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest]) (*connect.Response[subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("policy.subjectmapping.SubjectMappingService.DeleteAllUnmappedSubjectConditionSets is not implemented"))
}
