// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy/unsafe/unsafe.proto

package unsafe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UnsafeService_UnsafeUpdateNamespace_FullMethodName          = "/policy.unsafe.UnsafeService/UnsafeUpdateNamespace"
	UnsafeService_UnsafeReactivateNamespace_FullMethodName      = "/policy.unsafe.UnsafeService/UnsafeReactivateNamespace"
	UnsafeService_UnsafeDeleteNamespace_FullMethodName          = "/policy.unsafe.UnsafeService/UnsafeDeleteNamespace"
	UnsafeService_UnsafeUpdateAttribute_FullMethodName          = "/policy.unsafe.UnsafeService/UnsafeUpdateAttribute"
	UnsafeService_UnsafeReactivateAttribute_FullMethodName      = "/policy.unsafe.UnsafeService/UnsafeReactivateAttribute"
	UnsafeService_UnsafeDeleteAttribute_FullMethodName          = "/policy.unsafe.UnsafeService/UnsafeDeleteAttribute"
	UnsafeService_UnsafeUpdateAttributeValue_FullMethodName     = "/policy.unsafe.UnsafeService/UnsafeUpdateAttributeValue"
	UnsafeService_UnsafeReactivateAttributeValue_FullMethodName = "/policy.unsafe.UnsafeService/UnsafeReactivateAttributeValue"
	UnsafeService_UnsafeDeleteAttributeValue_FullMethodName     = "/policy.unsafe.UnsafeService/UnsafeDeleteAttributeValue"
)

// UnsafeServiceClient is the client API for UnsafeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnsafeServiceClient interface {
	// --------------------------------------*
	// Namespace RPCs
	// ---------------------------------------
	UnsafeUpdateNamespace(ctx context.Context, in *UnsafeUpdateNamespaceRequest, opts ...grpc.CallOption) (*UnsafeUpdateNamespaceResponse, error)
	UnsafeReactivateNamespace(ctx context.Context, in *UnsafeReactivateNamespaceRequest, opts ...grpc.CallOption) (*UnsafeReactivateNamespaceResponse, error)
	UnsafeDeleteNamespace(ctx context.Context, in *UnsafeDeleteNamespaceRequest, opts ...grpc.CallOption) (*UnsafeDeleteNamespaceResponse, error)
	// --------------------------------------*
	// Attribute RPCs
	// ---------------------------------------
	UnsafeUpdateAttribute(ctx context.Context, in *UnsafeUpdateAttributeRequest, opts ...grpc.CallOption) (*UnsafeUpdateAttributeResponse, error)
	UnsafeReactivateAttribute(ctx context.Context, in *UnsafeReactivateAttributeRequest, opts ...grpc.CallOption) (*UnsafeReactivateAttributeResponse, error)
	UnsafeDeleteAttribute(ctx context.Context, in *UnsafeDeleteAttributeRequest, opts ...grpc.CallOption) (*UnsafeDeleteAttributeResponse, error)
	// --------------------------------------*
	// Value RPCs
	// ---------------------------------------
	UnsafeUpdateAttributeValue(ctx context.Context, in *UnsafeUpdateAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeUpdateAttributeValueResponse, error)
	UnsafeReactivateAttributeValue(ctx context.Context, in *UnsafeReactivateAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeReactivateAttributeValueResponse, error)
	UnsafeDeleteAttributeValue(ctx context.Context, in *UnsafeDeleteAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeDeleteAttributeValueResponse, error)
}

type unsafeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnsafeServiceClient(cc grpc.ClientConnInterface) UnsafeServiceClient {
	return &unsafeServiceClient{cc}
}

func (c *unsafeServiceClient) UnsafeUpdateNamespace(ctx context.Context, in *UnsafeUpdateNamespaceRequest, opts ...grpc.CallOption) (*UnsafeUpdateNamespaceResponse, error) {
	out := new(UnsafeUpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeUpdateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeReactivateNamespace(ctx context.Context, in *UnsafeReactivateNamespaceRequest, opts ...grpc.CallOption) (*UnsafeReactivateNamespaceResponse, error) {
	out := new(UnsafeReactivateNamespaceResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeReactivateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeDeleteNamespace(ctx context.Context, in *UnsafeDeleteNamespaceRequest, opts ...grpc.CallOption) (*UnsafeDeleteNamespaceResponse, error) {
	out := new(UnsafeDeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeDeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeUpdateAttribute(ctx context.Context, in *UnsafeUpdateAttributeRequest, opts ...grpc.CallOption) (*UnsafeUpdateAttributeResponse, error) {
	out := new(UnsafeUpdateAttributeResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeUpdateAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeReactivateAttribute(ctx context.Context, in *UnsafeReactivateAttributeRequest, opts ...grpc.CallOption) (*UnsafeReactivateAttributeResponse, error) {
	out := new(UnsafeReactivateAttributeResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeReactivateAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeDeleteAttribute(ctx context.Context, in *UnsafeDeleteAttributeRequest, opts ...grpc.CallOption) (*UnsafeDeleteAttributeResponse, error) {
	out := new(UnsafeDeleteAttributeResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeDeleteAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeUpdateAttributeValue(ctx context.Context, in *UnsafeUpdateAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeUpdateAttributeValueResponse, error) {
	out := new(UnsafeUpdateAttributeValueResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeUpdateAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeReactivateAttributeValue(ctx context.Context, in *UnsafeReactivateAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeReactivateAttributeValueResponse, error) {
	out := new(UnsafeReactivateAttributeValueResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeReactivateAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsafeServiceClient) UnsafeDeleteAttributeValue(ctx context.Context, in *UnsafeDeleteAttributeValueRequest, opts ...grpc.CallOption) (*UnsafeDeleteAttributeValueResponse, error) {
	out := new(UnsafeDeleteAttributeValueResponse)
	err := c.cc.Invoke(ctx, UnsafeService_UnsafeDeleteAttributeValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnsafeServiceServer is the server API for UnsafeService service.
// All implementations must embed UnimplementedUnsafeServiceServer
// for forward compatibility
type UnsafeServiceServer interface {
	// --------------------------------------*
	// Namespace RPCs
	// ---------------------------------------
	UnsafeUpdateNamespace(context.Context, *UnsafeUpdateNamespaceRequest) (*UnsafeUpdateNamespaceResponse, error)
	UnsafeReactivateNamespace(context.Context, *UnsafeReactivateNamespaceRequest) (*UnsafeReactivateNamespaceResponse, error)
	UnsafeDeleteNamespace(context.Context, *UnsafeDeleteNamespaceRequest) (*UnsafeDeleteNamespaceResponse, error)
	// --------------------------------------*
	// Attribute RPCs
	// ---------------------------------------
	UnsafeUpdateAttribute(context.Context, *UnsafeUpdateAttributeRequest) (*UnsafeUpdateAttributeResponse, error)
	UnsafeReactivateAttribute(context.Context, *UnsafeReactivateAttributeRequest) (*UnsafeReactivateAttributeResponse, error)
	UnsafeDeleteAttribute(context.Context, *UnsafeDeleteAttributeRequest) (*UnsafeDeleteAttributeResponse, error)
	// --------------------------------------*
	// Value RPCs
	// ---------------------------------------
	UnsafeUpdateAttributeValue(context.Context, *UnsafeUpdateAttributeValueRequest) (*UnsafeUpdateAttributeValueResponse, error)
	UnsafeReactivateAttributeValue(context.Context, *UnsafeReactivateAttributeValueRequest) (*UnsafeReactivateAttributeValueResponse, error)
	UnsafeDeleteAttributeValue(context.Context, *UnsafeDeleteAttributeValueRequest) (*UnsafeDeleteAttributeValueResponse, error)
	mustEmbedUnimplementedUnsafeServiceServer()
}

// UnimplementedUnsafeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnsafeServiceServer struct {
}

func (UnimplementedUnsafeServiceServer) UnsafeUpdateNamespace(context.Context, *UnsafeUpdateNamespaceRequest) (*UnsafeUpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeUpdateNamespace not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeReactivateNamespace(context.Context, *UnsafeReactivateNamespaceRequest) (*UnsafeReactivateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeReactivateNamespace not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeDeleteNamespace(context.Context, *UnsafeDeleteNamespaceRequest) (*UnsafeDeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeDeleteNamespace not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeUpdateAttribute(context.Context, *UnsafeUpdateAttributeRequest) (*UnsafeUpdateAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeUpdateAttribute not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeReactivateAttribute(context.Context, *UnsafeReactivateAttributeRequest) (*UnsafeReactivateAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeReactivateAttribute not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeDeleteAttribute(context.Context, *UnsafeDeleteAttributeRequest) (*UnsafeDeleteAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeDeleteAttribute not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeUpdateAttributeValue(context.Context, *UnsafeUpdateAttributeValueRequest) (*UnsafeUpdateAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeUpdateAttributeValue not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeReactivateAttributeValue(context.Context, *UnsafeReactivateAttributeValueRequest) (*UnsafeReactivateAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeReactivateAttributeValue not implemented")
}
func (UnimplementedUnsafeServiceServer) UnsafeDeleteAttributeValue(context.Context, *UnsafeDeleteAttributeValueRequest) (*UnsafeDeleteAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeDeleteAttributeValue not implemented")
}
func (UnimplementedUnsafeServiceServer) mustEmbedUnimplementedUnsafeServiceServer() {}

// UnsafeUnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnsafeServiceServer will
// result in compilation errors.
type UnsafeUnsafeServiceServer interface {
	mustEmbedUnimplementedUnsafeServiceServer()
}

func RegisterUnsafeServiceServer(s grpc.ServiceRegistrar, srv UnsafeServiceServer) {
	s.RegisterService(&UnsafeService_ServiceDesc, srv)
}

func _UnsafeService_UnsafeUpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeUpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeUpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeUpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeUpdateNamespace(ctx, req.(*UnsafeUpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeReactivateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeReactivateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeReactivateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeReactivateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeReactivateNamespace(ctx, req.(*UnsafeReactivateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeDeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeDeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeDeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeDeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeDeleteNamespace(ctx, req.(*UnsafeDeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeUpdateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeUpdateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeUpdateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeUpdateAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeUpdateAttribute(ctx, req.(*UnsafeUpdateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeReactivateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeReactivateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeReactivateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeReactivateAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeReactivateAttribute(ctx, req.(*UnsafeReactivateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeDeleteAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeDeleteAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeDeleteAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeDeleteAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeDeleteAttribute(ctx, req.(*UnsafeDeleteAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeUpdateAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeUpdateAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeUpdateAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeUpdateAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeUpdateAttributeValue(ctx, req.(*UnsafeUpdateAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeReactivateAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeReactivateAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeReactivateAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeReactivateAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeReactivateAttributeValue(ctx, req.(*UnsafeReactivateAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsafeService_UnsafeDeleteAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsafeDeleteAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsafeServiceServer).UnsafeDeleteAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnsafeService_UnsafeDeleteAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsafeServiceServer).UnsafeDeleteAttributeValue(ctx, req.(*UnsafeDeleteAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnsafeService_ServiceDesc is the grpc.ServiceDesc for UnsafeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnsafeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.unsafe.UnsafeService",
	HandlerType: (*UnsafeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnsafeUpdateNamespace",
			Handler:    _UnsafeService_UnsafeUpdateNamespace_Handler,
		},
		{
			MethodName: "UnsafeReactivateNamespace",
			Handler:    _UnsafeService_UnsafeReactivateNamespace_Handler,
		},
		{
			MethodName: "UnsafeDeleteNamespace",
			Handler:    _UnsafeService_UnsafeDeleteNamespace_Handler,
		},
		{
			MethodName: "UnsafeUpdateAttribute",
			Handler:    _UnsafeService_UnsafeUpdateAttribute_Handler,
		},
		{
			MethodName: "UnsafeReactivateAttribute",
			Handler:    _UnsafeService_UnsafeReactivateAttribute_Handler,
		},
		{
			MethodName: "UnsafeDeleteAttribute",
			Handler:    _UnsafeService_UnsafeDeleteAttribute_Handler,
		},
		{
			MethodName: "UnsafeUpdateAttributeValue",
			Handler:    _UnsafeService_UnsafeUpdateAttributeValue_Handler,
		},
		{
			MethodName: "UnsafeReactivateAttributeValue",
			Handler:    _UnsafeService_UnsafeReactivateAttributeValue_Handler,
		},
		{
			MethodName: "UnsafeDeleteAttributeValue",
			Handler:    _UnsafeService_UnsafeDeleteAttributeValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/unsafe/unsafe.proto",
}
