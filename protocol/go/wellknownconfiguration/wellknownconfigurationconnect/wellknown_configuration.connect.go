// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wellknownconfiguration/wellknown_configuration.proto

package wellknownconfigurationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	wellknownconfiguration "github.com/opentdf/platform/protocol/go/wellknownconfiguration"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WellKnownServiceName is the fully-qualified name of the WellKnownService service.
	WellKnownServiceName = "wellknownconfiguration.WellKnownService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WellKnownServiceGetWellKnownConfigurationProcedure is the fully-qualified name of the
	// WellKnownService's GetWellKnownConfiguration RPC.
	WellKnownServiceGetWellKnownConfigurationProcedure = "/wellknownconfiguration.WellKnownService/GetWellKnownConfiguration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	wellKnownServiceServiceDescriptor                         = wellknownconfiguration.File_wellknownconfiguration_wellknown_configuration_proto.Services().ByName("WellKnownService")
	wellKnownServiceGetWellKnownConfigurationMethodDescriptor = wellKnownServiceServiceDescriptor.Methods().ByName("GetWellKnownConfiguration")
)

// WellKnownServiceClient is a client for the wellknownconfiguration.WellKnownService service.
type WellKnownServiceClient interface {
	GetWellKnownConfiguration(context.Context, *connect.Request[wellknownconfiguration.GetWellKnownConfigurationRequest]) (*connect.Response[wellknownconfiguration.GetWellKnownConfigurationResponse], error)
}

// NewWellKnownServiceClient constructs a client for the wellknownconfiguration.WellKnownService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWellKnownServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WellKnownServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wellKnownServiceClient{
		getWellKnownConfiguration: connect.NewClient[wellknownconfiguration.GetWellKnownConfigurationRequest, wellknownconfiguration.GetWellKnownConfigurationResponse](
			httpClient,
			baseURL+WellKnownServiceGetWellKnownConfigurationProcedure,
			connect.WithSchema(wellKnownServiceGetWellKnownConfigurationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// wellKnownServiceClient implements WellKnownServiceClient.
type wellKnownServiceClient struct {
	getWellKnownConfiguration *connect.Client[wellknownconfiguration.GetWellKnownConfigurationRequest, wellknownconfiguration.GetWellKnownConfigurationResponse]
}

// GetWellKnownConfiguration calls
// wellknownconfiguration.WellKnownService.GetWellKnownConfiguration.
func (c *wellKnownServiceClient) GetWellKnownConfiguration(ctx context.Context, req *connect.Request[wellknownconfiguration.GetWellKnownConfigurationRequest]) (*connect.Response[wellknownconfiguration.GetWellKnownConfigurationResponse], error) {
	return c.getWellKnownConfiguration.CallUnary(ctx, req)
}

// WellKnownServiceHandler is an implementation of the wellknownconfiguration.WellKnownService
// service.
type WellKnownServiceHandler interface {
	GetWellKnownConfiguration(context.Context, *connect.Request[wellknownconfiguration.GetWellKnownConfigurationRequest]) (*connect.Response[wellknownconfiguration.GetWellKnownConfigurationResponse], error)
}

// NewWellKnownServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWellKnownServiceHandler(svc WellKnownServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wellKnownServiceGetWellKnownConfigurationHandler := connect.NewUnaryHandler(
		WellKnownServiceGetWellKnownConfigurationProcedure,
		svc.GetWellKnownConfiguration,
		connect.WithSchema(wellKnownServiceGetWellKnownConfigurationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/wellknownconfiguration.WellKnownService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WellKnownServiceGetWellKnownConfigurationProcedure:
			wellKnownServiceGetWellKnownConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWellKnownServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWellKnownServiceHandler struct{}

func (UnimplementedWellKnownServiceHandler) GetWellKnownConfiguration(context.Context, *connect.Request[wellknownconfiguration.GetWellKnownConfigurationRequest]) (*connect.Response[wellknownconfiguration.GetWellKnownConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wellknownconfiguration.WellKnownService.GetWellKnownConfiguration is not implemented"))
}
