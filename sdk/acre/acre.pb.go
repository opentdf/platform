// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: acre/acre.proto

package acre

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	attributes "github.com/opentdf/opentdf-v2-poc/sdk/attributes"
	common "github.com/opentdf/opentdf-v2-poc/sdk/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A modular set of terms that are the "same".  Could be used across resource mappings
type Synonyms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *common.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	Terms       []string                   `protobuf:"bytes,2,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *Synonyms) Reset() {
	*x = Synonyms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Synonyms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Synonyms) ProtoMessage() {}

func (x *Synonyms) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Synonyms.ProtoReflect.Descriptor instead.
func (*Synonyms) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{0}
}

func (x *Synonyms) GetDescriptor_() *common.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *Synonyms) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

// Map one or more domain specific terms (synonyms) to an attribute value by reference.
//
// Example:
// attributeValueRef: ref http://demo.com/attr/Classification/value/Confidential
// synonymRef:
// terms: ["CONFIDENTIAL", "CONTROLLED UNCLASSIFIED", "OFFICIAL-SENSITIVE", "CUI", "C"]
//
// Example 2:
// attributeValueRef: ref to http://demo.com/attr/Classification/Confidential
// synonymRef:
// terms: ["OFFICIAL-SENSITIVE"]
type ResourceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_       *common.ResourceDescriptor          `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	AttributeValueRef *attributes.AttributeValueReference `protobuf:"bytes,2,opt,name=attribute_value_ref,json=attributeValueRef,proto3" json:"attribute_value_ref,omitempty"`
	SynonymRef        *SynonymRef                         `protobuf:"bytes,3,opt,name=synonym_ref,json=synonymRef,proto3" json:"synonym_ref,omitempty"`
}

func (x *ResourceMapping) Reset() {
	*x = ResourceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMapping) ProtoMessage() {}

func (x *ResourceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMapping.ProtoReflect.Descriptor instead.
func (*ResourceMapping) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceMapping) GetDescriptor_() *common.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceMapping) GetAttributeValueRef() *attributes.AttributeValueReference {
	if x != nil {
		return x.AttributeValueRef
	}
	return nil
}

func (x *ResourceMapping) GetSynonymRef() *SynonymRef {
	if x != nil {
		return x.SynonymRef
	}
	return nil
}

// represents modeling an resource code/tag as a group . Use if not in the bounds of an attribute
// definition.  Otherwise use attributes.AttributeGroup
//
// Example:
// value: NATO
// members: [USA, GBR, etc.]
type ResourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *common.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// group value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// List of member values
	Members []string `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ResourceGroup) Reset() {
	*x = ResourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroup) ProtoMessage() {}

func (x *ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroup.ProtoReflect.Descriptor instead.
func (*ResourceGroup) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceGroup) GetDescriptor_() *common.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceGroup) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResourceGroup) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

// Reference to a ResourceMapping, one of descriptor or embedded value
type ResourceMappingRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*ResourceMappingRef_Descriptor_
	//	*ResourceMappingRef_ResourceMapping
	Ref isResourceMappingRef_Ref `protobuf_oneof:"ref"`
}

func (x *ResourceMappingRef) Reset() {
	*x = ResourceMappingRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMappingRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMappingRef) ProtoMessage() {}

func (x *ResourceMappingRef) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMappingRef.ProtoReflect.Descriptor instead.
func (*ResourceMappingRef) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{3}
}

func (m *ResourceMappingRef) GetRef() isResourceMappingRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *ResourceMappingRef) GetDescriptor_() *common.ResourceDescriptor {
	if x, ok := x.GetRef().(*ResourceMappingRef_Descriptor_); ok {
		return x.Descriptor_
	}
	return nil
}

func (x *ResourceMappingRef) GetResourceMapping() *ResourceMapping {
	if x, ok := x.GetRef().(*ResourceMappingRef_ResourceMapping); ok {
		return x.ResourceMapping
	}
	return nil
}

type isResourceMappingRef_Ref interface {
	isResourceMappingRef_Ref()
}

type ResourceMappingRef_Descriptor_ struct {
	Descriptor_ *common.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3,oneof"`
}

type ResourceMappingRef_ResourceMapping struct {
	ResourceMapping *ResourceMapping `protobuf:"bytes,2,opt,name=resource_mapping,json=resourceMapping,proto3,oneof"`
}

func (*ResourceMappingRef_Descriptor_) isResourceMappingRef_Ref() {}

func (*ResourceMappingRef_ResourceMapping) isResourceMappingRef_Ref() {}

// Reference to a Synonyms, one of descriptor or embedded value
type SynonymRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*SynonymRef_Descriptor_
	//	*SynonymRef_Synonyms
	Ref isSynonymRef_Ref `protobuf_oneof:"ref"`
}

func (x *SynonymRef) Reset() {
	*x = SynonymRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynonymRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynonymRef) ProtoMessage() {}

func (x *SynonymRef) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynonymRef.ProtoReflect.Descriptor instead.
func (*SynonymRef) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{4}
}

func (m *SynonymRef) GetRef() isSynonymRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *SynonymRef) GetDescriptor_() *common.ResourceDescriptor {
	if x, ok := x.GetRef().(*SynonymRef_Descriptor_); ok {
		return x.Descriptor_
	}
	return nil
}

func (x *SynonymRef) GetSynonyms() *Synonyms {
	if x, ok := x.GetRef().(*SynonymRef_Synonyms); ok {
		return x.Synonyms
	}
	return nil
}

type isSynonymRef_Ref interface {
	isSynonymRef_Ref()
}

type SynonymRef_Descriptor_ struct {
	Descriptor_ *common.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3,oneof"`
}

type SynonymRef_Synonyms struct {
	Synonyms *Synonyms `protobuf:"bytes,2,opt,name=synonyms,proto3,oneof"`
}

func (*SynonymRef_Descriptor_) isSynonymRef_Ref() {}

func (*SynonymRef_Synonyms) isSynonymRef_Ref() {}

type ResourceEncodingRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *common.ResourceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
}

func (x *ResourceEncodingRequestOptions) Reset() {
	*x = ResourceEncodingRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceEncodingRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEncodingRequestOptions) ProtoMessage() {}

func (x *ResourceEncodingRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEncodingRequestOptions.ProtoReflect.Descriptor instead.
func (*ResourceEncodingRequestOptions) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceEncodingRequestOptions) GetDescriptor_() *common.ResourceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

type ListResourceMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *common.ResourceSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ListResourceMappingsRequest) Reset() {
	*x = ListResourceMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceMappingsRequest) ProtoMessage() {}

func (x *ListResourceMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceMappingsRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{6}
}

func (x *ListResourceMappingsRequest) GetSelector() *common.ResourceSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type ListResourceMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings []*ResourceMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *ListResourceMappingsResponse) Reset() {
	*x = ListResourceMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceMappingsResponse) ProtoMessage() {}

func (x *ListResourceMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceMappingsResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{7}
}

func (x *ListResourceMappingsResponse) GetMappings() []*ResourceMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type GetResourceMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetResourceMappingRequest) Reset() {
	*x = GetResourceMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceMappingRequest) ProtoMessage() {}

func (x *GetResourceMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceMappingRequest.ProtoReflect.Descriptor instead.
func (*GetResourceMappingRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{8}
}

func (x *GetResourceMappingRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetResourceMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping *ResourceMapping `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *GetResourceMappingResponse) Reset() {
	*x = GetResourceMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceMappingResponse) ProtoMessage() {}

func (x *GetResourceMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceMappingResponse.ProtoReflect.Descriptor instead.
func (*GetResourceMappingResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{9}
}

func (x *GetResourceMappingResponse) GetMapping() *ResourceMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type CreateResourceMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping *ResourceMapping `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *CreateResourceMappingRequest) Reset() {
	*x = CreateResourceMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceMappingRequest) ProtoMessage() {}

func (x *CreateResourceMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceMappingRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{10}
}

func (x *CreateResourceMappingRequest) GetMapping() *ResourceMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type CreateResourceMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResourceMappingResponse) Reset() {
	*x = CreateResourceMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceMappingResponse) ProtoMessage() {}

func (x *CreateResourceMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceMappingResponse.ProtoReflect.Descriptor instead.
func (*CreateResourceMappingResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{11}
}

type UpdateResourceMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mapping *ResourceMapping `protobuf:"bytes,2,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *UpdateResourceMappingRequest) Reset() {
	*x = UpdateResourceMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceMappingRequest) ProtoMessage() {}

func (x *UpdateResourceMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceMappingRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateResourceMappingRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateResourceMappingRequest) GetMapping() *ResourceMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type UpdateResourceMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourceMappingResponse) Reset() {
	*x = UpdateResourceMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceMappingResponse) ProtoMessage() {}

func (x *UpdateResourceMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceMappingResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourceMappingResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{13}
}

type DeleteResourceMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteResourceMappingRequest) Reset() {
	*x = DeleteResourceMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceMappingRequest) ProtoMessage() {}

func (x *DeleteResourceMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceMappingRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteResourceMappingRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteResourceMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceMappingResponse) Reset() {
	*x = DeleteResourceMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceMappingResponse) ProtoMessage() {}

func (x *DeleteResourceMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceMappingResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceMappingResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{15}
}

type ListResourceSynonymsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *common.ResourceSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ListResourceSynonymsRequest) Reset() {
	*x = ListResourceSynonymsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceSynonymsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceSynonymsRequest) ProtoMessage() {}

func (x *ListResourceSynonymsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceSynonymsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceSynonymsRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{16}
}

func (x *ListResourceSynonymsRequest) GetSelector() *common.ResourceSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type ListResourceSynonymsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Synonyms []*Synonyms `protobuf:"bytes,1,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
}

func (x *ListResourceSynonymsResponse) Reset() {
	*x = ListResourceSynonymsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceSynonymsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceSynonymsResponse) ProtoMessage() {}

func (x *ListResourceSynonymsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceSynonymsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceSynonymsResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{17}
}

func (x *ListResourceSynonymsResponse) GetSynonyms() []*Synonyms {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

type GetResourceSynonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetResourceSynonymRequest) Reset() {
	*x = GetResourceSynonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceSynonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceSynonymRequest) ProtoMessage() {}

func (x *GetResourceSynonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceSynonymRequest.ProtoReflect.Descriptor instead.
func (*GetResourceSynonymRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{18}
}

func (x *GetResourceSynonymRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetResourceSynonymResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Synonym *Synonyms `protobuf:"bytes,1,opt,name=synonym,proto3" json:"synonym,omitempty"`
}

func (x *GetResourceSynonymResponse) Reset() {
	*x = GetResourceSynonymResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceSynonymResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceSynonymResponse) ProtoMessage() {}

func (x *GetResourceSynonymResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceSynonymResponse.ProtoReflect.Descriptor instead.
func (*GetResourceSynonymResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{19}
}

func (x *GetResourceSynonymResponse) GetSynonym() *Synonyms {
	if x != nil {
		return x.Synonym
	}
	return nil
}

type CreateResourceSynonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Synonym *Synonyms `protobuf:"bytes,1,opt,name=synonym,proto3" json:"synonym,omitempty"`
}

func (x *CreateResourceSynonymRequest) Reset() {
	*x = CreateResourceSynonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceSynonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceSynonymRequest) ProtoMessage() {}

func (x *CreateResourceSynonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceSynonymRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceSynonymRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{20}
}

func (x *CreateResourceSynonymRequest) GetSynonym() *Synonyms {
	if x != nil {
		return x.Synonym
	}
	return nil
}

type CreateResourceSynonymResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResourceSynonymResponse) Reset() {
	*x = CreateResourceSynonymResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceSynonymResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceSynonymResponse) ProtoMessage() {}

func (x *CreateResourceSynonymResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceSynonymResponse.ProtoReflect.Descriptor instead.
func (*CreateResourceSynonymResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{21}
}

type UpdateResourceSynonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Synonym *Synonyms `protobuf:"bytes,2,opt,name=synonym,proto3" json:"synonym,omitempty"`
}

func (x *UpdateResourceSynonymRequest) Reset() {
	*x = UpdateResourceSynonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceSynonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceSynonymRequest) ProtoMessage() {}

func (x *UpdateResourceSynonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceSynonymRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceSynonymRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateResourceSynonymRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateResourceSynonymRequest) GetSynonym() *Synonyms {
	if x != nil {
		return x.Synonym
	}
	return nil
}

type UpdateResourceSynonymResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourceSynonymResponse) Reset() {
	*x = UpdateResourceSynonymResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceSynonymResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceSynonymResponse) ProtoMessage() {}

func (x *UpdateResourceSynonymResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceSynonymResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourceSynonymResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{23}
}

type DeleteResourceSynonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteResourceSynonymRequest) Reset() {
	*x = DeleteResourceSynonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceSynonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceSynonymRequest) ProtoMessage() {}

func (x *DeleteResourceSynonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceSynonymRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceSynonymRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteResourceSynonymRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteResourceSynonymResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceSynonymResponse) Reset() {
	*x = DeleteResourceSynonymResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceSynonymResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceSynonymResponse) ProtoMessage() {}

func (x *DeleteResourceSynonymResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceSynonymResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceSynonymResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{25}
}

// Resource Groups
type ListResourceGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *common.ResourceSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ListResourceGroupsRequest) Reset() {
	*x = ListResourceGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceGroupsRequest) ProtoMessage() {}

func (x *ListResourceGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceGroupsRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{26}
}

func (x *ListResourceGroupsRequest) GetSelector() *common.ResourceSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type ListResourceGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*ResourceGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListResourceGroupsResponse) Reset() {
	*x = ListResourceGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceGroupsResponse) ProtoMessage() {}

func (x *ListResourceGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListResourceGroupsResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{27}
}

func (x *ListResourceGroupsResponse) GetGroups() []*ResourceGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetResourceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetResourceGroupRequest) Reset() {
	*x = GetResourceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceGroupRequest) ProtoMessage() {}

func (x *GetResourceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceGroupRequest.ProtoReflect.Descriptor instead.
func (*GetResourceGroupRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{28}
}

func (x *GetResourceGroupRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetResourceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *ResourceGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetResourceGroupResponse) Reset() {
	*x = GetResourceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceGroupResponse) ProtoMessage() {}

func (x *GetResourceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceGroupResponse.ProtoReflect.Descriptor instead.
func (*GetResourceGroupResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{29}
}

func (x *GetResourceGroupResponse) GetGroup() *ResourceGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type CreateResourceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *ResourceGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CreateResourceGroupRequest) Reset() {
	*x = CreateResourceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceGroupRequest) ProtoMessage() {}

func (x *CreateResourceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceGroupRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{30}
}

func (x *CreateResourceGroupRequest) GetGroup() *ResourceGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type CreateResourceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateResourceGroupResponse) Reset() {
	*x = CreateResourceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceGroupResponse) ProtoMessage() {}

func (x *CreateResourceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateResourceGroupResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{31}
}

type UpdateResourceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Group *ResourceGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdateResourceGroupRequest) Reset() {
	*x = UpdateResourceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceGroupRequest) ProtoMessage() {}

func (x *UpdateResourceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceGroupRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateResourceGroupRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateResourceGroupRequest) GetGroup() *ResourceGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type UpdateResourceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourceGroupResponse) Reset() {
	*x = UpdateResourceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceGroupResponse) ProtoMessage() {}

func (x *UpdateResourceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourceGroupResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{33}
}

type DeleteResourceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteResourceGroupRequest) Reset() {
	*x = DeleteResourceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceGroupRequest) ProtoMessage() {}

func (x *DeleteResourceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceGroupRequest) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteResourceGroupRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteResourceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceGroupResponse) Reset() {
	*x = DeleteResourceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acre_acre_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceGroupResponse) ProtoMessage() {}

func (x *DeleteResourceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acre_acre_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceGroupResponse) Descriptor() ([]byte, []int) {
	return file_acre_acre_proto_rawDescGZIP(), []int{35}
}

var File_acre_acre_proto protoreflect.FileDescriptor

var file_acre_acre_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x63, 0x72, 0x65, 0x2f, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x61, 0x63, 0x72, 0x65, 0x1a, 0x1b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x63, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x66, 0x52, 0x0a,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x66, 0x22, 0x7b, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x3c,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22, 0x7f, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x73, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x22, 0x5c, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x33,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x22, 0x57, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1f, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1f, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x63, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x52, 0x07, 0x73, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x53, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x49, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x4f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1d, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xce, 0x10, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x61, 0x63,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x63, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x96, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x63, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x12, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x22,
	0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x63,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x7c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1c, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x42, 0x71, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x72, 0x65, 0x42, 0x09,
	0x41, 0x63, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2d, 0x76, 0x32, 0x2d, 0x70, 0x6f, 0x63, 0x2f, 0x73,
	0x64, 0x6b, 0x2f, 0x61, 0x63, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x04,
	0x41, 0x63, 0x72, 0x65, 0xca, 0x02, 0x04, 0x41, 0x63, 0x72, 0x65, 0xe2, 0x02, 0x10, 0x41, 0x63,
	0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x04, 0x41, 0x63, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acre_acre_proto_rawDescOnce sync.Once
	file_acre_acre_proto_rawDescData = file_acre_acre_proto_rawDesc
)

func file_acre_acre_proto_rawDescGZIP() []byte {
	file_acre_acre_proto_rawDescOnce.Do(func() {
		file_acre_acre_proto_rawDescData = protoimpl.X.CompressGZIP(file_acre_acre_proto_rawDescData)
	})
	return file_acre_acre_proto_rawDescData
}

var file_acre_acre_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_acre_acre_proto_goTypes = []interface{}{
	(*Synonyms)(nil),                           // 0: acre.Synonyms
	(*ResourceMapping)(nil),                    // 1: acre.ResourceMapping
	(*ResourceGroup)(nil),                      // 2: acre.ResourceGroup
	(*ResourceMappingRef)(nil),                 // 3: acre.ResourceMappingRef
	(*SynonymRef)(nil),                         // 4: acre.SynonymRef
	(*ResourceEncodingRequestOptions)(nil),     // 5: acre.ResourceEncodingRequestOptions
	(*ListResourceMappingsRequest)(nil),        // 6: acre.ListResourceMappingsRequest
	(*ListResourceMappingsResponse)(nil),       // 7: acre.ListResourceMappingsResponse
	(*GetResourceMappingRequest)(nil),          // 8: acre.GetResourceMappingRequest
	(*GetResourceMappingResponse)(nil),         // 9: acre.GetResourceMappingResponse
	(*CreateResourceMappingRequest)(nil),       // 10: acre.CreateResourceMappingRequest
	(*CreateResourceMappingResponse)(nil),      // 11: acre.CreateResourceMappingResponse
	(*UpdateResourceMappingRequest)(nil),       // 12: acre.UpdateResourceMappingRequest
	(*UpdateResourceMappingResponse)(nil),      // 13: acre.UpdateResourceMappingResponse
	(*DeleteResourceMappingRequest)(nil),       // 14: acre.DeleteResourceMappingRequest
	(*DeleteResourceMappingResponse)(nil),      // 15: acre.DeleteResourceMappingResponse
	(*ListResourceSynonymsRequest)(nil),        // 16: acre.ListResourceSynonymsRequest
	(*ListResourceSynonymsResponse)(nil),       // 17: acre.ListResourceSynonymsResponse
	(*GetResourceSynonymRequest)(nil),          // 18: acre.GetResourceSynonymRequest
	(*GetResourceSynonymResponse)(nil),         // 19: acre.GetResourceSynonymResponse
	(*CreateResourceSynonymRequest)(nil),       // 20: acre.CreateResourceSynonymRequest
	(*CreateResourceSynonymResponse)(nil),      // 21: acre.CreateResourceSynonymResponse
	(*UpdateResourceSynonymRequest)(nil),       // 22: acre.UpdateResourceSynonymRequest
	(*UpdateResourceSynonymResponse)(nil),      // 23: acre.UpdateResourceSynonymResponse
	(*DeleteResourceSynonymRequest)(nil),       // 24: acre.DeleteResourceSynonymRequest
	(*DeleteResourceSynonymResponse)(nil),      // 25: acre.DeleteResourceSynonymResponse
	(*ListResourceGroupsRequest)(nil),          // 26: acre.ListResourceGroupsRequest
	(*ListResourceGroupsResponse)(nil),         // 27: acre.ListResourceGroupsResponse
	(*GetResourceGroupRequest)(nil),            // 28: acre.GetResourceGroupRequest
	(*GetResourceGroupResponse)(nil),           // 29: acre.GetResourceGroupResponse
	(*CreateResourceGroupRequest)(nil),         // 30: acre.CreateResourceGroupRequest
	(*CreateResourceGroupResponse)(nil),        // 31: acre.CreateResourceGroupResponse
	(*UpdateResourceGroupRequest)(nil),         // 32: acre.UpdateResourceGroupRequest
	(*UpdateResourceGroupResponse)(nil),        // 33: acre.UpdateResourceGroupResponse
	(*DeleteResourceGroupRequest)(nil),         // 34: acre.DeleteResourceGroupRequest
	(*DeleteResourceGroupResponse)(nil),        // 35: acre.DeleteResourceGroupResponse
	(*common.ResourceDescriptor)(nil),          // 36: common.ResourceDescriptor
	(*attributes.AttributeValueReference)(nil), // 37: attributes.AttributeValueReference
	(*common.ResourceSelector)(nil),            // 38: common.ResourceSelector
}
var file_acre_acre_proto_depIdxs = []int32{
	36, // 0: acre.Synonyms.descriptor:type_name -> common.ResourceDescriptor
	36, // 1: acre.ResourceMapping.descriptor:type_name -> common.ResourceDescriptor
	37, // 2: acre.ResourceMapping.attribute_value_ref:type_name -> attributes.AttributeValueReference
	4,  // 3: acre.ResourceMapping.synonym_ref:type_name -> acre.SynonymRef
	36, // 4: acre.ResourceGroup.descriptor:type_name -> common.ResourceDescriptor
	36, // 5: acre.ResourceMappingRef.descriptor:type_name -> common.ResourceDescriptor
	1,  // 6: acre.ResourceMappingRef.resource_mapping:type_name -> acre.ResourceMapping
	36, // 7: acre.SynonymRef.descriptor:type_name -> common.ResourceDescriptor
	0,  // 8: acre.SynonymRef.synonyms:type_name -> acre.Synonyms
	36, // 9: acre.ResourceEncodingRequestOptions.descriptor:type_name -> common.ResourceDescriptor
	38, // 10: acre.ListResourceMappingsRequest.selector:type_name -> common.ResourceSelector
	1,  // 11: acre.ListResourceMappingsResponse.mappings:type_name -> acre.ResourceMapping
	1,  // 12: acre.GetResourceMappingResponse.mapping:type_name -> acre.ResourceMapping
	1,  // 13: acre.CreateResourceMappingRequest.mapping:type_name -> acre.ResourceMapping
	1,  // 14: acre.UpdateResourceMappingRequest.mapping:type_name -> acre.ResourceMapping
	38, // 15: acre.ListResourceSynonymsRequest.selector:type_name -> common.ResourceSelector
	0,  // 16: acre.ListResourceSynonymsResponse.synonyms:type_name -> acre.Synonyms
	0,  // 17: acre.GetResourceSynonymResponse.synonym:type_name -> acre.Synonyms
	0,  // 18: acre.CreateResourceSynonymRequest.synonym:type_name -> acre.Synonyms
	0,  // 19: acre.UpdateResourceSynonymRequest.synonym:type_name -> acre.Synonyms
	38, // 20: acre.ListResourceGroupsRequest.selector:type_name -> common.ResourceSelector
	2,  // 21: acre.ListResourceGroupsResponse.groups:type_name -> acre.ResourceGroup
	2,  // 22: acre.GetResourceGroupResponse.group:type_name -> acre.ResourceGroup
	2,  // 23: acre.CreateResourceGroupRequest.group:type_name -> acre.ResourceGroup
	2,  // 24: acre.UpdateResourceGroupRequest.group:type_name -> acre.ResourceGroup
	6,  // 25: acre.ResourcEncodingService.ListResourceMappings:input_type -> acre.ListResourceMappingsRequest
	8,  // 26: acre.ResourcEncodingService.GetResourceMapping:input_type -> acre.GetResourceMappingRequest
	10, // 27: acre.ResourcEncodingService.CreateResourceMapping:input_type -> acre.CreateResourceMappingRequest
	12, // 28: acre.ResourcEncodingService.UpdateResourceMapping:input_type -> acre.UpdateResourceMappingRequest
	14, // 29: acre.ResourcEncodingService.DeleteResourceMapping:input_type -> acre.DeleteResourceMappingRequest
	16, // 30: acre.ResourcEncodingService.ListResourceSynonyms:input_type -> acre.ListResourceSynonymsRequest
	18, // 31: acre.ResourcEncodingService.GetResourceSynonym:input_type -> acre.GetResourceSynonymRequest
	20, // 32: acre.ResourcEncodingService.CreateResourceSynonym:input_type -> acre.CreateResourceSynonymRequest
	22, // 33: acre.ResourcEncodingService.UpdateResourceSynonym:input_type -> acre.UpdateResourceSynonymRequest
	24, // 34: acre.ResourcEncodingService.DeleteResourceSynonym:input_type -> acre.DeleteResourceSynonymRequest
	26, // 35: acre.ResourcEncodingService.ListResourceGroups:input_type -> acre.ListResourceGroupsRequest
	28, // 36: acre.ResourcEncodingService.GetResourceGroup:input_type -> acre.GetResourceGroupRequest
	30, // 37: acre.ResourcEncodingService.CreateResourceGroup:input_type -> acre.CreateResourceGroupRequest
	32, // 38: acre.ResourcEncodingService.UpdateResourceGroup:input_type -> acre.UpdateResourceGroupRequest
	34, // 39: acre.ResourcEncodingService.DeleteResourceGroup:input_type -> acre.DeleteResourceGroupRequest
	7,  // 40: acre.ResourcEncodingService.ListResourceMappings:output_type -> acre.ListResourceMappingsResponse
	9,  // 41: acre.ResourcEncodingService.GetResourceMapping:output_type -> acre.GetResourceMappingResponse
	11, // 42: acre.ResourcEncodingService.CreateResourceMapping:output_type -> acre.CreateResourceMappingResponse
	13, // 43: acre.ResourcEncodingService.UpdateResourceMapping:output_type -> acre.UpdateResourceMappingResponse
	15, // 44: acre.ResourcEncodingService.DeleteResourceMapping:output_type -> acre.DeleteResourceMappingResponse
	17, // 45: acre.ResourcEncodingService.ListResourceSynonyms:output_type -> acre.ListResourceSynonymsResponse
	19, // 46: acre.ResourcEncodingService.GetResourceSynonym:output_type -> acre.GetResourceSynonymResponse
	21, // 47: acre.ResourcEncodingService.CreateResourceSynonym:output_type -> acre.CreateResourceSynonymResponse
	23, // 48: acre.ResourcEncodingService.UpdateResourceSynonym:output_type -> acre.UpdateResourceSynonymResponse
	25, // 49: acre.ResourcEncodingService.DeleteResourceSynonym:output_type -> acre.DeleteResourceSynonymResponse
	27, // 50: acre.ResourcEncodingService.ListResourceGroups:output_type -> acre.ListResourceGroupsResponse
	29, // 51: acre.ResourcEncodingService.GetResourceGroup:output_type -> acre.GetResourceGroupResponse
	31, // 52: acre.ResourcEncodingService.CreateResourceGroup:output_type -> acre.CreateResourceGroupResponse
	33, // 53: acre.ResourcEncodingService.UpdateResourceGroup:output_type -> acre.UpdateResourceGroupResponse
	35, // 54: acre.ResourcEncodingService.DeleteResourceGroup:output_type -> acre.DeleteResourceGroupResponse
	40, // [40:55] is the sub-list for method output_type
	25, // [25:40] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_acre_acre_proto_init() }
func file_acre_acre_proto_init() {
	if File_acre_acre_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_acre_acre_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Synonyms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMappingRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynonymRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceEncodingRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceSynonymsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceSynonymsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceSynonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceSynonymResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceSynonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceSynonymResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceSynonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceSynonymResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceSynonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceSynonymResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acre_acre_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acre_acre_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ResourceMappingRef_Descriptor_)(nil),
		(*ResourceMappingRef_ResourceMapping)(nil),
	}
	file_acre_acre_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SynonymRef_Descriptor_)(nil),
		(*SynonymRef_Synonyms)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acre_acre_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acre_acre_proto_goTypes,
		DependencyIndexes: file_acre_acre_proto_depIdxs,
		MessageInfos:      file_acre_acre_proto_msgTypes,
	}.Build()
	File_acre_acre_proto = out.File
	file_acre_acre_proto_rawDesc = nil
	file_acre_acre_proto_goTypes = nil
	file_acre_acre_proto_depIdxs = nil
}
