// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: acre/acre.proto

package acre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceEncodingService_ListResourceMappings_FullMethodName  = "/acre.ResourceEncodingService/ListResourceMappings"
	ResourceEncodingService_GetResourceMapping_FullMethodName    = "/acre.ResourceEncodingService/GetResourceMapping"
	ResourceEncodingService_CreateResourceMapping_FullMethodName = "/acre.ResourceEncodingService/CreateResourceMapping"
	ResourceEncodingService_UpdateResourceMapping_FullMethodName = "/acre.ResourceEncodingService/UpdateResourceMapping"
	ResourceEncodingService_DeleteResourceMapping_FullMethodName = "/acre.ResourceEncodingService/DeleteResourceMapping"
	ResourceEncodingService_ListResourceSynonyms_FullMethodName  = "/acre.ResourceEncodingService/ListResourceSynonyms"
	ResourceEncodingService_GetResourceSynonym_FullMethodName    = "/acre.ResourceEncodingService/GetResourceSynonym"
	ResourceEncodingService_CreateResourceSynonym_FullMethodName = "/acre.ResourceEncodingService/CreateResourceSynonym"
	ResourceEncodingService_UpdateResourceSynonym_FullMethodName = "/acre.ResourceEncodingService/UpdateResourceSynonym"
	ResourceEncodingService_DeleteResourceSynonym_FullMethodName = "/acre.ResourceEncodingService/DeleteResourceSynonym"
	ResourceEncodingService_ListResourceGroups_FullMethodName    = "/acre.ResourceEncodingService/ListResourceGroups"
	ResourceEncodingService_GetResourceGroup_FullMethodName      = "/acre.ResourceEncodingService/GetResourceGroup"
	ResourceEncodingService_CreateResourceGroup_FullMethodName   = "/acre.ResourceEncodingService/CreateResourceGroup"
	ResourceEncodingService_UpdateResourceGroup_FullMethodName   = "/acre.ResourceEncodingService/UpdateResourceGroup"
	ResourceEncodingService_DeleteResourceGroup_FullMethodName   = "/acre.ResourceEncodingService/DeleteResourceGroup"
)

// ResourceEncodingServiceClient is the client API for ResourceEncodingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceEncodingServiceClient interface {
	// Resource Mappings
	ListResourceMappings(ctx context.Context, in *ListResourceMappingsRequest, opts ...grpc.CallOption) (*ListResourceMappingsResponse, error)
	GetResourceMapping(ctx context.Context, in *GetResourceMappingRequest, opts ...grpc.CallOption) (*GetResourceMappingResponse, error)
	CreateResourceMapping(ctx context.Context, in *CreateResourceMappingRequest, opts ...grpc.CallOption) (*CreateResourceMappingResponse, error)
	UpdateResourceMapping(ctx context.Context, in *UpdateResourceMappingRequest, opts ...grpc.CallOption) (*UpdateResourceMappingResponse, error)
	DeleteResourceMapping(ctx context.Context, in *DeleteResourceMappingRequest, opts ...grpc.CallOption) (*DeleteResourceMappingResponse, error)
	// Synonyms
	ListResourceSynonyms(ctx context.Context, in *ListResourceSynonymsRequest, opts ...grpc.CallOption) (*ListResourceSynonymsResponse, error)
	GetResourceSynonym(ctx context.Context, in *GetResourceSynonymRequest, opts ...grpc.CallOption) (*GetResourceSynonymResponse, error)
	CreateResourceSynonym(ctx context.Context, in *CreateResourceSynonymRequest, opts ...grpc.CallOption) (*CreateResourceSynonymResponse, error)
	UpdateResourceSynonym(ctx context.Context, in *UpdateResourceSynonymRequest, opts ...grpc.CallOption) (*UpdateResourceSynonymResponse, error)
	DeleteResourceSynonym(ctx context.Context, in *DeleteResourceSynonymRequest, opts ...grpc.CallOption) (*DeleteResourceSynonymResponse, error)
	// Resource Groups
	ListResourceGroups(ctx context.Context, in *ListResourceGroupsRequest, opts ...grpc.CallOption) (*ListResourceGroupsResponse, error)
	GetResourceGroup(ctx context.Context, in *GetResourceGroupRequest, opts ...grpc.CallOption) (*GetResourceGroupResponse, error)
	CreateResourceGroup(ctx context.Context, in *CreateResourceGroupRequest, opts ...grpc.CallOption) (*CreateResourceGroupResponse, error)
	UpdateResourceGroup(ctx context.Context, in *UpdateResourceGroupRequest, opts ...grpc.CallOption) (*UpdateResourceGroupResponse, error)
	DeleteResourceGroup(ctx context.Context, in *DeleteResourceGroupRequest, opts ...grpc.CallOption) (*DeleteResourceGroupResponse, error)
}

type resourceEncodingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceEncodingServiceClient(cc grpc.ClientConnInterface) ResourceEncodingServiceClient {
	return &resourceEncodingServiceClient{cc}
}

func (c *resourceEncodingServiceClient) ListResourceMappings(ctx context.Context, in *ListResourceMappingsRequest, opts ...grpc.CallOption) (*ListResourceMappingsResponse, error) {
	out := new(ListResourceMappingsResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_ListResourceMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) GetResourceMapping(ctx context.Context, in *GetResourceMappingRequest, opts ...grpc.CallOption) (*GetResourceMappingResponse, error) {
	out := new(GetResourceMappingResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_GetResourceMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) CreateResourceMapping(ctx context.Context, in *CreateResourceMappingRequest, opts ...grpc.CallOption) (*CreateResourceMappingResponse, error) {
	out := new(CreateResourceMappingResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_CreateResourceMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) UpdateResourceMapping(ctx context.Context, in *UpdateResourceMappingRequest, opts ...grpc.CallOption) (*UpdateResourceMappingResponse, error) {
	out := new(UpdateResourceMappingResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_UpdateResourceMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) DeleteResourceMapping(ctx context.Context, in *DeleteResourceMappingRequest, opts ...grpc.CallOption) (*DeleteResourceMappingResponse, error) {
	out := new(DeleteResourceMappingResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_DeleteResourceMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) ListResourceSynonyms(ctx context.Context, in *ListResourceSynonymsRequest, opts ...grpc.CallOption) (*ListResourceSynonymsResponse, error) {
	out := new(ListResourceSynonymsResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_ListResourceSynonyms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) GetResourceSynonym(ctx context.Context, in *GetResourceSynonymRequest, opts ...grpc.CallOption) (*GetResourceSynonymResponse, error) {
	out := new(GetResourceSynonymResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_GetResourceSynonym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) CreateResourceSynonym(ctx context.Context, in *CreateResourceSynonymRequest, opts ...grpc.CallOption) (*CreateResourceSynonymResponse, error) {
	out := new(CreateResourceSynonymResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_CreateResourceSynonym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) UpdateResourceSynonym(ctx context.Context, in *UpdateResourceSynonymRequest, opts ...grpc.CallOption) (*UpdateResourceSynonymResponse, error) {
	out := new(UpdateResourceSynonymResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_UpdateResourceSynonym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) DeleteResourceSynonym(ctx context.Context, in *DeleteResourceSynonymRequest, opts ...grpc.CallOption) (*DeleteResourceSynonymResponse, error) {
	out := new(DeleteResourceSynonymResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_DeleteResourceSynonym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) ListResourceGroups(ctx context.Context, in *ListResourceGroupsRequest, opts ...grpc.CallOption) (*ListResourceGroupsResponse, error) {
	out := new(ListResourceGroupsResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_ListResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) GetResourceGroup(ctx context.Context, in *GetResourceGroupRequest, opts ...grpc.CallOption) (*GetResourceGroupResponse, error) {
	out := new(GetResourceGroupResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_GetResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) CreateResourceGroup(ctx context.Context, in *CreateResourceGroupRequest, opts ...grpc.CallOption) (*CreateResourceGroupResponse, error) {
	out := new(CreateResourceGroupResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_CreateResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) UpdateResourceGroup(ctx context.Context, in *UpdateResourceGroupRequest, opts ...grpc.CallOption) (*UpdateResourceGroupResponse, error) {
	out := new(UpdateResourceGroupResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_UpdateResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceEncodingServiceClient) DeleteResourceGroup(ctx context.Context, in *DeleteResourceGroupRequest, opts ...grpc.CallOption) (*DeleteResourceGroupResponse, error) {
	out := new(DeleteResourceGroupResponse)
	err := c.cc.Invoke(ctx, ResourceEncodingService_DeleteResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceEncodingServiceServer is the server API for ResourceEncodingService service.
// All implementations must embed UnimplementedResourceEncodingServiceServer
// for forward compatibility
type ResourceEncodingServiceServer interface {
	// Resource Mappings
	ListResourceMappings(context.Context, *ListResourceMappingsRequest) (*ListResourceMappingsResponse, error)
	GetResourceMapping(context.Context, *GetResourceMappingRequest) (*GetResourceMappingResponse, error)
	CreateResourceMapping(context.Context, *CreateResourceMappingRequest) (*CreateResourceMappingResponse, error)
	UpdateResourceMapping(context.Context, *UpdateResourceMappingRequest) (*UpdateResourceMappingResponse, error)
	DeleteResourceMapping(context.Context, *DeleteResourceMappingRequest) (*DeleteResourceMappingResponse, error)
	// Synonyms
	ListResourceSynonyms(context.Context, *ListResourceSynonymsRequest) (*ListResourceSynonymsResponse, error)
	GetResourceSynonym(context.Context, *GetResourceSynonymRequest) (*GetResourceSynonymResponse, error)
	CreateResourceSynonym(context.Context, *CreateResourceSynonymRequest) (*CreateResourceSynonymResponse, error)
	UpdateResourceSynonym(context.Context, *UpdateResourceSynonymRequest) (*UpdateResourceSynonymResponse, error)
	DeleteResourceSynonym(context.Context, *DeleteResourceSynonymRequest) (*DeleteResourceSynonymResponse, error)
	// Resource Groups
	ListResourceGroups(context.Context, *ListResourceGroupsRequest) (*ListResourceGroupsResponse, error)
	GetResourceGroup(context.Context, *GetResourceGroupRequest) (*GetResourceGroupResponse, error)
	CreateResourceGroup(context.Context, *CreateResourceGroupRequest) (*CreateResourceGroupResponse, error)
	UpdateResourceGroup(context.Context, *UpdateResourceGroupRequest) (*UpdateResourceGroupResponse, error)
	DeleteResourceGroup(context.Context, *DeleteResourceGroupRequest) (*DeleteResourceGroupResponse, error)
	mustEmbedUnimplementedResourceEncodingServiceServer()
}

// UnimplementedResourceEncodingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceEncodingServiceServer struct {
}

func (UnimplementedResourceEncodingServiceServer) ListResourceMappings(context.Context, *ListResourceMappingsRequest) (*ListResourceMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceMappings not implemented")
}
func (UnimplementedResourceEncodingServiceServer) GetResourceMapping(context.Context, *GetResourceMappingRequest) (*GetResourceMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceMapping not implemented")
}
func (UnimplementedResourceEncodingServiceServer) CreateResourceMapping(context.Context, *CreateResourceMappingRequest) (*CreateResourceMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceMapping not implemented")
}
func (UnimplementedResourceEncodingServiceServer) UpdateResourceMapping(context.Context, *UpdateResourceMappingRequest) (*UpdateResourceMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceMapping not implemented")
}
func (UnimplementedResourceEncodingServiceServer) DeleteResourceMapping(context.Context, *DeleteResourceMappingRequest) (*DeleteResourceMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceMapping not implemented")
}
func (UnimplementedResourceEncodingServiceServer) ListResourceSynonyms(context.Context, *ListResourceSynonymsRequest) (*ListResourceSynonymsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceSynonyms not implemented")
}
func (UnimplementedResourceEncodingServiceServer) GetResourceSynonym(context.Context, *GetResourceSynonymRequest) (*GetResourceSynonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSynonym not implemented")
}
func (UnimplementedResourceEncodingServiceServer) CreateResourceSynonym(context.Context, *CreateResourceSynonymRequest) (*CreateResourceSynonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceSynonym not implemented")
}
func (UnimplementedResourceEncodingServiceServer) UpdateResourceSynonym(context.Context, *UpdateResourceSynonymRequest) (*UpdateResourceSynonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceSynonym not implemented")
}
func (UnimplementedResourceEncodingServiceServer) DeleteResourceSynonym(context.Context, *DeleteResourceSynonymRequest) (*DeleteResourceSynonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceSynonym not implemented")
}
func (UnimplementedResourceEncodingServiceServer) ListResourceGroups(context.Context, *ListResourceGroupsRequest) (*ListResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceGroups not implemented")
}
func (UnimplementedResourceEncodingServiceServer) GetResourceGroup(context.Context, *GetResourceGroupRequest) (*GetResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroup not implemented")
}
func (UnimplementedResourceEncodingServiceServer) CreateResourceGroup(context.Context, *CreateResourceGroupRequest) (*CreateResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceGroup not implemented")
}
func (UnimplementedResourceEncodingServiceServer) UpdateResourceGroup(context.Context, *UpdateResourceGroupRequest) (*UpdateResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceGroup not implemented")
}
func (UnimplementedResourceEncodingServiceServer) DeleteResourceGroup(context.Context, *DeleteResourceGroupRequest) (*DeleteResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceGroup not implemented")
}
func (UnimplementedResourceEncodingServiceServer) mustEmbedUnimplementedResourceEncodingServiceServer() {
}

// UnsafeResourceEncodingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceEncodingServiceServer will
// result in compilation errors.
type UnsafeResourceEncodingServiceServer interface {
	mustEmbedUnimplementedResourceEncodingServiceServer()
}

func RegisterResourceEncodingServiceServer(s grpc.ServiceRegistrar, srv ResourceEncodingServiceServer) {
	s.RegisterService(&ResourceEncodingService_ServiceDesc, srv)
}

func _ResourceEncodingService_ListResourceMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).ListResourceMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_ListResourceMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).ListResourceMappings(ctx, req.(*ListResourceMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_GetResourceMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).GetResourceMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_GetResourceMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).GetResourceMapping(ctx, req.(*GetResourceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_CreateResourceMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).CreateResourceMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_CreateResourceMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).CreateResourceMapping(ctx, req.(*CreateResourceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_UpdateResourceMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).UpdateResourceMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_UpdateResourceMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).UpdateResourceMapping(ctx, req.(*UpdateResourceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_DeleteResourceMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).DeleteResourceMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_DeleteResourceMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).DeleteResourceMapping(ctx, req.(*DeleteResourceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_ListResourceSynonyms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceSynonymsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).ListResourceSynonyms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_ListResourceSynonyms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).ListResourceSynonyms(ctx, req.(*ListResourceSynonymsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_GetResourceSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceSynonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).GetResourceSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_GetResourceSynonym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).GetResourceSynonym(ctx, req.(*GetResourceSynonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_CreateResourceSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceSynonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).CreateResourceSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_CreateResourceSynonym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).CreateResourceSynonym(ctx, req.(*CreateResourceSynonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_UpdateResourceSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceSynonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).UpdateResourceSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_UpdateResourceSynonym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).UpdateResourceSynonym(ctx, req.(*UpdateResourceSynonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_DeleteResourceSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceSynonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).DeleteResourceSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_DeleteResourceSynonym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).DeleteResourceSynonym(ctx, req.(*DeleteResourceSynonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_ListResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).ListResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_ListResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).ListResourceGroups(ctx, req.(*ListResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_GetResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).GetResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_GetResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).GetResourceGroup(ctx, req.(*GetResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_CreateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).CreateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_CreateResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).CreateResourceGroup(ctx, req.(*CreateResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_UpdateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).UpdateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_UpdateResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).UpdateResourceGroup(ctx, req.(*UpdateResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceEncodingService_DeleteResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceEncodingServiceServer).DeleteResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceEncodingService_DeleteResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceEncodingServiceServer).DeleteResourceGroup(ctx, req.(*DeleteResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceEncodingService_ServiceDesc is the grpc.ServiceDesc for ResourceEncodingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceEncodingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acre.ResourceEncodingService",
	HandlerType: (*ResourceEncodingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceMappings",
			Handler:    _ResourceEncodingService_ListResourceMappings_Handler,
		},
		{
			MethodName: "GetResourceMapping",
			Handler:    _ResourceEncodingService_GetResourceMapping_Handler,
		},
		{
			MethodName: "CreateResourceMapping",
			Handler:    _ResourceEncodingService_CreateResourceMapping_Handler,
		},
		{
			MethodName: "UpdateResourceMapping",
			Handler:    _ResourceEncodingService_UpdateResourceMapping_Handler,
		},
		{
			MethodName: "DeleteResourceMapping",
			Handler:    _ResourceEncodingService_DeleteResourceMapping_Handler,
		},
		{
			MethodName: "ListResourceSynonyms",
			Handler:    _ResourceEncodingService_ListResourceSynonyms_Handler,
		},
		{
			MethodName: "GetResourceSynonym",
			Handler:    _ResourceEncodingService_GetResourceSynonym_Handler,
		},
		{
			MethodName: "CreateResourceSynonym",
			Handler:    _ResourceEncodingService_CreateResourceSynonym_Handler,
		},
		{
			MethodName: "UpdateResourceSynonym",
			Handler:    _ResourceEncodingService_UpdateResourceSynonym_Handler,
		},
		{
			MethodName: "DeleteResourceSynonym",
			Handler:    _ResourceEncodingService_DeleteResourceSynonym_Handler,
		},
		{
			MethodName: "ListResourceGroups",
			Handler:    _ResourceEncodingService_ListResourceGroups_Handler,
		},
		{
			MethodName: "GetResourceGroup",
			Handler:    _ResourceEncodingService_GetResourceGroup_Handler,
		},
		{
			MethodName: "CreateResourceGroup",
			Handler:    _ResourceEncodingService_CreateResourceGroup_Handler,
		},
		{
			MethodName: "UpdateResourceGroup",
			Handler:    _ResourceEncodingService_UpdateResourceGroup_Handler,
		},
		{
			MethodName: "DeleteResourceGroup",
			Handler:    _ResourceEncodingService_DeleteResourceGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acre/acre.proto",
}
