// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: subjectmapping/subject_mapping.proto

package subjectmapping

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/opentdf/opentdf-v2-poc/sdk/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
type SubjectMapping_SubjectMappingOperatorEnum int32

const (
	SubjectMapping_SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED SubjectMapping_SubjectMappingOperatorEnum = 0
	SubjectMapping_SUBJECT_MAPPING_OPERATOR_ENUM_IN          SubjectMapping_SubjectMappingOperatorEnum = 1
	SubjectMapping_SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN      SubjectMapping_SubjectMappingOperatorEnum = 2
)

// Enum value maps for SubjectMapping_SubjectMappingOperatorEnum.
var (
	SubjectMapping_SubjectMappingOperatorEnum_name = map[int32]string{
		0: "SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED",
		1: "SUBJECT_MAPPING_OPERATOR_ENUM_IN",
		2: "SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN",
	}
	SubjectMapping_SubjectMappingOperatorEnum_value = map[string]int32{
		"SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED": 0,
		"SUBJECT_MAPPING_OPERATOR_ENUM_IN":          1,
		"SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN":      2,
	}
)

func (x SubjectMapping_SubjectMappingOperatorEnum) Enum() *SubjectMapping_SubjectMappingOperatorEnum {
	p := new(SubjectMapping_SubjectMappingOperatorEnum)
	*p = x
	return p
}

func (x SubjectMapping_SubjectMappingOperatorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectMapping_SubjectMappingOperatorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_subjectmapping_subject_mapping_proto_enumTypes[0].Descriptor()
}

func (SubjectMapping_SubjectMappingOperatorEnum) Type() protoreflect.EnumType {
	return &file_subjectmapping_subject_mapping_proto_enumTypes[0]
}

func (x SubjectMapping_SubjectMappingOperatorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectMapping_SubjectMappingOperatorEnum.Descriptor instead.
func (SubjectMapping_SubjectMappingOperatorEnum) EnumDescriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{0, 0}
}

// # Subject Mapping (aka Access Control Subject Encoding aka ACSE):  Structures supporting the mapping of Subjects and Attributes (e.g. Entitlement)
//
// ## Examples
//
// ### Where:
//
// - attribute_value_id represents the following attribute
// - FQN: "http://demo.com/attr/relto/value/CZE"
// - UUID: "12345678-1234-1234-1234-123456789012"
//
// ### Request
//
// ```bash
// grpcurl -plaintext -d '{
// "subject_mapping": {
// "metadata": {
// "description": "subject mapping 1",
// "labels": {
// "test-label": "test-value"
// }
// },
// "attribute_value_id": "12345678-1234-1234-1234-123456789012",
// "subject_attribute": "nationality",
// "subject_values": ["CZE"],
// "operator": "IN"
// }
// }' localhost:8080 SubjectMappingService.CreateSubjectMapping
// ```
//
// ### Response
//
// ```
// {
// "subject_mapping": {
// "metadata": {
// "id": "12345678-2222-1234-1234-123456789012",
// "description": "subject mapping 1",
// "labels": {
// "test-label": "test-value"
// }
// },
// "attribute_value_id": "12345678-1234-1234-1234-123456789012",
// "subject_attribute": "nationality",
// "subject_values": ["CZE"],
// "operator": "IN"
// }
// }
// ```
type SubjectMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Attribute Value to be mapped to
	AttributeValueId string `protobuf:"bytes,2,opt,name=attribute_value_id,json=attributeValueId,proto3" json:"attribute_value_id,omitempty"`
	// Resource Attribute Key; NOT Attribute Definition Attribute name
	SubjectAttribute string `protobuf:"bytes,3,opt,name=subject_attribute,json=subjectAttribute,proto3" json:"subject_attribute,omitempty"`
	// The list of comparison values for a resource's <attribute> value
	SubjectValues []string `protobuf:"bytes,4,rep,name=subject_values,json=subjectValues,proto3" json:"subject_values,omitempty"`
	// the operator
	Operator SubjectMapping_SubjectMappingOperatorEnum `protobuf:"varint,5,opt,name=operator,proto3,enum=subjectmapping.SubjectMapping_SubjectMappingOperatorEnum" json:"operator,omitempty"`
}

func (x *SubjectMapping) Reset() {
	*x = SubjectMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectMapping) ProtoMessage() {}

func (x *SubjectMapping) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectMapping.ProtoReflect.Descriptor instead.
func (*SubjectMapping) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *SubjectMapping) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubjectMapping) GetAttributeValueId() string {
	if x != nil {
		return x.AttributeValueId
	}
	return ""
}

func (x *SubjectMapping) GetSubjectAttribute() string {
	if x != nil {
		return x.SubjectAttribute
	}
	return ""
}

func (x *SubjectMapping) GetSubjectValues() []string {
	if x != nil {
		return x.SubjectValues
	}
	return nil
}

func (x *SubjectMapping) GetOperator() SubjectMapping_SubjectMappingOperatorEnum {
	if x != nil {
		return x.Operator
	}
	return SubjectMapping_SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED
}

type GetSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubjectMappingRequest) Reset() {
	*x = GetSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectMappingRequest) ProtoMessage() {}

func (x *GetSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *GetSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *GetSubjectMappingResponse) Reset() {
	*x = GetSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectMappingResponse) ProtoMessage() {}

func (x *GetSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *GetSubjectMappingResponse) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type ListSubjectMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSubjectMappingsRequest) Reset() {
	*x = ListSubjectMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectMappingsRequest) ProtoMessage() {}

func (x *ListSubjectMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListSubjectMappingsRequest) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{3}
}

type ListSubjectMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMappings []*SubjectMapping `protobuf:"bytes,1,rep,name=subject_mappings,json=subjectMappings,proto3" json:"subject_mappings,omitempty"`
}

func (x *ListSubjectMappingsResponse) Reset() {
	*x = ListSubjectMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubjectMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubjectMappingsResponse) ProtoMessage() {}

func (x *ListSubjectMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubjectMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListSubjectMappingsResponse) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{4}
}

func (x *ListSubjectMappingsResponse) GetSubjectMappings() []*SubjectMapping {
	if x != nil {
		return x.SubjectMappings
	}
	return nil
}

type CreateSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectMapping *SubjectMapping `protobuf:"bytes,1,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *CreateSubjectMappingRequest) Reset() {
	*x = CreateSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectMappingRequest) ProtoMessage() {}

func (x *CreateSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSubjectMappingRequest) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type CreateSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSubjectMappingResponse) Reset() {
	*x = CreateSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectMappingResponse) ProtoMessage() {}

func (x *CreateSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{6}
}

type UpdateSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectMapping *SubjectMapping `protobuf:"bytes,2,opt,name=subject_mapping,json=subjectMapping,proto3" json:"subject_mapping,omitempty"`
}

func (x *UpdateSubjectMappingRequest) Reset() {
	*x = UpdateSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectMappingRequest) ProtoMessage() {}

func (x *UpdateSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubjectMappingRequest) GetSubjectMapping() *SubjectMapping {
	if x != nil {
		return x.SubjectMapping
	}
	return nil
}

type UpdateSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSubjectMappingResponse) Reset() {
	*x = UpdateSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectMappingResponse) ProtoMessage() {}

func (x *UpdateSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{8}
}

type DeleteSubjectMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubjectMappingRequest) Reset() {
	*x = DeleteSubjectMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectMappingRequest) ProtoMessage() {}

func (x *DeleteSubjectMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectMappingRequest) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSubjectMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubjectMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubjectMappingResponse) Reset() {
	*x = DeleteSubjectMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subjectmapping_subject_mapping_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectMappingResponse) ProtoMessage() {}

func (x *DeleteSubjectMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subjectmapping_subject_mapping_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectMappingResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubjectMappingResponse) Descriptor() ([]byte, []int) {
	return file_subjectmapping_subject_mapping_proto_rawDescGZIP(), []int{10}
}

var File_subjectmapping_subject_mapping_proto protoreflect.FileDescriptor

var file_subjectmapping_subject_mapping_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9b, 0x01,
	0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x32, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6e, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x87, 0x06,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2a, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x11, 0x2f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xa2,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x0f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x16, 0x2f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a,
	0x16, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xb7, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x13,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64,
	0x66, 0x2d, 0x76, 0x32, 0x2d, 0x70, 0x6f, 0x63, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x53, 0x58,
	0x58, 0xaa, 0x02, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0xca, 0x02, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0xe2, 0x02, 0x1a, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subjectmapping_subject_mapping_proto_rawDescOnce sync.Once
	file_subjectmapping_subject_mapping_proto_rawDescData = file_subjectmapping_subject_mapping_proto_rawDesc
)

func file_subjectmapping_subject_mapping_proto_rawDescGZIP() []byte {
	file_subjectmapping_subject_mapping_proto_rawDescOnce.Do(func() {
		file_subjectmapping_subject_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_subjectmapping_subject_mapping_proto_rawDescData)
	})
	return file_subjectmapping_subject_mapping_proto_rawDescData
}

var file_subjectmapping_subject_mapping_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subjectmapping_subject_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_subjectmapping_subject_mapping_proto_goTypes = []interface{}{
	(SubjectMapping_SubjectMappingOperatorEnum)(0), // 0: subjectmapping.SubjectMapping.SubjectMappingOperatorEnum
	(*SubjectMapping)(nil),                         // 1: subjectmapping.SubjectMapping
	(*GetSubjectMappingRequest)(nil),               // 2: subjectmapping.GetSubjectMappingRequest
	(*GetSubjectMappingResponse)(nil),              // 3: subjectmapping.GetSubjectMappingResponse
	(*ListSubjectMappingsRequest)(nil),             // 4: subjectmapping.ListSubjectMappingsRequest
	(*ListSubjectMappingsResponse)(nil),            // 5: subjectmapping.ListSubjectMappingsResponse
	(*CreateSubjectMappingRequest)(nil),            // 6: subjectmapping.CreateSubjectMappingRequest
	(*CreateSubjectMappingResponse)(nil),           // 7: subjectmapping.CreateSubjectMappingResponse
	(*UpdateSubjectMappingRequest)(nil),            // 8: subjectmapping.UpdateSubjectMappingRequest
	(*UpdateSubjectMappingResponse)(nil),           // 9: subjectmapping.UpdateSubjectMappingResponse
	(*DeleteSubjectMappingRequest)(nil),            // 10: subjectmapping.DeleteSubjectMappingRequest
	(*DeleteSubjectMappingResponse)(nil),           // 11: subjectmapping.DeleteSubjectMappingResponse
	(*common.Metadata)(nil),                        // 12: common.Metadata
}
var file_subjectmapping_subject_mapping_proto_depIdxs = []int32{
	12, // 0: subjectmapping.SubjectMapping.metadata:type_name -> common.Metadata
	0,  // 1: subjectmapping.SubjectMapping.operator:type_name -> subjectmapping.SubjectMapping.SubjectMappingOperatorEnum
	1,  // 2: subjectmapping.GetSubjectMappingResponse.subject_mapping:type_name -> subjectmapping.SubjectMapping
	1,  // 3: subjectmapping.ListSubjectMappingsResponse.subject_mappings:type_name -> subjectmapping.SubjectMapping
	1,  // 4: subjectmapping.CreateSubjectMappingRequest.subject_mapping:type_name -> subjectmapping.SubjectMapping
	1,  // 5: subjectmapping.UpdateSubjectMappingRequest.subject_mapping:type_name -> subjectmapping.SubjectMapping
	4,  // 6: subjectmapping.SubjectMappingService.ListSubjectMappings:input_type -> subjectmapping.ListSubjectMappingsRequest
	2,  // 7: subjectmapping.SubjectMappingService.GetSubjectMapping:input_type -> subjectmapping.GetSubjectMappingRequest
	6,  // 8: subjectmapping.SubjectMappingService.CreateSubjectMapping:input_type -> subjectmapping.CreateSubjectMappingRequest
	8,  // 9: subjectmapping.SubjectMappingService.UpdateSubjectMapping:input_type -> subjectmapping.UpdateSubjectMappingRequest
	10, // 10: subjectmapping.SubjectMappingService.DeleteSubjectMapping:input_type -> subjectmapping.DeleteSubjectMappingRequest
	5,  // 11: subjectmapping.SubjectMappingService.ListSubjectMappings:output_type -> subjectmapping.ListSubjectMappingsResponse
	3,  // 12: subjectmapping.SubjectMappingService.GetSubjectMapping:output_type -> subjectmapping.GetSubjectMappingResponse
	7,  // 13: subjectmapping.SubjectMappingService.CreateSubjectMapping:output_type -> subjectmapping.CreateSubjectMappingResponse
	9,  // 14: subjectmapping.SubjectMappingService.UpdateSubjectMapping:output_type -> subjectmapping.UpdateSubjectMappingResponse
	11, // 15: subjectmapping.SubjectMappingService.DeleteSubjectMapping:output_type -> subjectmapping.DeleteSubjectMappingResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_subjectmapping_subject_mapping_proto_init() }
func file_subjectmapping_subject_mapping_proto_init() {
	if File_subjectmapping_subject_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subjectmapping_subject_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubjectMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subjectmapping_subject_mapping_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subjectmapping_subject_mapping_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subjectmapping_subject_mapping_proto_goTypes,
		DependencyIndexes: file_subjectmapping_subject_mapping_proto_depIdxs,
		EnumInfos:         file_subjectmapping_subject_mapping_proto_enumTypes,
		MessageInfos:      file_subjectmapping_subject_mapping_proto_msgTypes,
	}.Build()
	File_subjectmapping_subject_mapping_proto = out.File
	file_subjectmapping_subject_mapping_proto_rawDesc = nil
	file_subjectmapping_subject_mapping_proto_goTypes = nil
	file_subjectmapping_subject_mapping_proto_depIdxs = nil
}
