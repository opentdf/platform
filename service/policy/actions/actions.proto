syntax = "proto3";

package policy.actions;

import "buf/validate/validate.proto";

import "common/common.proto";
import "policy/objects.proto";
import "policy/predefined_rules.proto";
import "policy/selectors.proto";

/*
   Actions CRUD Operations
*/

message GetActionRequest {
  // Required
  oneof identifier {
    option (buf.validate.oneof).required = true;
    string id = 1 [(buf.validate.field).string.uuid = true];
    string name = 2 [(buf.validate.field).string.(optional_object_name) = true];
  }
}
message GetActionResponse {
  policy.Action action = 1;

  // Subject Mappings driving entitlement to the action
  repeated policy.SubjectMapping subject_mappings = 2;
}

message ListActionsRequest {
  // Optional
  policy.PageRequest pagination = 10;
}
message ListActionsResponse {
  repeated policy.Action actions_standard = 1;
  repeated policy.Action actions_custom = 2;

  policy.PageResponse pagination = 10;
}

// Create a new Custom action name with optional metadata.
// Creation of Standard actions is not supported.
message CreateActionRequest {
  // Required
  string name = 1 [(buf.validate.field).string.(required_object_name) = true];

  // Optional
  common.MetadataMutable metadata = 100;
}
message CreateActionResponse {
  policy.Action action = 1;
}

// Metadata may be updated for either Custom or Standard actions.
// Names may only be updated for Custom actions.
message UpdateActionRequest {
  // Required
  string id = 1 [(buf.validate.field).string.uuid = true];

  // Optional
  // Custom actions only: replaces the existing action name
  string name = 2 [(buf.validate.field).string.(optional_object_name) = true];

  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateActionResponse {
  policy.Action action = 1;
}

// Custom only: deletion of Standard actions is not supported.
message DeleteActionRequest {
  // Required
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message DeleteActionResponse {
  policy.Action action = 1;
}

service ActionService {
  rpc GetAction(GetActionRequest) returns (GetActionResponse) {}
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse) {}
  rpc CreateAction(CreateActionRequest) returns (CreateActionResponse) {}
  rpc UpdateAction(UpdateActionRequest) returns (UpdateActionResponse) {}
  rpc DeleteAction(DeleteActionRequest) returns (DeleteActionResponse) {}
}
