syntax = "proto3";

package policy.attributes;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";
import "policy/objects.proto";
import "policy/selectors.proto";

/*
   Key Access Server Grants
*/

message AttributeKeyAccessServer {
  // Required
  string attribute_id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Required
  string key_access_server_id = 2 [
    (buf.validate.field).string.uuid = true
  ];
}

message ValueKeyAccessServer {
  // Required
  string value_id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Required
  string key_access_server_id = 2 [
    (buf.validate.field).string.uuid = true
  ];
}

/*
   Attribute Service Definitions
*/

message ListAttributesRequest {
  // Optional
  // ACTIVE by default when not specified
  common.ActiveStateEnum state = 1;
  // Optional
  // Namespace ID or name
  string namespace = 2;

  // Optional
  policy.PageRequest pagination = 10;
}
message ListAttributesResponse {
  repeated policy.Attribute attributes = 1;

  policy.PageResponse pagination = 10;
}

message GetAttributeRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message GetAttributeResponse {
  policy.Attribute attribute = 1;
}

message CreateAttributeRequest {
  // Required
  string namespace_id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Required
  string name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "attribute_name_format",
      message: "Attribute name must be an alphanumeric string, allowing hyphens and underscores but not as the first or last character. The stored attribute name will be normalized to lower case.",
      expression: "this.matches('^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
    }
  ];
  // Required
  AttributeRuleTypeEnum rule = 3 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
  // Optional 
  // Attribute values (when provided) must be alphanumeric strings, allowing hyphens and underscores but not as the first or last character.
  // The stored attribute value will be normalized to lower case.
  repeated string values = 4 [
    (buf.validate.field).repeated = {
      min_items: 0,
      unique: true,
      items: {
        string: 
          {
            max_len: 253,
            pattern: "^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$"
          }
      },
    }
  ];

  // Optional
  common.MetadataMutable metadata = 100;
}
message CreateAttributeResponse {
  policy.Attribute attribute = 1;
}

message UpdateAttributeRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  // Optional
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateAttributeResponse {
  policy.Attribute attribute = 1;
}

message DeactivateAttributeRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message DeactivateAttributeResponse {
  policy.Attribute attribute = 1;
}

///
/// Value RPC messages
///
message GetAttributeValueRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message GetAttributeValueResponse {
  policy.Value value = 1;
}

message ListAttributeValuesRequest {
  // Required
  string attribute_id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Optional
  // ACTIVE by default when not specified
  common.ActiveStateEnum state = 2;

  // Optional
  policy.PageRequest pagination = 10;
}
message ListAttributeValuesResponse {
  repeated policy.Value values = 1;

  policy.PageResponse pagination = 10;
}

message CreateAttributeValueRequest {
  // Required
  string attribute_id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Required
  string value = 2     [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "attribute_value_format",
      message: "Attribute value must be an alphanumeric string, allowing hyphens and underscores but not as the first or last character. The stored attribute value will be normalized to lower case.",
      expression: "this.matches('^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
    }
  ];

  // deprecated members on values
  reserved "members";
  reserved 3;

  // Optional
  // Common metadata
  common.MetadataMutable metadata = 100;
}
message CreateAttributeValueResponse {
  policy.Value value = 1;
}

message UpdateAttributeValueRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  // Deprecated
  reserved "members";
  reserved 4;

  // Optional
  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateAttributeValueResponse {
  policy.Value value = 1;
}

message DeactivateAttributeValueRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message DeactivateAttributeValueResponse {
  policy.Value value = 1;
}

message GetAttributeValuesByFqnsRequest {
  // Required
  // Fully Qualified Names of attribute values (i.e. https://<namespace>/attr/<attribute_name>/value/<value_name>), normalized to lower case.
  repeated string fqns = 1 [
    (buf.validate.field).repeated = {
      min_items: 1,
      max_items: 250
    }
  ];

  // Optional
  // This attribute value selector is not used currently, but left here for future use.
  policy.AttributeValueSelector with_value = 2;
}
message GetAttributeValuesByFqnsResponse {
  message AttributeAndValue {
    policy.Attribute attribute = 1;
    policy.Value value = 2;
  }
  // map of FQNs to complete attributes and the one selected value
  map<string, AttributeAndValue> fqn_attribute_values = 1;
}

/*
   Assign Key Access Server (KAS Grant) to Attribute and Value
*/

message AssignKeyAccessServerToAttributeRequest {
  // Required
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message AssignKeyAccessServerToAttributeResponse {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message RemoveKeyAccessServerFromAttributeRequest {
  // Required
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message RemoveKeyAccessServerFromAttributeResponse {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message AssignKeyAccessServerToValueRequest {
  // Required
  ValueKeyAccessServer value_key_access_server = 1;
}

message AssignKeyAccessServerToValueResponse {
  ValueKeyAccessServer value_key_access_server = 1;
}

message RemoveKeyAccessServerFromValueRequest {
  // Required
  ValueKeyAccessServer value_key_access_server = 1;
}

message RemoveKeyAccessServerFromValueResponse {
  ValueKeyAccessServer value_key_access_server = 1;
}

///
/// Attribute Service
///
service AttributesService {
  /*--------------------------------------*
   * Attribute RPCs
   *---------------------------------------*/
  rpc ListAttributes(ListAttributesRequest) returns (ListAttributesResponse) {
    option (google.api.http) = {get: "/attributes"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc ListAttributeValues(ListAttributeValuesRequest) returns (ListAttributeValuesResponse) {
    option (google.api.http) = {get: "/attributes/*/values"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc GetAttribute(GetAttributeRequest) returns (GetAttributeResponse) {
    option (google.api.http) = {get: "/attributes/{id}"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetAttributeValuesByFqns(GetAttributeValuesByFqnsRequest) returns (GetAttributeValuesByFqnsResponse) {
    option (google.api.http) = {get: "/attributes/*/fqn"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc CreateAttribute(CreateAttributeRequest) returns (CreateAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes"
      body: "*"
    };
  }

  rpc UpdateAttribute(UpdateAttributeRequest) returns (UpdateAttributeResponse) {
    option (google.api.http) = {
      patch: "/attributes/{id}"
      body: "*"
    };
  }

  rpc DeactivateAttribute(DeactivateAttributeRequest) returns (DeactivateAttributeResponse) {
    option (google.api.http) = {delete: "/attributes/{id}"};
  }

  /*--------------------------------------*
   * Value RPCs
   *---------------------------------------*/
  rpc GetAttributeValue(GetAttributeValueRequest) returns (GetAttributeValueResponse) {
    option (google.api.http) = {get: "/attributes/*/values/{id}"};
  }

  rpc CreateAttributeValue(CreateAttributeValueRequest) returns (CreateAttributeValueResponse) {
    option (google.api.http) = {
      post: "/attributes/{attribute_id}/values"
      body: "*"
    };
  }

  rpc UpdateAttributeValue(UpdateAttributeValueRequest) returns (UpdateAttributeValueResponse) {
    option (google.api.http) = {
      patch: "/attributes/*/values/{id}"
      body: "*"
    };
  }

  rpc DeactivateAttributeValue(DeactivateAttributeValueRequest) returns (DeactivateAttributeValueResponse) {
    option (google.api.http) = {delete: "/attributes/*/values/{id}"};
  }

  /*--------------------------------------*
   * Attribute <> Key Access Server RPCs
   *---------------------------------------*/
  rpc AssignKeyAccessServerToAttribute(AssignKeyAccessServerToAttributeRequest) returns (AssignKeyAccessServerToAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes/keyaccessserver/grants"
      body: "attribute_key_access_server"
    };
  }

  rpc RemoveKeyAccessServerFromAttribute(RemoveKeyAccessServerFromAttributeRequest) returns (RemoveKeyAccessServerFromAttributeResponse) {
    option (google.api.http) = {
      delete: "/attributes/keyaccessserver/grants"
    };
  }

  rpc AssignKeyAccessServerToValue(AssignKeyAccessServerToValueRequest) returns (AssignKeyAccessServerToValueResponse) {
    option (google.api.http) = {
      post: "/attributes/values/keyaccessserver/grants"
      body: "value_key_access_server"
    };
  }

  rpc RemoveKeyAccessServerFromValue(RemoveKeyAccessServerFromValueRequest) returns (RemoveKeyAccessServerFromValueResponse) {
    option (google.api.http) = {
      delete: "/attributes/values/keyaccessserver/grants"
    };
  }
}
