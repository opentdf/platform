// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_access_server_registry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createKey = `-- name: createKey :one
INSERT INTO key_access_server_keys
    (key_access_server_id, key_algorithm, key_id, key_mode, key_status, metadata, private_key_ctx, public_key_ctx, provider_config_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type createKeyParams struct {
	KeyAccessServerID string      `json:"key_access_server_id"`
	KeyAlgorithm      int32       `json:"key_algorithm"`
	KeyID             string      `json:"key_id"`
	KeyMode           int32       `json:"key_mode"`
	KeyStatus         int32       `json:"key_status"`
	Metadata          []byte      `json:"metadata"`
	PrivateKeyCtx     []byte      `json:"private_key_ctx"`
	PublicKeyCtx      []byte      `json:"public_key_ctx"`
	ProviderConfigID  pgtype.UUID `json:"provider_config_id"`
}

// ---------------------------------------------------------------
// Key Access Server Keys
// ----------------------------------------------------------------
//
//	INSERT INTO key_access_server_keys
//	    (key_access_server_id, key_algorithm, key_id, key_mode, key_status, metadata, private_key_ctx, public_key_ctx, provider_config_id)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
//	RETURNING id
func (q *Queries) createKey(ctx context.Context, arg createKeyParams) (string, error) {
	row := q.db.QueryRow(ctx, createKey,
		arg.KeyAccessServerID,
		arg.KeyAlgorithm,
		arg.KeyID,
		arg.KeyMode,
		arg.KeyStatus,
		arg.Metadata,
		arg.PrivateKeyCtx,
		arg.PublicKeyCtx,
		arg.ProviderConfigID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createKeyAccessServer = `-- name: createKeyAccessServer :one
INSERT INTO key_access_servers (uri, public_key, name, metadata, source_type)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type createKeyAccessServerParams struct {
	Uri        string      `json:"uri"`
	PublicKey  []byte      `json:"public_key"`
	Name       pgtype.Text `json:"name"`
	Metadata   []byte      `json:"metadata"`
	SourceType pgtype.Text `json:"source_type"`
}

// createKeyAccessServer
//
//	INSERT INTO key_access_servers (uri, public_key, name, metadata, source_type)
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING id
func (q *Queries) createKeyAccessServer(ctx context.Context, arg createKeyAccessServerParams) (string, error) {
	row := q.db.QueryRow(ctx, createKeyAccessServer,
		arg.Uri,
		arg.PublicKey,
		arg.Name,
		arg.Metadata,
		arg.SourceType,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteKey = `-- name: deleteKey :execrows
DELETE FROM key_access_server_keys WHERE id = $1
`

// deleteKey
//
//	DELETE FROM key_access_server_keys WHERE id = $1
func (q *Queries) deleteKey(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteKey, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteKeyAccessServer = `-- name: deleteKeyAccessServer :execrows
DELETE FROM key_access_servers WHERE id = $1
`

// deleteKeyAccessServer
//
//	DELETE FROM key_access_servers WHERE id = $1
func (q *Queries) deleteKeyAccessServer(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteKeyAccessServer, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getBaseKey = `-- name: getBaseKey :one

SELECT
    DISTINCT JSONB_BUILD_OBJECT(
       'kas_uri', kas.uri,
       'kas_id', kas.id,
       'public_key', JSONB_BUILD_OBJECT(
            'algorithm', kask.key_algorithm::INTEGER,
            'kid', kask.key_id,
            'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
       )
    ) AS base_keys
FROM base_keys bk
INNER JOIN key_access_server_keys kask ON bk.key_access_server_key_id = kask.id
INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
`

// --------------------------------------------------------------
// Default KAS Keys
// --------------------------------------------------------------
//
//	SELECT
//	    DISTINCT JSONB_BUILD_OBJECT(
//	       'kas_uri', kas.uri,
//	       'kas_id', kas.id,
//	       'public_key', JSONB_BUILD_OBJECT(
//	            'algorithm', kask.key_algorithm::INTEGER,
//	            'kid', kask.key_id,
//	            'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	       )
//	    ) AS base_keys
//	FROM base_keys bk
//	INNER JOIN key_access_server_keys kask ON bk.key_access_server_key_id = kask.id
//	INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
func (q *Queries) getBaseKey(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRow(ctx, getBaseKey)
	var base_keys []byte
	err := row.Scan(&base_keys)
	return base_keys, err
}

const getKey = `-- name: getKey :one
SELECT 
  kask.id,
  kask.key_id,
  kask.key_status,
  kask.key_mode,
  kask.key_algorithm,
  kask.private_key_ctx,
  kask.public_key_ctx,
  kask.provider_config_id,
  kask.key_access_server_id,
  kas.uri AS kas_uri,
  JSON_STRIP_NULLS(
    JSON_BUILD_OBJECT(
      'labels', kask.metadata -> 'labels',         
      'created_at', kask.created_at,               
      'updated_at', kask.updated_at                
    )
  ) AS metadata,
  pc.provider_name,
  pc.config AS pc_config,
  JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS pc_metadata
FROM key_access_server_keys AS kask
LEFT JOIN 
    provider_config as pc ON kask.provider_config_id = pc.id
INNER JOIN 
    key_access_servers AS kas ON kask.key_access_server_id = kas.id
WHERE ($1::uuid IS NULL OR kask.id = $1::uuid)
  AND ($2::text IS NULL OR kask.key_id = $2::text)
  AND ($3::uuid IS NULL OR kask.key_access_server_id = $3::uuid)
  AND ($4::text IS NULL OR kas.uri = $4::text)
  AND ($5::text IS NULL OR kas.name = $5::text)
`

type getKeyParams struct {
	ID      pgtype.UUID `json:"id"`
	KeyID   pgtype.Text `json:"key_id"`
	KasID   pgtype.UUID `json:"kas_id"`
	KasUri  pgtype.Text `json:"kas_uri"`
	KasName pgtype.Text `json:"kas_name"`
}

type getKeyRow struct {
	ID                string      `json:"id"`
	KeyID             string      `json:"key_id"`
	KeyStatus         int32       `json:"key_status"`
	KeyMode           int32       `json:"key_mode"`
	KeyAlgorithm      int32       `json:"key_algorithm"`
	PrivateKeyCtx     []byte      `json:"private_key_ctx"`
	PublicKeyCtx      []byte      `json:"public_key_ctx"`
	ProviderConfigID  pgtype.UUID `json:"provider_config_id"`
	KeyAccessServerID string      `json:"key_access_server_id"`
	KasUri            string      `json:"kas_uri"`
	Metadata          []byte      `json:"metadata"`
	ProviderName      pgtype.Text `json:"provider_name"`
	PcConfig          []byte      `json:"pc_config"`
	PcMetadata        []byte      `json:"pc_metadata"`
}

// getKey
//
//	SELECT
//	  kask.id,
//	  kask.key_id,
//	  kask.key_status,
//	  kask.key_mode,
//	  kask.key_algorithm,
//	  kask.private_key_ctx,
//	  kask.public_key_ctx,
//	  kask.provider_config_id,
//	  kask.key_access_server_id,
//	  kas.uri AS kas_uri,
//	  JSON_STRIP_NULLS(
//	    JSON_BUILD_OBJECT(
//	      'labels', kask.metadata -> 'labels',
//	      'created_at', kask.created_at,
//	      'updated_at', kask.updated_at
//	    )
//	  ) AS metadata,
//	  pc.provider_name,
//	  pc.config AS pc_config,
//	  JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS pc_metadata
//	FROM key_access_server_keys AS kask
//	LEFT JOIN
//	    provider_config as pc ON kask.provider_config_id = pc.id
//	INNER JOIN
//	    key_access_servers AS kas ON kask.key_access_server_id = kas.id
//	WHERE ($1::uuid IS NULL OR kask.id = $1::uuid)
//	  AND ($2::text IS NULL OR kask.key_id = $2::text)
//	  AND ($3::uuid IS NULL OR kask.key_access_server_id = $3::uuid)
//	  AND ($4::text IS NULL OR kas.uri = $4::text)
//	  AND ($5::text IS NULL OR kas.name = $5::text)
func (q *Queries) getKey(ctx context.Context, arg getKeyParams) (getKeyRow, error) {
	row := q.db.QueryRow(ctx, getKey,
		arg.ID,
		arg.KeyID,
		arg.KasID,
		arg.KasUri,
		arg.KasName,
	)
	var i getKeyRow
	err := row.Scan(
		&i.ID,
		&i.KeyID,
		&i.KeyStatus,
		&i.KeyMode,
		&i.KeyAlgorithm,
		&i.PrivateKeyCtx,
		&i.PublicKeyCtx,
		&i.ProviderConfigID,
		&i.KeyAccessServerID,
		&i.KasUri,
		&i.Metadata,
		&i.ProviderName,
		&i.PcConfig,
		&i.PcMetadata,
	)
	return i, err
}

const getKeyAccessServer = `-- name: getKeyAccessServer :one
SELECT 
    kas.id,
    kas.uri, 
    kas.public_key, 
    kas.name,
    kas.source_type,
    JSON_STRIP_NULLS(
        JSON_BUILD_OBJECT(
            'labels', metadata -> 'labels', 
            'created_at', created_at, 
            'updated_at', updated_at
        )
    ) AS metadata,
    kask_keys.keys
FROM key_access_servers AS kas
LEFT JOIN (
        SELECT
            kask.key_access_server_id,
            JSONB_AGG(
                DISTINCT JSONB_BUILD_OBJECT(
                    'kas_uri', kas.uri,
                    'kas_id', kas.id,
                    'public_key', JSONB_BUILD_OBJECT(
                         'algorithm', kask.key_algorithm::INTEGER,
                         'kid', kask.key_id,
                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                    )
                )
            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
        FROM key_access_server_keys kask
        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
        GROUP BY kask.key_access_server_id
    ) kask_keys ON kas.id = kask_keys.key_access_server_id
WHERE ($1::uuid IS NULL OR kas.id = $1::uuid)
  AND ($2::text IS NULL OR kas.name = $2::text)
  AND ($3::text IS NULL OR kas.uri = $3::text)
`

type getKeyAccessServerParams struct {
	ID   pgtype.UUID `json:"id"`
	Name pgtype.Text `json:"name"`
	Uri  pgtype.Text `json:"uri"`
}

type getKeyAccessServerRow struct {
	ID         string      `json:"id"`
	Uri        string      `json:"uri"`
	PublicKey  []byte      `json:"public_key"`
	Name       pgtype.Text `json:"name"`
	SourceType pgtype.Text `json:"source_type"`
	Metadata   []byte      `json:"metadata"`
	Keys       []byte      `json:"keys"`
}

// getKeyAccessServer
//
//	SELECT
//	    kas.id,
//	    kas.uri,
//	    kas.public_key,
//	    kas.name,
//	    kas.source_type,
//	    JSON_STRIP_NULLS(
//	        JSON_BUILD_OBJECT(
//	            'labels', metadata -> 'labels',
//	            'created_at', created_at,
//	            'updated_at', updated_at
//	        )
//	    ) AS metadata,
//	    kask_keys.keys
//	FROM key_access_servers AS kas
//	LEFT JOIN (
//	        SELECT
//	            kask.key_access_server_id,
//	            JSONB_AGG(
//	                DISTINCT JSONB_BUILD_OBJECT(
//	                    'kas_uri', kas.uri,
//	                    'kas_id', kas.id,
//	                    'public_key', JSONB_BUILD_OBJECT(
//	                         'algorithm', kask.key_algorithm::INTEGER,
//	                         'kid', kask.key_id,
//	                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                    )
//	                )
//	            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	        FROM key_access_server_keys kask
//	        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	        GROUP BY kask.key_access_server_id
//	    ) kask_keys ON kas.id = kask_keys.key_access_server_id
//	WHERE ($1::uuid IS NULL OR kas.id = $1::uuid)
//	  AND ($2::text IS NULL OR kas.name = $2::text)
//	  AND ($3::text IS NULL OR kas.uri = $3::text)
func (q *Queries) getKeyAccessServer(ctx context.Context, arg getKeyAccessServerParams) (getKeyAccessServerRow, error) {
	row := q.db.QueryRow(ctx, getKeyAccessServer, arg.ID, arg.Name, arg.Uri)
	var i getKeyAccessServerRow
	err := row.Scan(
		&i.ID,
		&i.Uri,
		&i.PublicKey,
		&i.Name,
		&i.SourceType,
		&i.Metadata,
		&i.Keys,
	)
	return i, err
}

const listKeyAccessServerGrants = `-- name: listKeyAccessServerGrants :many
WITH listed AS (
    SELECT
        COUNT(*) OVER () AS total,
        kas.id AS kas_id,
        kas.uri AS kas_uri,
        kas.name AS kas_name,
        kas.public_key AS kas_public_key,
        JSON_STRIP_NULLS(JSON_BUILD_OBJECT(
            'labels', kas.metadata -> 'labels',
            'created_at', kas.created_at,
            'updated_at', kas.updated_at
        )) AS kas_metadata,
        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
            'id', attrkag.attribute_definition_id,
            'fqn', fqns_on_attr.fqn
        )) FILTER (WHERE attrkag.attribute_definition_id IS NOT NULL) AS attributes_grants,
        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
            'id', valkag.attribute_value_id,
            'fqn', fqns_on_vals.fqn
        )) FILTER (WHERE valkag.attribute_value_id IS NOT NULL) AS values_grants,
        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
            'id', nskag.namespace_id,
            'fqn', fqns_on_ns.fqn
        )) FILTER (WHERE nskag.namespace_id IS NOT NULL) AS namespace_grants
    FROM key_access_servers AS kas
    LEFT JOIN
        attribute_definition_key_access_grants AS attrkag
        ON kas.id = attrkag.key_access_server_id
    LEFT JOIN
        attribute_fqns AS fqns_on_attr
        ON attrkag.attribute_definition_id = fqns_on_attr.attribute_id
            AND fqns_on_attr.value_id IS NULL
    LEFT JOIN
        attribute_value_key_access_grants AS valkag
        ON kas.id = valkag.key_access_server_id
    LEFT JOIN 
        attribute_fqns AS fqns_on_vals
        ON valkag.attribute_value_id = fqns_on_vals.value_id
    LEFT JOIN
        attribute_namespace_key_access_grants AS nskag
        ON kas.id = nskag.key_access_server_id
    LEFT JOIN
        attribute_fqns AS fqns_on_ns
            ON nskag.namespace_id = fqns_on_ns.namespace_id
        AND fqns_on_ns.attribute_id IS NULL AND fqns_on_ns.value_id IS NULL
    WHERE (NULLIF($3, '') IS NULL OR kas.id = $3::uuid) 
        AND (NULLIF($4, '') IS NULL OR kas.uri = $4::varchar) 
        AND (NULLIF($5, '') IS NULL OR kas.name = $5::varchar) 
    GROUP BY 
        kas.id
)
SELECT 
    listed.kas_id,
    listed.kas_uri,
    listed.kas_name,
    listed.kas_public_key,
    listed.kas_metadata,
    listed.attributes_grants,
    listed.values_grants,
    listed.namespace_grants,
    listed.total  
FROM listed
LIMIT $2 
OFFSET $1
`

type listKeyAccessServerGrantsParams struct {
	Offset  int32       `json:"offset_"`
	Limit   int32       `json:"limit_"`
	KasID   interface{} `json:"kas_id"`
	KasUri  interface{} `json:"kas_uri"`
	KasName interface{} `json:"kas_name"`
}

type listKeyAccessServerGrantsRow struct {
	KasID            string      `json:"kas_id"`
	KasUri           string      `json:"kas_uri"`
	KasName          pgtype.Text `json:"kas_name"`
	KasPublicKey     []byte      `json:"kas_public_key"`
	KasMetadata      []byte      `json:"kas_metadata"`
	AttributesGrants []byte      `json:"attributes_grants"`
	ValuesGrants     []byte      `json:"values_grants"`
	NamespaceGrants  []byte      `json:"namespace_grants"`
	Total            int64       `json:"total"`
}

// --------------------------------------------------------------
// KEY ACCESS SERVERS
// --------------------------------------------------------------
//
//	WITH listed AS (
//	    SELECT
//	        COUNT(*) OVER () AS total,
//	        kas.id AS kas_id,
//	        kas.uri AS kas_uri,
//	        kas.name AS kas_name,
//	        kas.public_key AS kas_public_key,
//	        JSON_STRIP_NULLS(JSON_BUILD_OBJECT(
//	            'labels', kas.metadata -> 'labels',
//	            'created_at', kas.created_at,
//	            'updated_at', kas.updated_at
//	        )) AS kas_metadata,
//	        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
//	            'id', attrkag.attribute_definition_id,
//	            'fqn', fqns_on_attr.fqn
//	        )) FILTER (WHERE attrkag.attribute_definition_id IS NOT NULL) AS attributes_grants,
//	        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
//	            'id', valkag.attribute_value_id,
//	            'fqn', fqns_on_vals.fqn
//	        )) FILTER (WHERE valkag.attribute_value_id IS NOT NULL) AS values_grants,
//	        JSON_AGG(DISTINCT JSONB_BUILD_OBJECT(
//	            'id', nskag.namespace_id,
//	            'fqn', fqns_on_ns.fqn
//	        )) FILTER (WHERE nskag.namespace_id IS NOT NULL) AS namespace_grants
//	    FROM key_access_servers AS kas
//	    LEFT JOIN
//	        attribute_definition_key_access_grants AS attrkag
//	        ON kas.id = attrkag.key_access_server_id
//	    LEFT JOIN
//	        attribute_fqns AS fqns_on_attr
//	        ON attrkag.attribute_definition_id = fqns_on_attr.attribute_id
//	            AND fqns_on_attr.value_id IS NULL
//	    LEFT JOIN
//	        attribute_value_key_access_grants AS valkag
//	        ON kas.id = valkag.key_access_server_id
//	    LEFT JOIN
//	        attribute_fqns AS fqns_on_vals
//	        ON valkag.attribute_value_id = fqns_on_vals.value_id
//	    LEFT JOIN
//	        attribute_namespace_key_access_grants AS nskag
//	        ON kas.id = nskag.key_access_server_id
//	    LEFT JOIN
//	        attribute_fqns AS fqns_on_ns
//	            ON nskag.namespace_id = fqns_on_ns.namespace_id
//	        AND fqns_on_ns.attribute_id IS NULL AND fqns_on_ns.value_id IS NULL
//	    WHERE (NULLIF($3, '') IS NULL OR kas.id = $3::uuid)
//	        AND (NULLIF($4, '') IS NULL OR kas.uri = $4::varchar)
//	        AND (NULLIF($5, '') IS NULL OR kas.name = $5::varchar)
//	    GROUP BY
//	        kas.id
//	)
//	SELECT
//	    listed.kas_id,
//	    listed.kas_uri,
//	    listed.kas_name,
//	    listed.kas_public_key,
//	    listed.kas_metadata,
//	    listed.attributes_grants,
//	    listed.values_grants,
//	    listed.namespace_grants,
//	    listed.total
//	FROM listed
//	LIMIT $2
//	OFFSET $1
func (q *Queries) listKeyAccessServerGrants(ctx context.Context, arg listKeyAccessServerGrantsParams) ([]listKeyAccessServerGrantsRow, error) {
	rows, err := q.db.Query(ctx, listKeyAccessServerGrants,
		arg.Offset,
		arg.Limit,
		arg.KasID,
		arg.KasUri,
		arg.KasName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listKeyAccessServerGrantsRow
	for rows.Next() {
		var i listKeyAccessServerGrantsRow
		if err := rows.Scan(
			&i.KasID,
			&i.KasUri,
			&i.KasName,
			&i.KasPublicKey,
			&i.KasMetadata,
			&i.AttributesGrants,
			&i.ValuesGrants,
			&i.NamespaceGrants,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeyAccessServers = `-- name: listKeyAccessServers :many
WITH counted AS (
    SELECT COUNT(kas.id) AS total
    FROM key_access_servers AS kas
)
SELECT kas.id,
    kas.uri,
    kas.public_key,
    kas.name AS kas_name,
    kas.source_type,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', kas.metadata -> 'labels', 'created_at', kas.created_at, 'updated_at', kas.updated_at)) AS metadata,
    kask_keys.keys,
    counted.total
FROM key_access_servers AS kas
CROSS JOIN counted
LEFT JOIN (
        SELECT
            kask.key_access_server_id,
            JSONB_AGG(
                DISTINCT JSONB_BUILD_OBJECT(
                    'kas_uri', kas.uri,
                    'kas_id', kas.id,
                    'public_key', JSONB_BUILD_OBJECT(
                         'algorithm', kask.key_algorithm::INTEGER,
                         'kid', kask.key_id,
                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                    )
                )
            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
        FROM key_access_server_keys kask
        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
        GROUP BY kask.key_access_server_id
    ) kask_keys ON kas.id = kask_keys.key_access_server_id
LIMIT $2 
OFFSET $1
`

type listKeyAccessServersParams struct {
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

type listKeyAccessServersRow struct {
	ID         string      `json:"id"`
	Uri        string      `json:"uri"`
	PublicKey  []byte      `json:"public_key"`
	KasName    pgtype.Text `json:"kas_name"`
	SourceType pgtype.Text `json:"source_type"`
	Metadata   []byte      `json:"metadata"`
	Keys       []byte      `json:"keys"`
	Total      int64       `json:"total"`
}

// listKeyAccessServers
//
//	WITH counted AS (
//	    SELECT COUNT(kas.id) AS total
//	    FROM key_access_servers AS kas
//	)
//	SELECT kas.id,
//	    kas.uri,
//	    kas.public_key,
//	    kas.name AS kas_name,
//	    kas.source_type,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', kas.metadata -> 'labels', 'created_at', kas.created_at, 'updated_at', kas.updated_at)) AS metadata,
//	    kask_keys.keys,
//	    counted.total
//	FROM key_access_servers AS kas
//	CROSS JOIN counted
//	LEFT JOIN (
//	        SELECT
//	            kask.key_access_server_id,
//	            JSONB_AGG(
//	                DISTINCT JSONB_BUILD_OBJECT(
//	                    'kas_uri', kas.uri,
//	                    'kas_id', kas.id,
//	                    'public_key', JSONB_BUILD_OBJECT(
//	                         'algorithm', kask.key_algorithm::INTEGER,
//	                         'kid', kask.key_id,
//	                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                    )
//	                )
//	            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	        FROM key_access_server_keys kask
//	        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	        GROUP BY kask.key_access_server_id
//	    ) kask_keys ON kas.id = kask_keys.key_access_server_id
//	LIMIT $2
//	OFFSET $1
func (q *Queries) listKeyAccessServers(ctx context.Context, arg listKeyAccessServersParams) ([]listKeyAccessServersRow, error) {
	rows, err := q.db.Query(ctx, listKeyAccessServers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listKeyAccessServersRow
	for rows.Next() {
		var i listKeyAccessServersRow
		if err := rows.Scan(
			&i.ID,
			&i.Uri,
			&i.PublicKey,
			&i.KasName,
			&i.SourceType,
			&i.Metadata,
			&i.Keys,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeyMappings = `-- name: listKeyMappings :many
WITH filtered_keys AS (
    -- Get all keys matching the filter criteria
    SELECT
        kask.created_at,
        kask.id AS id,
        kask.key_id AS kid,
        kas.id AS kas_id,
        kas.uri AS kas_uri
    FROM key_access_server_keys kask
    INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
    WHERE (
        -- Case 1: Filter by system key ID if provided
        ($3::uuid IS NOT NULL AND kask.id = $3::uuid)
        -- Case 2: Filter by KID + at least one KAS identifier
        OR (
            $4::text IS NOT NULL 
            AND kask.key_id = $4::text
            AND (
                ($5::uuid IS NOT NULL AND kas.id = $5::uuid)
                OR ($6::text IS NOT NULL AND kas.name = $6::text)
                OR ($7::text IS NOT NULL AND kas.uri = $7::text)
            )
        )
        -- Case 3: Return all keys if no filters are provided
        OR (
            $3::uuid IS NULL 
            AND $4::text IS NULL
        )
    )
),
keys_with_mappings AS (
    SELECT id
    FROM filtered_keys fk
    WHERE EXISTS (
        SELECT 1 FROM attribute_namespace_public_key_map anpm WHERE anpm.key_access_server_key_id = fk.id
    ) OR EXISTS (
        SELECT 1 FROM attribute_definition_public_key_map adpm WHERE adpm.key_access_server_key_id = fk.id
    ) OR EXISTS (
        SELECT 1 FROM attribute_value_public_key_map avpm WHERE avpm.key_access_server_key_id = fk.id
    )
),
keys_with_mappings_count AS (
    SELECT COUNT(*) AS total FROM keys_with_mappings
),
namespace_mappings AS (
    -- Get namespace mappings for each key
    SELECT 
        fk.id as key_id,
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', anpm.namespace_id,
                'fqn', fqns.fqn
            )
        ) FILTER (WHERE anpm.namespace_id IS NOT NULL) AS namespace_mappings
    FROM filtered_keys fk
    INNER JOIN attribute_namespace_public_key_map anpm ON fk.id = anpm.key_access_server_key_id
    INNER JOIN attribute_fqns fqns ON anpm.namespace_id = fqns.namespace_id AND fqns.attribute_id IS NULL AND fqns.value_id IS NULL
    GROUP BY fk.id
),
definition_mappings AS (
    -- Get attribute definition mappings for each key
    SELECT 
        fk.id as key_id,
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', adpm.definition_id,
                'fqn', fqns.fqn
            )
        ) FILTER (WHERE adpm.definition_id IS NOT NULL) AS definition_mappings
    FROM filtered_keys fk
    INNER JOIN attribute_definition_public_key_map adpm ON fk.id = adpm.key_access_server_key_id
    INNER JOIN attribute_fqns fqns ON adpm.definition_id = fqns.attribute_id AND fqns.value_id IS NULL
    GROUP BY fk.id
),
value_mappings AS (
    -- Get attribute value mappings for each key
    SELECT 
        fk.id as key_id,
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', avpm.value_id,
                'fqn', fqns.fqn
            )
        ) FILTER (WHERE avpm.value_id IS NOT NULL) AS value_mappings
    FROM filtered_keys fk
    INNER JOIN attribute_value_public_key_map avpm ON fk.id = avpm.key_access_server_key_id
    INNER JOIN attribute_fqns fqns ON avpm.value_id = fqns.value_id
    GROUP BY fk.id
)
SELECT 
    fk.kid,
    fk.kas_uri,
    COALESCE(nm.namespace_mappings, '[]'::json) AS namespace_mappings,
    COALESCE(dm.definition_mappings, '[]'::json) AS attribute_mappings,
    COALESCE(vm.value_mappings, '[]'::json) AS value_mappings,
    kwmc.total
FROM filtered_keys fk
INNER JOIN keys_with_mappings kwm ON fk.id = kwm.id
CROSS JOIN keys_with_mappings_count kwmc
LEFT JOIN namespace_mappings nm ON fk.id = nm.key_id
LEFT JOIN definition_mappings dm ON fk.id = dm.key_id
LEFT JOIN value_mappings vm ON fk.id = vm.key_id
ORDER BY fk.created_at
LIMIT $2 
OFFSET $1
`

type listKeyMappingsParams struct {
	Offset  int32       `json:"offset_"`
	Limit   int32       `json:"limit_"`
	ID      pgtype.UUID `json:"id"`
	Kid     pgtype.Text `json:"kid"`
	KasID   pgtype.UUID `json:"kas_id"`
	KasName pgtype.Text `json:"kas_name"`
	KasUri  pgtype.Text `json:"kas_uri"`
}

type listKeyMappingsRow struct {
	Kid               string `json:"kid"`
	KasUri            string `json:"kas_uri"`
	NamespaceMappings []byte `json:"namespace_mappings"`
	AttributeMappings []byte `json:"attribute_mappings"`
	ValueMappings     []byte `json:"value_mappings"`
	Total             int64  `json:"total"`
}

// listKeyMappings
//
//	WITH filtered_keys AS (
//	    -- Get all keys matching the filter criteria
//	    SELECT
//	        kask.created_at,
//	        kask.id AS id,
//	        kask.key_id AS kid,
//	        kas.id AS kas_id,
//	        kas.uri AS kas_uri
//	    FROM key_access_server_keys kask
//	    INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	    WHERE (
//	        -- Case 1: Filter by system key ID if provided
//	        ($3::uuid IS NOT NULL AND kask.id = $3::uuid)
//	        -- Case 2: Filter by KID + at least one KAS identifier
//	        OR (
//	            $4::text IS NOT NULL
//	            AND kask.key_id = $4::text
//	            AND (
//	                ($5::uuid IS NOT NULL AND kas.id = $5::uuid)
//	                OR ($6::text IS NOT NULL AND kas.name = $6::text)
//	                OR ($7::text IS NOT NULL AND kas.uri = $7::text)
//	            )
//	        )
//	        -- Case 3: Return all keys if no filters are provided
//	        OR (
//	            $3::uuid IS NULL
//	            AND $4::text IS NULL
//	        )
//	    )
//	),
//	keys_with_mappings AS (
//	    SELECT id
//	    FROM filtered_keys fk
//	    WHERE EXISTS (
//	        SELECT 1 FROM attribute_namespace_public_key_map anpm WHERE anpm.key_access_server_key_id = fk.id
//	    ) OR EXISTS (
//	        SELECT 1 FROM attribute_definition_public_key_map adpm WHERE adpm.key_access_server_key_id = fk.id
//	    ) OR EXISTS (
//	        SELECT 1 FROM attribute_value_public_key_map avpm WHERE avpm.key_access_server_key_id = fk.id
//	    )
//	),
//	keys_with_mappings_count AS (
//	    SELECT COUNT(*) AS total FROM keys_with_mappings
//	),
//	namespace_mappings AS (
//	    -- Get namespace mappings for each key
//	    SELECT
//	        fk.id as key_id,
//	        JSON_AGG(
//	            JSON_BUILD_OBJECT(
//	                'id', anpm.namespace_id,
//	                'fqn', fqns.fqn
//	            )
//	        ) FILTER (WHERE anpm.namespace_id IS NOT NULL) AS namespace_mappings
//	    FROM filtered_keys fk
//	    INNER JOIN attribute_namespace_public_key_map anpm ON fk.id = anpm.key_access_server_key_id
//	    INNER JOIN attribute_fqns fqns ON anpm.namespace_id = fqns.namespace_id AND fqns.attribute_id IS NULL AND fqns.value_id IS NULL
//	    GROUP BY fk.id
//	),
//	definition_mappings AS (
//	    -- Get attribute definition mappings for each key
//	    SELECT
//	        fk.id as key_id,
//	        JSON_AGG(
//	            JSON_BUILD_OBJECT(
//	                'id', adpm.definition_id,
//	                'fqn', fqns.fqn
//	            )
//	        ) FILTER (WHERE adpm.definition_id IS NOT NULL) AS definition_mappings
//	    FROM filtered_keys fk
//	    INNER JOIN attribute_definition_public_key_map adpm ON fk.id = adpm.key_access_server_key_id
//	    INNER JOIN attribute_fqns fqns ON adpm.definition_id = fqns.attribute_id AND fqns.value_id IS NULL
//	    GROUP BY fk.id
//	),
//	value_mappings AS (
//	    -- Get attribute value mappings for each key
//	    SELECT
//	        fk.id as key_id,
//	        JSON_AGG(
//	            JSON_BUILD_OBJECT(
//	                'id', avpm.value_id,
//	                'fqn', fqns.fqn
//	            )
//	        ) FILTER (WHERE avpm.value_id IS NOT NULL) AS value_mappings
//	    FROM filtered_keys fk
//	    INNER JOIN attribute_value_public_key_map avpm ON fk.id = avpm.key_access_server_key_id
//	    INNER JOIN attribute_fqns fqns ON avpm.value_id = fqns.value_id
//	    GROUP BY fk.id
//	)
//	SELECT
//	    fk.kid,
//	    fk.kas_uri,
//	    COALESCE(nm.namespace_mappings, '[]'::json) AS namespace_mappings,
//	    COALESCE(dm.definition_mappings, '[]'::json) AS attribute_mappings,
//	    COALESCE(vm.value_mappings, '[]'::json) AS value_mappings,
//	    kwmc.total
//	FROM filtered_keys fk
//	INNER JOIN keys_with_mappings kwm ON fk.id = kwm.id
//	CROSS JOIN keys_with_mappings_count kwmc
//	LEFT JOIN namespace_mappings nm ON fk.id = nm.key_id
//	LEFT JOIN definition_mappings dm ON fk.id = dm.key_id
//	LEFT JOIN value_mappings vm ON fk.id = vm.key_id
//	ORDER BY fk.created_at
//	LIMIT $2
//	OFFSET $1
func (q *Queries) listKeyMappings(ctx context.Context, arg listKeyMappingsParams) ([]listKeyMappingsRow, error) {
	rows, err := q.db.Query(ctx, listKeyMappings,
		arg.Offset,
		arg.Limit,
		arg.ID,
		arg.Kid,
		arg.KasID,
		arg.KasName,
		arg.KasUri,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listKeyMappingsRow
	for rows.Next() {
		var i listKeyMappingsRow
		if err := rows.Scan(
			&i.Kid,
			&i.KasUri,
			&i.NamespaceMappings,
			&i.AttributeMappings,
			&i.ValueMappings,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeys = `-- name: listKeys :many
WITH listed AS (
    SELECT
        kas.id AS kas_id,
        kas.uri AS kas_uri
    FROM key_access_servers AS kas
    WHERE ($4::uuid IS NULL OR kas.id = $4::uuid)
            AND ($5::text IS NULL OR kas.name = $5::text)
            AND ($6::text IS NULL OR kas.uri = $6::text)
)
SELECT 
  COUNT(*) OVER () AS total,
  kask.id,
  kask.key_id,
  kask.key_status,
  kask.key_mode,
  kask.key_algorithm,
  kask.private_key_ctx,
  kask.public_key_ctx,
  kask.provider_config_id,
  kask.key_access_server_id,
  listed.kas_uri AS kas_uri,
  JSON_STRIP_NULLS(
    JSON_BUILD_OBJECT(
      'labels', kask.metadata -> 'labels',         
      'created_at', kask.created_at,               
      'updated_at', kask.updated_at                
    )
  ) AS metadata,
  pc.provider_name,
  pc.config AS provider_config,
  JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS pc_metadata
FROM key_access_server_keys AS kask
INNER JOIN
    listed ON kask.key_access_server_id = listed.kas_id
LEFT JOIN 
    provider_config as pc ON kask.provider_config_id = pc.id
WHERE
    ($1::integer IS NULL OR kask.key_algorithm = $1::integer)
ORDER BY kask.created_at DESC
LIMIT $3 
OFFSET $2
`

type listKeysParams struct {
	KeyAlgorithm pgtype.Int4 `json:"key_algorithm"`
	Offset       int32       `json:"offset_"`
	Limit        int32       `json:"limit_"`
	KasID        pgtype.UUID `json:"kas_id"`
	KasName      pgtype.Text `json:"kas_name"`
	KasUri       pgtype.Text `json:"kas_uri"`
}

type listKeysRow struct {
	Total             int64       `json:"total"`
	ID                string      `json:"id"`
	KeyID             string      `json:"key_id"`
	KeyStatus         int32       `json:"key_status"`
	KeyMode           int32       `json:"key_mode"`
	KeyAlgorithm      int32       `json:"key_algorithm"`
	PrivateKeyCtx     []byte      `json:"private_key_ctx"`
	PublicKeyCtx      []byte      `json:"public_key_ctx"`
	ProviderConfigID  pgtype.UUID `json:"provider_config_id"`
	KeyAccessServerID string      `json:"key_access_server_id"`
	KasUri            string      `json:"kas_uri"`
	Metadata          []byte      `json:"metadata"`
	ProviderName      pgtype.Text `json:"provider_name"`
	ProviderConfig    []byte      `json:"provider_config"`
	PcMetadata        []byte      `json:"pc_metadata"`
}

// listKeys
//
//	WITH listed AS (
//	    SELECT
//	        kas.id AS kas_id,
//	        kas.uri AS kas_uri
//	    FROM key_access_servers AS kas
//	    WHERE ($4::uuid IS NULL OR kas.id = $4::uuid)
//	            AND ($5::text IS NULL OR kas.name = $5::text)
//	            AND ($6::text IS NULL OR kas.uri = $6::text)
//	)
//	SELECT
//	  COUNT(*) OVER () AS total,
//	  kask.id,
//	  kask.key_id,
//	  kask.key_status,
//	  kask.key_mode,
//	  kask.key_algorithm,
//	  kask.private_key_ctx,
//	  kask.public_key_ctx,
//	  kask.provider_config_id,
//	  kask.key_access_server_id,
//	  listed.kas_uri AS kas_uri,
//	  JSON_STRIP_NULLS(
//	    JSON_BUILD_OBJECT(
//	      'labels', kask.metadata -> 'labels',
//	      'created_at', kask.created_at,
//	      'updated_at', kask.updated_at
//	    )
//	  ) AS metadata,
//	  pc.provider_name,
//	  pc.config AS provider_config,
//	  JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS pc_metadata
//	FROM key_access_server_keys AS kask
//	INNER JOIN
//	    listed ON kask.key_access_server_id = listed.kas_id
//	LEFT JOIN
//	    provider_config as pc ON kask.provider_config_id = pc.id
//	WHERE
//	    ($1::integer IS NULL OR kask.key_algorithm = $1::integer)
//	ORDER BY kask.created_at DESC
//	LIMIT $3
//	OFFSET $2
func (q *Queries) listKeys(ctx context.Context, arg listKeysParams) ([]listKeysRow, error) {
	rows, err := q.db.Query(ctx, listKeys,
		arg.KeyAlgorithm,
		arg.Offset,
		arg.Limit,
		arg.KasID,
		arg.KasName,
		arg.KasUri,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listKeysRow
	for rows.Next() {
		var i listKeysRow
		if err := rows.Scan(
			&i.Total,
			&i.ID,
			&i.KeyID,
			&i.KeyStatus,
			&i.KeyMode,
			&i.KeyAlgorithm,
			&i.PrivateKeyCtx,
			&i.PublicKeyCtx,
			&i.ProviderConfigID,
			&i.KeyAccessServerID,
			&i.KasUri,
			&i.Metadata,
			&i.ProviderName,
			&i.ProviderConfig,
			&i.PcMetadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBaseKey = `-- name: setBaseKey :execrows
INSERT INTO base_keys (key_access_server_key_id)
VALUES ($1)
`

// setBaseKey
//
//	INSERT INTO base_keys (key_access_server_key_id)
//	VALUES ($1)
func (q *Queries) setBaseKey(ctx context.Context, keyAccessServerKeyID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, setBaseKey, keyAccessServerKeyID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateKey = `-- name: updateKey :execrows
UPDATE key_access_server_keys
SET
    key_status = COALESCE($2, key_status),
    metadata = COALESCE($3, metadata)
WHERE id = $1
`

type updateKeyParams struct {
	ID        string      `json:"id"`
	KeyStatus pgtype.Int4 `json:"key_status"`
	Metadata  []byte      `json:"metadata"`
}

// updateKey
//
//	UPDATE key_access_server_keys
//	SET
//	    key_status = COALESCE($2, key_status),
//	    metadata = COALESCE($3, metadata)
//	WHERE id = $1
func (q *Queries) updateKey(ctx context.Context, arg updateKeyParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateKey, arg.ID, arg.KeyStatus, arg.Metadata)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateKeyAccessServer = `-- name: updateKeyAccessServer :execrows
UPDATE key_access_servers
SET
    uri = COALESCE($2, uri),
    public_key = COALESCE($3, public_key),
    name = COALESCE($4, name),
    metadata = COALESCE($5, metadata),
    source_type = COALESCE($6, source_type)
WHERE id = $1
`

type updateKeyAccessServerParams struct {
	ID         string      `json:"id"`
	Uri        pgtype.Text `json:"uri"`
	PublicKey  []byte      `json:"public_key"`
	Name       pgtype.Text `json:"name"`
	Metadata   []byte      `json:"metadata"`
	SourceType pgtype.Text `json:"source_type"`
}

// updateKeyAccessServer
//
//	UPDATE key_access_servers
//	SET
//	    uri = COALESCE($2, uri),
//	    public_key = COALESCE($3, public_key),
//	    name = COALESCE($4, name),
//	    metadata = COALESCE($5, metadata),
//	    source_type = COALESCE($6, source_type)
//	WHERE id = $1
func (q *Queries) updateKeyAccessServer(ctx context.Context, arg updateKeyAccessServerParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateKeyAccessServer,
		arg.ID,
		arg.Uri,
		arg.PublicKey,
		arg.Name,
		arg.Metadata,
		arg.SourceType,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
