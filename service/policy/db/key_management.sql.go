// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_management.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProviderConfig = `-- name: createProviderConfig :one

WITH inserted AS (
  INSERT INTO provider_config (provider_name, manager, config, metadata)
  VALUES ($1, $2, $3, $4)
  RETURNING id, provider_name, config, created_at, updated_at, metadata, manager
)
SELECT 
  id,
  provider_name,
  manager,
  config,
  JSON_STRIP_NULLS(
    JSON_BUILD_OBJECT(
      'labels', metadata -> 'labels',         
      'created_at', created_at,               
      'updated_at', updated_at                
    )
  ) AS metadata
FROM inserted
`

type createProviderConfigParams struct {
	ProviderName string `json:"provider_name"`
	Manager      string `json:"manager"`
	Config       []byte `json:"config"`
	Metadata     []byte `json:"metadata"`
}

type createProviderConfigRow struct {
	ID           string `json:"id"`
	ProviderName string `json:"provider_name"`
	Manager      string `json:"manager"`
	Config       []byte `json:"config"`
	Metadata     []byte `json:"metadata"`
}

// --------------------------------------------------------------
// Provider Config
// --------------------------------------------------------------
//
//	WITH inserted AS (
//	  INSERT INTO provider_config (provider_name, manager, config, metadata)
//	  VALUES ($1, $2, $3, $4)
//	  RETURNING id, provider_name, config, created_at, updated_at, metadata, manager
//	)
//	SELECT
//	  id,
//	  provider_name,
//	  manager,
//	  config,
//	  JSON_STRIP_NULLS(
//	    JSON_BUILD_OBJECT(
//	      'labels', metadata -> 'labels',
//	      'created_at', created_at,
//	      'updated_at', updated_at
//	    )
//	  ) AS metadata
//	FROM inserted
func (q *Queries) createProviderConfig(ctx context.Context, arg createProviderConfigParams) (createProviderConfigRow, error) {
	row := q.db.QueryRow(ctx, createProviderConfig,
		arg.ProviderName,
		arg.Manager,
		arg.Config,
		arg.Metadata,
	)
	var i createProviderConfigRow
	err := row.Scan(
		&i.ID,
		&i.ProviderName,
		&i.Manager,
		&i.Config,
		&i.Metadata,
	)
	return i, err
}

const deleteProviderConfig = `-- name: deleteProviderConfig :execrows
DELETE FROM provider_config 
WHERE id = $1
`

// deleteProviderConfig
//
//	DELETE FROM provider_config
//	WHERE id = $1
func (q *Queries) deleteProviderConfig(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProviderConfig, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getProviderConfig = `-- name: getProviderConfig :one
SELECT 
    pc.id,
    pc.provider_name,
    pc.manager,
    pc.config,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS metadata
FROM provider_config AS pc
WHERE ($1::uuid IS NULL OR pc.id = $1::uuid)
  AND ($2::text IS NULL OR pc.provider_name = $2::text)
  AND ($3::text IS NULL OR pc.manager = $3::text)
`

type getProviderConfigParams struct {
	ID      pgtype.UUID `json:"id"`
	Name    pgtype.Text `json:"name"`
	Manager pgtype.Text `json:"manager"`
}

type getProviderConfigRow struct {
	ID           string `json:"id"`
	ProviderName string `json:"provider_name"`
	Manager      string `json:"manager"`
	Config       []byte `json:"config"`
	Metadata     []byte `json:"metadata"`
}

// getProviderConfig
//
//	SELECT
//	    pc.id,
//	    pc.provider_name,
//	    pc.manager,
//	    pc.config,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS metadata
//	FROM provider_config AS pc
//	WHERE ($1::uuid IS NULL OR pc.id = $1::uuid)
//	  AND ($2::text IS NULL OR pc.provider_name = $2::text)
//	  AND ($3::text IS NULL OR pc.manager = $3::text)
func (q *Queries) getProviderConfig(ctx context.Context, arg getProviderConfigParams) (getProviderConfigRow, error) {
	row := q.db.QueryRow(ctx, getProviderConfig, arg.ID, arg.Name, arg.Manager)
	var i getProviderConfigRow
	err := row.Scan(
		&i.ID,
		&i.ProviderName,
		&i.Manager,
		&i.Config,
		&i.Metadata,
	)
	return i, err
}

const listProviderConfigs = `-- name: listProviderConfigs :many
WITH counted AS (
    SELECT COUNT(pc.id) AS total 
    FROM provider_config pc
)
SELECT 
    pc.id,
    pc.provider_name,
    pc.manager,
    pc.config,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS metadata,
    counted.total
FROM provider_config AS pc
CROSS JOIN counted
LIMIT $2 
OFFSET $1
`

type listProviderConfigsParams struct {
	Offset int32 `json:"offset_"`
	Limit  int32 `json:"limit_"`
}

type listProviderConfigsRow struct {
	ID           string `json:"id"`
	ProviderName string `json:"provider_name"`
	Manager      string `json:"manager"`
	Config       []byte `json:"config"`
	Metadata     []byte `json:"metadata"`
	Total        int64  `json:"total"`
}

// listProviderConfigs
//
//	WITH counted AS (
//	    SELECT COUNT(pc.id) AS total
//	    FROM provider_config pc
//	)
//	SELECT
//	    pc.id,
//	    pc.provider_name,
//	    pc.manager,
//	    pc.config,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', pc.metadata -> 'labels', 'created_at', pc.created_at, 'updated_at', pc.updated_at)) AS metadata,
//	    counted.total
//	FROM provider_config AS pc
//	CROSS JOIN counted
//	LIMIT $2
//	OFFSET $1
func (q *Queries) listProviderConfigs(ctx context.Context, arg listProviderConfigsParams) ([]listProviderConfigsRow, error) {
	rows, err := q.db.Query(ctx, listProviderConfigs, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listProviderConfigsRow
	for rows.Next() {
		var i listProviderConfigsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProviderName,
			&i.Manager,
			&i.Config,
			&i.Metadata,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProviderConfig = `-- name: updateProviderConfig :execrows
UPDATE provider_config
SET
    provider_name = COALESCE($2, provider_name),
    manager = COALESCE($3, manager),
    config = COALESCE($4, config),
    metadata = COALESCE($5, metadata)
WHERE id = $1
`

type updateProviderConfigParams struct {
	ID           string      `json:"id"`
	ProviderName pgtype.Text `json:"provider_name"`
	Manager      pgtype.Text `json:"manager"`
	Config       []byte      `json:"config"`
	Metadata     []byte      `json:"metadata"`
}

// updateProviderConfig
//
//	UPDATE provider_config
//	SET
//	    provider_name = COALESCE($2, provider_name),
//	    manager = COALESCE($3, manager),
//	    config = COALESCE($4, config),
//	    metadata = COALESCE($5, metadata)
//	WHERE id = $1
func (q *Queries) updateProviderConfig(ctx context.Context, arg updateProviderConfigParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateProviderConfig,
		arg.ID,
		arg.ProviderName,
		arg.Manager,
		arg.Config,
		arg.Metadata,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
