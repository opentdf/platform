// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AttributeDefinitionRule string

const (
	AttributeDefinitionRuleUNSPECIFIED AttributeDefinitionRule = "UNSPECIFIED"
	AttributeDefinitionRuleALLOF       AttributeDefinitionRule = "ALL_OF"
	AttributeDefinitionRuleANYOF       AttributeDefinitionRule = "ANY_OF"
	AttributeDefinitionRuleHIERARCHY   AttributeDefinitionRule = "HIERARCHY"
)

func (e *AttributeDefinitionRule) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttributeDefinitionRule(s)
	case string:
		*e = AttributeDefinitionRule(s)
	default:
		return fmt.Errorf("unsupported scan type for AttributeDefinitionRule: %T", src)
	}
	return nil
}

type NullAttributeDefinitionRule struct {
	AttributeDefinitionRule AttributeDefinitionRule `json:"attribute_definition_rule"`
	Valid                   bool                    `json:"valid"` // Valid is true if AttributeDefinitionRule is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttributeDefinitionRule) Scan(value interface{}) error {
	if value == nil {
		ns.AttributeDefinitionRule, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttributeDefinitionRule.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttributeDefinitionRule) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttributeDefinitionRule), nil
}

type AttributeDefinition struct {
	ID          string                  `json:"id"`
	NamespaceID string                  `json:"namespace_id"`
	Name        string                  `json:"name"`
	Rule        AttributeDefinitionRule `json:"rule"`
	Metadata    []byte                  `json:"metadata"`
	Active      bool                    `json:"active"`
	CreatedAt   pgtype.Timestamptz      `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz      `json:"updated_at"`
	ValuesOrder []string                `json:"values_order"`
}

type AttributeDefinitionKeyAccessGrant struct {
	AttributeDefinitionID string `json:"attribute_definition_id"`
	KeyAccessServerID     string `json:"key_access_server_id"`
}

type AttributeFqn struct {
	ID          string      `json:"id"`
	NamespaceID pgtype.UUID `json:"namespace_id"`
	AttributeID pgtype.UUID `json:"attribute_id"`
	ValueID     pgtype.UUID `json:"value_id"`
	Fqn         string      `json:"fqn"`
}

type AttributeNamespace struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Active    bool               `json:"active"`
	Metadata  []byte             `json:"metadata"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type AttributeValue struct {
	ID                    string             `json:"id"`
	AttributeDefinitionID string             `json:"attribute_definition_id"`
	Value                 string             `json:"value"`
	Members               []string           `json:"members"`
	Metadata              []byte             `json:"metadata"`
	Active                bool               `json:"active"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
}

type AttributeValueKeyAccessGrant struct {
	AttributeValueID  string `json:"attribute_value_id"`
	KeyAccessServerID string `json:"key_access_server_id"`
}

type AttributeValueMember struct {
	ID       string `json:"id"`
	ValueID  string `json:"value_id"`
	MemberID string `json:"member_id"`
}

type KeyAccessServer struct {
	ID        string             `json:"id"`
	Uri       string             `json:"uri"`
	PublicKey []byte             `json:"public_key"`
	Metadata  []byte             `json:"metadata"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Resource struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Namespace   string      `json:"namespace"`
	Version     int32       `json:"version"`
	Fqn         pgtype.Text `json:"fqn"`
	Labels      []byte      `json:"labels"`
	Description pgtype.Text `json:"description"`
	Policytype  string      `json:"policytype"`
	Resource    []byte      `json:"resource"`
}

type ResourceMapping struct {
	ID               string             `json:"id"`
	AttributeValueID string             `json:"attribute_value_id"`
	Terms            []string           `json:"terms"`
	Metadata         []byte             `json:"metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type SubjectConditionSet struct {
	ID        string             `json:"id"`
	Condition []byte             `json:"condition"`
	Metadata  []byte             `json:"metadata"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type SubjectMapping struct {
	ID                    string             `json:"id"`
	AttributeValueID      string             `json:"attribute_value_id"`
	Metadata              []byte             `json:"metadata"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	SubjectConditionSetID pgtype.UUID        `json:"subject_condition_set_id"`
	Actions               []byte             `json:"actions"`
}
