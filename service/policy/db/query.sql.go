// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignKeyAccessServerToAttribute = `-- name: AssignKeyAccessServerToAttribute :execrows
INSERT INTO attribute_definition_key_access_grants (attribute_definition_id, key_access_server_id)
VALUES ($1, $2)
`

type AssignKeyAccessServerToAttributeParams struct {
	AttributeDefinitionID string `json:"attribute_definition_id"`
	KeyAccessServerID     string `json:"key_access_server_id"`
}

// -----------------------
// For Testing Only!!!!!!!!!
// -----------------------
//
//	INSERT INTO attribute_definition_key_access_grants (attribute_definition_id, key_access_server_id)
//	VALUES ($1, $2)
func (q *Queries) AssignKeyAccessServerToAttribute(ctx context.Context, arg AssignKeyAccessServerToAttributeParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignKeyAccessServerToAttribute, arg.AttributeDefinitionID, arg.KeyAccessServerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignKeyAccessServerToAttributeValue = `-- name: AssignKeyAccessServerToAttributeValue :execrows
INSERT INTO attribute_value_key_access_grants (attribute_value_id, key_access_server_id)
VALUES ($1, $2)
`

type AssignKeyAccessServerToAttributeValueParams struct {
	AttributeValueID  string `json:"attribute_value_id"`
	KeyAccessServerID string `json:"key_access_server_id"`
}

// AssignKeyAccessServerToAttributeValue
//
//	INSERT INTO attribute_value_key_access_grants (attribute_value_id, key_access_server_id)
//	VALUES ($1, $2)
func (q *Queries) AssignKeyAccessServerToAttributeValue(ctx context.Context, arg AssignKeyAccessServerToAttributeValueParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignKeyAccessServerToAttributeValue, arg.AttributeValueID, arg.KeyAccessServerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignKeyAccessServerToNamespace = `-- name: AssignKeyAccessServerToNamespace :execrows
INSERT INTO attribute_namespace_key_access_grants (namespace_id, key_access_server_id)
VALUES ($1, $2)
`

type AssignKeyAccessServerToNamespaceParams struct {
	NamespaceID       string `json:"namespace_id"`
	KeyAccessServerID string `json:"key_access_server_id"`
}

// AssignKeyAccessServerToNamespace
//
//	INSERT INTO attribute_namespace_key_access_grants (namespace_id, key_access_server_id)
//	VALUES ($1, $2)
func (q *Queries) AssignKeyAccessServerToNamespace(ctx context.Context, arg AssignKeyAccessServerToNamespaceParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignKeyAccessServerToNamespace, arg.NamespaceID, arg.KeyAccessServerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attribute_definitions (namespace_id, name, rule, metadata)
VALUES ($1, $2, $3, $4) 
RETURNING id
`

type CreateAttributeParams struct {
	NamespaceID string                  `json:"namespace_id"`
	Name        string                  `json:"name"`
	Rule        AttributeDefinitionRule `json:"rule"`
	Metadata    []byte                  `json:"metadata"`
}

// CreateAttribute
//
//	INSERT INTO attribute_definitions (namespace_id, name, rule, metadata)
//	VALUES ($1, $2, $3, $4)
//	RETURNING id
func (q *Queries) CreateAttribute(ctx context.Context, arg CreateAttributeParams) (string, error) {
	row := q.db.QueryRow(ctx, createAttribute,
		arg.NamespaceID,
		arg.Name,
		arg.Rule,
		arg.Metadata,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createAttributeValue = `-- name: CreateAttributeValue :one
INSERT INTO attribute_values (attribute_definition_id, value, metadata)
VALUES ($1, $2, $3) 
RETURNING id
`

type CreateAttributeValueParams struct {
	AttributeDefinitionID string `json:"attribute_definition_id"`
	Value                 string `json:"value"`
	Metadata              []byte `json:"metadata"`
}

// CreateAttributeValue
//
//	INSERT INTO attribute_values (attribute_definition_id, value, metadata)
//	VALUES ($1, $2, $3)
//	RETURNING id
func (q *Queries) CreateAttributeValue(ctx context.Context, arg CreateAttributeValueParams) (string, error) {
	row := q.db.QueryRow(ctx, createAttributeValue, arg.AttributeDefinitionID, arg.Value, arg.Metadata)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteAttribute = `-- name: DeleteAttribute :execrows
DELETE FROM attribute_definitions WHERE id = $1
`

// DeleteAttribute
//
//	DELETE FROM attribute_definitions WHERE id = $1
func (q *Queries) DeleteAttribute(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAttribute, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteAttributeValue = `-- name: DeleteAttributeValue :execrows
DELETE FROM attribute_values WHERE id = $1
`

// DeleteAttributeValue
//
//	DELETE FROM attribute_values WHERE id = $1
func (q *Queries) DeleteAttributeValue(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAttributeValue, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAttribute = `-- name: GetAttribute :one
SELECT
    ad.id,
    ad.name as attribute_name,
    ad.rule,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
    ad.namespace_id,
    ad.active,
    n.name as namespace_name,
    JSON_AGG(
        JSON_BUILD_OBJECT(
            'id', avt.id,
            'value', avt.value,
            'active', avt.active,
            'fqn', CONCAT(fqns.fqn, '/value/', avt.value)
        ) ORDER BY ARRAY_POSITION(ad.values_order, avt.id)
    ) AS values,
    JSONB_AGG(
        DISTINCT JSONB_BUILD_OBJECT(
            'id', kas.id,
            'uri', kas.uri,
            'name', kas.name,
            'public_key', kas.public_key
        )
    ) FILTER (WHERE adkag.attribute_definition_id IS NOT NULL) AS grants,
    fqns.fqn,
    defk.keys as keys
FROM attribute_definitions ad
LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
LEFT JOIN (
    SELECT
        av.id,
        av.value,
        av.active,
        av.attribute_definition_id
    FROM attribute_values av
    GROUP BY av.id
) avt ON avt.attribute_definition_id = ad.id
LEFT JOIN attribute_definition_key_access_grants adkag ON adkag.attribute_definition_id = ad.id
LEFT JOIN key_access_servers kas ON kas.id = adkag.key_access_server_id
LEFT JOIN attribute_fqns fqns ON fqns.attribute_id = ad.id AND fqns.value_id IS NULL
LEFT JOIN (
    SELECT
        k.definition_id,
        JSONB_AGG(
            DISTINCT JSONB_BUILD_OBJECT(
                'kas_uri', kas.uri,
                'kas_id', kas.id,
                'public_key', JSONB_BUILD_OBJECT(
                     'algorithm', kask.key_algorithm::INTEGER,
                     'kid', kask.key_id,
                     'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                )
            )
        ) FILTER (WHERE kask.id IS NOT NULL) AS keys
    FROM attribute_definition_public_key_map k
    INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
    INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
    GROUP BY k.definition_id
) defk ON ad.id = defk.definition_id
WHERE ($1::uuid IS NULL OR ad.id = $1::uuid)
  AND ($2::text IS NULL OR REGEXP_REPLACE(fqns.fqn, '^https?://', '') = REGEXP_REPLACE($2::text, '^https?://', ''))
GROUP BY ad.id, n.name, fqns.fqn, defk.keys
`

type GetAttributeParams struct {
	ID  pgtype.UUID `json:"id"`
	Fqn pgtype.Text `json:"fqn"`
}

type GetAttributeRow struct {
	ID            string                  `json:"id"`
	AttributeName string                  `json:"attribute_name"`
	Rule          AttributeDefinitionRule `json:"rule"`
	Metadata      []byte                  `json:"metadata"`
	NamespaceID   string                  `json:"namespace_id"`
	Active        bool                    `json:"active"`
	NamespaceName pgtype.Text             `json:"namespace_name"`
	Values        []byte                  `json:"values"`
	Grants        []byte                  `json:"grants"`
	Fqn           pgtype.Text             `json:"fqn"`
	Keys          []byte                  `json:"keys"`
}

// GetAttribute
//
//	SELECT
//	    ad.id,
//	    ad.name as attribute_name,
//	    ad.rule,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
//	    ad.namespace_id,
//	    ad.active,
//	    n.name as namespace_name,
//	    JSON_AGG(
//	        JSON_BUILD_OBJECT(
//	            'id', avt.id,
//	            'value', avt.value,
//	            'active', avt.active,
//	            'fqn', CONCAT(fqns.fqn, '/value/', avt.value)
//	        ) ORDER BY ARRAY_POSITION(ad.values_order, avt.id)
//	    ) AS values,
//	    JSONB_AGG(
//	        DISTINCT JSONB_BUILD_OBJECT(
//	            'id', kas.id,
//	            'uri', kas.uri,
//	            'name', kas.name,
//	            'public_key', kas.public_key
//	        )
//	    ) FILTER (WHERE adkag.attribute_definition_id IS NOT NULL) AS grants,
//	    fqns.fqn,
//	    defk.keys as keys
//	FROM attribute_definitions ad
//	LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
//	LEFT JOIN (
//	    SELECT
//	        av.id,
//	        av.value,
//	        av.active,
//	        av.attribute_definition_id
//	    FROM attribute_values av
//	    GROUP BY av.id
//	) avt ON avt.attribute_definition_id = ad.id
//	LEFT JOIN attribute_definition_key_access_grants adkag ON adkag.attribute_definition_id = ad.id
//	LEFT JOIN key_access_servers kas ON kas.id = adkag.key_access_server_id
//	LEFT JOIN attribute_fqns fqns ON fqns.attribute_id = ad.id AND fqns.value_id IS NULL
//	LEFT JOIN (
//	    SELECT
//	        k.definition_id,
//	        JSONB_AGG(
//	            DISTINCT JSONB_BUILD_OBJECT(
//	                'kas_uri', kas.uri,
//	                'kas_id', kas.id,
//	                'public_key', JSONB_BUILD_OBJECT(
//	                     'algorithm', kask.key_algorithm::INTEGER,
//	                     'kid', kask.key_id,
//	                     'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                )
//	            )
//	        ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	    FROM attribute_definition_public_key_map k
//	    INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
//	    INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	    GROUP BY k.definition_id
//	) defk ON ad.id = defk.definition_id
//	WHERE ($1::uuid IS NULL OR ad.id = $1::uuid)
//	  AND ($2::text IS NULL OR REGEXP_REPLACE(fqns.fqn, '^https?://', '') = REGEXP_REPLACE($2::text, '^https?://', ''))
//	GROUP BY ad.id, n.name, fqns.fqn, defk.keys
func (q *Queries) GetAttribute(ctx context.Context, arg GetAttributeParams) (GetAttributeRow, error) {
	row := q.db.QueryRow(ctx, getAttribute, arg.ID, arg.Fqn)
	var i GetAttributeRow
	err := row.Scan(
		&i.ID,
		&i.AttributeName,
		&i.Rule,
		&i.Metadata,
		&i.NamespaceID,
		&i.Active,
		&i.NamespaceName,
		&i.Values,
		&i.Grants,
		&i.Fqn,
		&i.Keys,
	)
	return i, err
}

const getAttributeValue = `-- name: GetAttributeValue :one
SELECT
    av.id,
    av.value,
    av.active,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', av.metadata -> 'labels', 'created_at', av.created_at, 'updated_at', av.updated_at)) as metadata,
    av.attribute_definition_id,
    fqns.fqn,
    JSONB_AGG(
        DISTINCT JSONB_BUILD_OBJECT(
            'id', kas.id,
            'uri', kas.uri,
            'name', kas.name,
            'public_key', kas.public_key
        )
    ) FILTER (WHERE avkag.attribute_value_id IS NOT NULL) AS grants,
    value_keys.keys as keys
FROM attribute_values av
LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
LEFT JOIN attribute_value_key_access_grants avkag ON av.id = avkag.attribute_value_id
LEFT JOIN key_access_servers kas ON avkag.key_access_server_id = kas.id
LEFT JOIN (
    SELECT
        k.value_id,
        JSONB_AGG(
            DISTINCT JSONB_BUILD_OBJECT(
                'kas_uri', kas.uri,
                'kas_id', kas.id,
                'public_key', JSONB_BUILD_OBJECT(
                     'algorithm', kask.key_algorithm::INTEGER,
                     'kid', kask.key_id,
                     'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                )
            )
        ) FILTER (WHERE kask.id IS NOT NULL) AS keys
    FROM attribute_value_public_key_map k
    INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
    INNER JOIN key_access_servers kas ON kas.id = kask.key_access_server_id
    GROUP BY k.value_id
) value_keys ON av.id = value_keys.value_id   
WHERE ($1::uuid IS NULL OR av.id = $1::uuid)
  AND ($2::text IS NULL OR REGEXP_REPLACE(fqns.fqn, '^https?://', '') = REGEXP_REPLACE($2::text, '^https?://', ''))
GROUP BY av.id, fqns.fqn, value_keys.keys
`

type GetAttributeValueParams struct {
	ID  pgtype.UUID `json:"id"`
	Fqn pgtype.Text `json:"fqn"`
}

type GetAttributeValueRow struct {
	ID                    string      `json:"id"`
	Value                 string      `json:"value"`
	Active                bool        `json:"active"`
	Metadata              []byte      `json:"metadata"`
	AttributeDefinitionID string      `json:"attribute_definition_id"`
	Fqn                   pgtype.Text `json:"fqn"`
	Grants                []byte      `json:"grants"`
	Keys                  []byte      `json:"keys"`
}

// GetAttributeValue
//
//	SELECT
//	    av.id,
//	    av.value,
//	    av.active,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', av.metadata -> 'labels', 'created_at', av.created_at, 'updated_at', av.updated_at)) as metadata,
//	    av.attribute_definition_id,
//	    fqns.fqn,
//	    JSONB_AGG(
//	        DISTINCT JSONB_BUILD_OBJECT(
//	            'id', kas.id,
//	            'uri', kas.uri,
//	            'name', kas.name,
//	            'public_key', kas.public_key
//	        )
//	    ) FILTER (WHERE avkag.attribute_value_id IS NOT NULL) AS grants,
//	    value_keys.keys as keys
//	FROM attribute_values av
//	LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
//	LEFT JOIN attribute_value_key_access_grants avkag ON av.id = avkag.attribute_value_id
//	LEFT JOIN key_access_servers kas ON avkag.key_access_server_id = kas.id
//	LEFT JOIN (
//	    SELECT
//	        k.value_id,
//	        JSONB_AGG(
//	            DISTINCT JSONB_BUILD_OBJECT(
//	                'kas_uri', kas.uri,
//	                'kas_id', kas.id,
//	                'public_key', JSONB_BUILD_OBJECT(
//	                     'algorithm', kask.key_algorithm::INTEGER,
//	                     'kid', kask.key_id,
//	                     'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                )
//	            )
//	        ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	    FROM attribute_value_public_key_map k
//	    INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
//	    INNER JOIN key_access_servers kas ON kas.id = kask.key_access_server_id
//	    GROUP BY k.value_id
//	) value_keys ON av.id = value_keys.value_id
//	WHERE ($1::uuid IS NULL OR av.id = $1::uuid)
//	  AND ($2::text IS NULL OR REGEXP_REPLACE(fqns.fqn, '^https?://', '') = REGEXP_REPLACE($2::text, '^https?://', ''))
//	GROUP BY av.id, fqns.fqn, value_keys.keys
func (q *Queries) GetAttributeValue(ctx context.Context, arg GetAttributeValueParams) (GetAttributeValueRow, error) {
	row := q.db.QueryRow(ctx, getAttributeValue, arg.ID, arg.Fqn)
	var i GetAttributeValueRow
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Active,
		&i.Metadata,
		&i.AttributeDefinitionID,
		&i.Fqn,
		&i.Grants,
		&i.Keys,
	)
	return i, err
}

const listAttributeValues = `-- name: ListAttributeValues :many

WITH counted AS (
    SELECT COUNT(av.id) AS total
    FROM attribute_values av
)
SELECT
    av.id,
    av.value,
    av.active,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', av.metadata -> 'labels', 'created_at', av.created_at, 'updated_at', av.updated_at)) as metadata,
    av.attribute_definition_id,
    fqns.fqn,
    counted.total
FROM attribute_values av
CROSS JOIN counted
LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
WHERE (
    ($1::BOOLEAN IS NULL OR av.active = $1) AND
    (NULLIF($2, '') IS NULL OR av.attribute_definition_id = $2::UUID) 
)
LIMIT $4 
OFFSET $3
`

type ListAttributeValuesParams struct {
	Active                pgtype.Bool `json:"active"`
	AttributeDefinitionID interface{} `json:"attribute_definition_id"`
	Offset                int32       `json:"offset_"`
	Limit                 int32       `json:"limit_"`
}

type ListAttributeValuesRow struct {
	ID                    string      `json:"id"`
	Value                 string      `json:"value"`
	Active                bool        `json:"active"`
	Metadata              []byte      `json:"metadata"`
	AttributeDefinitionID string      `json:"attribute_definition_id"`
	Fqn                   pgtype.Text `json:"fqn"`
	Total                 int64       `json:"total"`
}

// --------------------------------------------------------------
// ATTRIBUTE VALUES
// --------------------------------------------------------------
//
//	WITH counted AS (
//	    SELECT COUNT(av.id) AS total
//	    FROM attribute_values av
//	)
//	SELECT
//	    av.id,
//	    av.value,
//	    av.active,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', av.metadata -> 'labels', 'created_at', av.created_at, 'updated_at', av.updated_at)) as metadata,
//	    av.attribute_definition_id,
//	    fqns.fqn,
//	    counted.total
//	FROM attribute_values av
//	CROSS JOIN counted
//	LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
//	WHERE (
//	    ($1::BOOLEAN IS NULL OR av.active = $1) AND
//	    (NULLIF($2, '') IS NULL OR av.attribute_definition_id = $2::UUID)
//	)
//	LIMIT $4
//	OFFSET $3
func (q *Queries) ListAttributeValues(ctx context.Context, arg ListAttributeValuesParams) ([]ListAttributeValuesRow, error) {
	rows, err := q.db.Query(ctx, listAttributeValues,
		arg.Active,
		arg.AttributeDefinitionID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAttributeValuesRow
	for rows.Next() {
		var i ListAttributeValuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Active,
			&i.Metadata,
			&i.AttributeDefinitionID,
			&i.Fqn,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttributesDetail = `-- name: ListAttributesDetail :many

WITH counted AS (
    SELECT COUNT(ad.id) AS total
    FROM attribute_definitions ad
)
SELECT
    ad.id,
    ad.name as attribute_name,
    ad.rule,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
    ad.namespace_id,
    ad.active,
    n.name as namespace_name,
    JSON_AGG(
        JSON_BUILD_OBJECT(
            'id', avt.id,
            'value', avt.value,
            'active', avt.active,
            'fqn', CONCAT(fqns.fqn, '/value/', avt.value)
        ) ORDER BY ARRAY_POSITION(ad.values_order, avt.id)
    ) AS values,
    fqns.fqn,
    counted.total
FROM attribute_definitions ad
CROSS JOIN counted
LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
LEFT JOIN (
  SELECT
    av.id,
    av.value,
    av.active,
    av.attribute_definition_id
  FROM attribute_values av
  GROUP BY av.id
) avt ON avt.attribute_definition_id = ad.id
LEFT JOIN attribute_fqns fqns ON fqns.attribute_id = ad.id AND fqns.value_id IS NULL
WHERE
    ($1::BOOLEAN IS NULL OR ad.active = $1) AND
    (NULLIF($2, '') IS NULL OR ad.namespace_id = $2::uuid) AND 
    (NULLIF($3, '') IS NULL OR n.name = $3) 
GROUP BY ad.id, n.name, fqns.fqn, counted.total
LIMIT $5 
OFFSET $4
`

type ListAttributesDetailParams struct {
	Active        pgtype.Bool `json:"active"`
	NamespaceID   interface{} `json:"namespace_id"`
	NamespaceName interface{} `json:"namespace_name"`
	Offset        int32       `json:"offset_"`
	Limit         int32       `json:"limit_"`
}

type ListAttributesDetailRow struct {
	ID            string                  `json:"id"`
	AttributeName string                  `json:"attribute_name"`
	Rule          AttributeDefinitionRule `json:"rule"`
	Metadata      []byte                  `json:"metadata"`
	NamespaceID   string                  `json:"namespace_id"`
	Active        bool                    `json:"active"`
	NamespaceName pgtype.Text             `json:"namespace_name"`
	Values        []byte                  `json:"values"`
	Fqn           pgtype.Text             `json:"fqn"`
	Total         int64                   `json:"total"`
}

// --------------------------------------------------------------
// ATTRIBUTES
// --------------------------------------------------------------
//
//	WITH counted AS (
//	    SELECT COUNT(ad.id) AS total
//	    FROM attribute_definitions ad
//	)
//	SELECT
//	    ad.id,
//	    ad.name as attribute_name,
//	    ad.rule,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
//	    ad.namespace_id,
//	    ad.active,
//	    n.name as namespace_name,
//	    JSON_AGG(
//	        JSON_BUILD_OBJECT(
//	            'id', avt.id,
//	            'value', avt.value,
//	            'active', avt.active,
//	            'fqn', CONCAT(fqns.fqn, '/value/', avt.value)
//	        ) ORDER BY ARRAY_POSITION(ad.values_order, avt.id)
//	    ) AS values,
//	    fqns.fqn,
//	    counted.total
//	FROM attribute_definitions ad
//	CROSS JOIN counted
//	LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
//	LEFT JOIN (
//	  SELECT
//	    av.id,
//	    av.value,
//	    av.active,
//	    av.attribute_definition_id
//	  FROM attribute_values av
//	  GROUP BY av.id
//	) avt ON avt.attribute_definition_id = ad.id
//	LEFT JOIN attribute_fqns fqns ON fqns.attribute_id = ad.id AND fqns.value_id IS NULL
//	WHERE
//	    ($1::BOOLEAN IS NULL OR ad.active = $1) AND
//	    (NULLIF($2, '') IS NULL OR ad.namespace_id = $2::uuid) AND
//	    (NULLIF($3, '') IS NULL OR n.name = $3)
//	GROUP BY ad.id, n.name, fqns.fqn, counted.total
//	LIMIT $5
//	OFFSET $4
func (q *Queries) ListAttributesDetail(ctx context.Context, arg ListAttributesDetailParams) ([]ListAttributesDetailRow, error) {
	rows, err := q.db.Query(ctx, listAttributesDetail,
		arg.Active,
		arg.NamespaceID,
		arg.NamespaceName,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAttributesDetailRow
	for rows.Next() {
		var i ListAttributesDetailRow
		if err := rows.Scan(
			&i.ID,
			&i.AttributeName,
			&i.Rule,
			&i.Metadata,
			&i.NamespaceID,
			&i.Active,
			&i.NamespaceName,
			&i.Values,
			&i.Fqn,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttributesSummary = `-- name: ListAttributesSummary :many
WITH counted AS (
    SELECT COUNT(ad.id) AS total FROM attribute_definitions ad
)
SELECT
    ad.id,
    ad.name as attribute_name,
    ad.rule,
    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
    ad.namespace_id,
    ad.active,
    n.name as namespace_name,
    counted.total
FROM attribute_definitions ad
CROSS JOIN counted
LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
WHERE ad.namespace_id = $1
GROUP BY ad.id, n.name, counted.total
LIMIT $3 
OFFSET $2
`

type ListAttributesSummaryParams struct {
	NamespaceID string `json:"namespace_id"`
	Offset      int32  `json:"offset_"`
	Limit       int32  `json:"limit_"`
}

type ListAttributesSummaryRow struct {
	ID            string                  `json:"id"`
	AttributeName string                  `json:"attribute_name"`
	Rule          AttributeDefinitionRule `json:"rule"`
	Metadata      []byte                  `json:"metadata"`
	NamespaceID   string                  `json:"namespace_id"`
	Active        bool                    `json:"active"`
	NamespaceName pgtype.Text             `json:"namespace_name"`
	Total         int64                   `json:"total"`
}

// ListAttributesSummary
//
//	WITH counted AS (
//	    SELECT COUNT(ad.id) AS total FROM attribute_definitions ad
//	)
//	SELECT
//	    ad.id,
//	    ad.name as attribute_name,
//	    ad.rule,
//	    JSON_STRIP_NULLS(JSON_BUILD_OBJECT('labels', ad.metadata -> 'labels', 'created_at', ad.created_at, 'updated_at', ad.updated_at)) AS metadata,
//	    ad.namespace_id,
//	    ad.active,
//	    n.name as namespace_name,
//	    counted.total
//	FROM attribute_definitions ad
//	CROSS JOIN counted
//	LEFT JOIN attribute_namespaces n ON n.id = ad.namespace_id
//	WHERE ad.namespace_id = $1
//	GROUP BY ad.id, n.name, counted.total
//	LIMIT $3
//	OFFSET $2
func (q *Queries) ListAttributesSummary(ctx context.Context, arg ListAttributesSummaryParams) ([]ListAttributesSummaryRow, error) {
	rows, err := q.db.Query(ctx, listAttributesSummary, arg.NamespaceID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAttributesSummaryRow
	for rows.Next() {
		var i ListAttributesSummaryRow
		if err := rows.Scan(
			&i.ID,
			&i.AttributeName,
			&i.Rule,
			&i.Metadata,
			&i.NamespaceID,
			&i.Active,
			&i.NamespaceName,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeKeyAccessServerFromAttribute = `-- name: RemoveKeyAccessServerFromAttribute :execrows
DELETE FROM attribute_definition_key_access_grants
WHERE attribute_definition_id = $1 AND key_access_server_id = $2
`

type RemoveKeyAccessServerFromAttributeParams struct {
	AttributeDefinitionID string `json:"attribute_definition_id"`
	KeyAccessServerID     string `json:"key_access_server_id"`
}

// RemoveKeyAccessServerFromAttribute
//
//	DELETE FROM attribute_definition_key_access_grants
//	WHERE attribute_definition_id = $1 AND key_access_server_id = $2
func (q *Queries) RemoveKeyAccessServerFromAttribute(ctx context.Context, arg RemoveKeyAccessServerFromAttributeParams) (int64, error) {
	result, err := q.db.Exec(ctx, removeKeyAccessServerFromAttribute, arg.AttributeDefinitionID, arg.KeyAccessServerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const removeKeyAccessServerFromAttributeValue = `-- name: RemoveKeyAccessServerFromAttributeValue :execrows
DELETE FROM attribute_value_key_access_grants
WHERE attribute_value_id = $1 AND key_access_server_id = $2
`

type RemoveKeyAccessServerFromAttributeValueParams struct {
	AttributeValueID  string `json:"attribute_value_id"`
	KeyAccessServerID string `json:"key_access_server_id"`
}

// RemoveKeyAccessServerFromAttributeValue
//
//	DELETE FROM attribute_value_key_access_grants
//	WHERE attribute_value_id = $1 AND key_access_server_id = $2
func (q *Queries) RemoveKeyAccessServerFromAttributeValue(ctx context.Context, arg RemoveKeyAccessServerFromAttributeValueParams) (int64, error) {
	result, err := q.db.Exec(ctx, removeKeyAccessServerFromAttributeValue, arg.AttributeValueID, arg.KeyAccessServerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateAttribute = `-- name: UpdateAttribute :execrows
UPDATE attribute_definitions
SET
    name = COALESCE($2, name),
    rule = COALESCE($3, rule),
    values_order = COALESCE($4, values_order),
    metadata = COALESCE($5, metadata),
    active = COALESCE($6, active)
WHERE id = $1
`

type UpdateAttributeParams struct {
	ID          string                      `json:"id"`
	Name        pgtype.Text                 `json:"name"`
	Rule        NullAttributeDefinitionRule `json:"rule"`
	ValuesOrder []string                    `json:"values_order"`
	Metadata    []byte                      `json:"metadata"`
	Active      pgtype.Bool                 `json:"active"`
}

// UpdateAttribute: Unsafe and Safe Updates both
//
//	UPDATE attribute_definitions
//	SET
//	    name = COALESCE($2, name),
//	    rule = COALESCE($3, rule),
//	    values_order = COALESCE($4, values_order),
//	    metadata = COALESCE($5, metadata),
//	    active = COALESCE($6, active)
//	WHERE id = $1
func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateAttribute,
		arg.ID,
		arg.Name,
		arg.Rule,
		arg.ValuesOrder,
		arg.Metadata,
		arg.Active,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateAttributeValue = `-- name: UpdateAttributeValue :execrows
UPDATE attribute_values
SET
    value = COALESCE($2, value),
    active = COALESCE($3, active),
    metadata = COALESCE($4, metadata)
WHERE id = $1
`

type UpdateAttributeValueParams struct {
	ID       string      `json:"id"`
	Value    pgtype.Text `json:"value"`
	Active   pgtype.Bool `json:"active"`
	Metadata []byte      `json:"metadata"`
}

// UpdateAttributeValue: Safe and Unsafe Updates both
//
//	UPDATE attribute_values
//	SET
//	    value = COALESCE($2, value),
//	    active = COALESCE($3, active),
//	    metadata = COALESCE($4, metadata)
//	WHERE id = $1
func (q *Queries) UpdateAttributeValue(ctx context.Context, arg UpdateAttributeValueParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateAttributeValue,
		arg.ID,
		arg.Value,
		arg.Active,
		arg.Metadata,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignPublicKeyToAttributeDefinition = `-- name: assignPublicKeyToAttributeDefinition :one
INSERT INTO attribute_definition_public_key_map (definition_id, key_access_server_key_id)
VALUES ($1, $2)
RETURNING definition_id, key_access_server_key_id
`

type assignPublicKeyToAttributeDefinitionParams struct {
	DefinitionID         string `json:"definition_id"`
	KeyAccessServerKeyID string `json:"key_access_server_key_id"`
}

// assignPublicKeyToAttributeDefinition
//
//	INSERT INTO attribute_definition_public_key_map (definition_id, key_access_server_key_id)
//	VALUES ($1, $2)
//	RETURNING definition_id, key_access_server_key_id
func (q *Queries) assignPublicKeyToAttributeDefinition(ctx context.Context, arg assignPublicKeyToAttributeDefinitionParams) (AttributeDefinitionPublicKeyMap, error) {
	row := q.db.QueryRow(ctx, assignPublicKeyToAttributeDefinition, arg.DefinitionID, arg.KeyAccessServerKeyID)
	var i AttributeDefinitionPublicKeyMap
	err := row.Scan(&i.DefinitionID, &i.KeyAccessServerKeyID)
	return i, err
}

const assignPublicKeyToAttributeValue = `-- name: assignPublicKeyToAttributeValue :one
INSERT INTO attribute_value_public_key_map (value_id, key_access_server_key_id)
VALUES ($1, $2)
RETURNING value_id, key_access_server_key_id
`

type assignPublicKeyToAttributeValueParams struct {
	ValueID              string `json:"value_id"`
	KeyAccessServerKeyID string `json:"key_access_server_key_id"`
}

// assignPublicKeyToAttributeValue
//
//	INSERT INTO attribute_value_public_key_map (value_id, key_access_server_key_id)
//	VALUES ($1, $2)
//	RETURNING value_id, key_access_server_key_id
func (q *Queries) assignPublicKeyToAttributeValue(ctx context.Context, arg assignPublicKeyToAttributeValueParams) (AttributeValuePublicKeyMap, error) {
	row := q.db.QueryRow(ctx, assignPublicKeyToAttributeValue, arg.ValueID, arg.KeyAccessServerKeyID)
	var i AttributeValuePublicKeyMap
	err := row.Scan(&i.ValueID, &i.KeyAccessServerKeyID)
	return i, err
}

const listAttributesByDefOrValueFqns = `-- name: listAttributesByDefOrValueFqns :many
WITH target_definition AS (
    SELECT DISTINCT
        ad.id,
        ad.namespace_id,
        ad.name,
        ad.rule,
        ad.active,
        ad.values_order,
        JSONB_AGG(
	        DISTINCT JSONB_BUILD_OBJECT(
	            'id', kas.id,
	            'uri', kas.uri,
                'name', kas.name,
	            'public_key', kas.public_key
	        )
	    ) FILTER (WHERE kas.id IS NOT NULL) AS grants,
        defk.keys AS keys
    FROM attribute_fqns fqns
    INNER JOIN attribute_definitions ad ON fqns.attribute_id = ad.id
    LEFT JOIN attribute_definition_key_access_grants adkag ON ad.id = adkag.attribute_definition_id
    LEFT JOIN key_access_servers kas ON adkag.key_access_server_id = kas.id
    LEFT JOIN (
        SELECT
            k.definition_id,
            JSONB_AGG(
                DISTINCT JSONB_BUILD_OBJECT(
                    'kas_uri', kas.uri,
                    'kas_id', kas.id,
                    'public_key', JSONB_BUILD_OBJECT(
                         'algorithm', kask.key_algorithm::INTEGER,
                         'kid', kask.key_id,
                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                    )
                )
            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
        FROM attribute_definition_public_key_map k
        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
        GROUP BY k.definition_id
    ) defk ON ad.id = defk.definition_id
    WHERE fqns.fqn = ANY($1::TEXT[]) 
        AND ad.active = TRUE
    GROUP BY ad.id, defk.keys
),
namespaces AS (
	SELECT
		n.id,
		JSON_BUILD_OBJECT(
			'id', n.id,
			'name', n.name,
			'active', n.active,
	        'fqn', fqns.fqn,
            'grants', JSONB_AGG(
	            DISTINCT JSONB_BUILD_OBJECT(
	                'id', kas.id,
	                'uri', kas.uri,
                    'name', kas.name,
	                'public_key', kas.public_key
	            )
	        ) FILTER (WHERE kas.id IS NOT NULL),
            'kas_keys', nmp_keys.keys
    	) AS namespace
	FROM target_definition td
	INNER JOIN attribute_namespaces n ON td.namespace_id = n.id
	INNER JOIN attribute_fqns fqns ON n.id = fqns.namespace_id
    LEFT JOIN attribute_namespace_key_access_grants ankag ON n.id = ankag.namespace_id
	LEFT JOIN key_access_servers kas ON ankag.key_access_server_id = kas.id
    LEFT JOIN (
        SELECT
            k.namespace_id,
            JSONB_AGG(
                DISTINCT JSONB_BUILD_OBJECT(
                    'kas_uri', kas.uri,
                    'kas_id', kas.id,
                    'public_key', JSONB_BUILD_OBJECT(
                         'algorithm', kask.key_algorithm::INTEGER,
                         'kid', kask.key_id,
                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                    )
                )
            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
        FROM attribute_namespace_public_key_map k
        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
        GROUP BY k.namespace_id
    ) nmp_keys ON n.id = nmp_keys.namespace_id
	WHERE n.active = TRUE
		AND (fqns.attribute_id IS NULL AND fqns.value_id IS NULL)
	GROUP BY n.id, fqns.fqn, nmp_keys.keys
),
value_grants AS (
	SELECT
		av.id,
		JSON_AGG(
			DISTINCT JSONB_BUILD_OBJECT(
				'id', kas.id,
                'uri', kas.uri,
                'name', kas.name,
                'public_key', kas.public_key
            )
		) FILTER (WHERE kas.id IS NOT NULL) AS grants
	FROM target_definition td
	LEFT JOIN attribute_values av on td.id = av.attribute_definition_id
	LEFT JOIN attribute_value_key_access_grants avkag ON av.id = avkag.attribute_value_id
	LEFT JOIN key_access_servers kas ON avkag.key_access_server_id = kas.id
	GROUP BY av.id
),
value_subject_mappings AS (
	SELECT
		av.id,
		JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', sm.id,
                'actions', (
                    SELECT COALESCE(
                        JSON_AGG(
                            JSON_BUILD_OBJECT(
                                'id', a.id,
                                'name', a.name
                            )
                        ) FILTER (WHERE a.id IS NOT NULL),
                        '[]'::JSON
                    )
                    FROM subject_mapping_actions sma
                    LEFT JOIN actions a ON sma.action_id = a.id
                    WHERE sma.subject_mapping_id = sm.id
                ),
                'subject_condition_set', JSON_BUILD_OBJECT(
                    'id', scs.id,
                    'subject_sets', scs.condition
                )
            )
        ) FILTER (WHERE sm.id IS NOT NULL) AS sub_maps
	FROM target_definition td
	LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
	LEFT JOIN subject_mappings sm ON av.id = sm.attribute_value_id
	LEFT JOIN subject_condition_set scs ON sm.subject_condition_set_id = scs.id
	GROUP BY av.id
),
value_resource_mappings AS (
    SELECT
        av.id,
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', rm.id,
                'terms', rm.terms,
                'group', CASE 
                            WHEN rm.group_id IS NULL THEN NULL
                            ELSE JSON_BUILD_OBJECT(
                                'id', rmg.id,
                                'name', rmg.name,
                                'namespace_id', rmg.namespace_id
                            )
                         END
            )
        ) FILTER (WHERE rm.id IS NOT NULL) AS res_maps
    FROM target_definition td
    LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
    LEFT JOIN resource_mappings rm ON av.id = rm.attribute_value_id
    LEFT JOIN resource_mapping_groups rmg ON rm.group_id = rmg.id
    GROUP BY av.id
),
values AS (
    SELECT
		av.attribute_definition_id,
		JSON_AGG(
	        JSON_BUILD_OBJECT(
	            'id', av.id,
	            'value', av.value,
	            'active', av.active,
	            'fqn', fqns.fqn,
                'grants', avg.grants,
	            'subject_mappings', avsm.sub_maps,
                'resource_mappings', avrm.res_maps,
                'kas_keys', value_keys.keys
	        -- enforce order of values in response
	        ) ORDER BY ARRAY_POSITION(td.values_order, av.id)
	    ) AS values
	FROM target_definition td
	LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
	LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
    LEFT JOIN value_grants avg ON av.id = avg.id
	LEFT JOIN value_subject_mappings avsm ON av.id = avsm.id
    LEFT JOIN value_resource_mappings avrm ON av.id = avrm.id
    LEFT JOIN (
        SELECT
            k.value_id,
            JSONB_AGG(
                DISTINCT JSONB_BUILD_OBJECT(
                    'kas_uri', kas.uri,
                    'kas_id', kas.id,
                    'public_key', JSONB_BUILD_OBJECT(
                         'algorithm', kask.key_algorithm::INTEGER,
                         'kid', kask.key_id,
                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
                    )
                )
            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
        FROM attribute_value_public_key_map k
        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
        GROUP BY k.value_id
    ) value_keys ON av.id = value_keys.value_id                        
	WHERE av.active = TRUE
	GROUP BY av.attribute_definition_id
)
SELECT
	td.id,
	td.name,
    td.rule,
	td.active,
	n.namespace,
	fqns.fqn,
	values.values,
    td.grants,
    td.keys
FROM target_definition td
INNER JOIN attribute_fqns fqns ON td.id = fqns.attribute_id
INNER JOIN namespaces n ON td.namespace_id = n.id
LEFT JOIN values ON td.id = values.attribute_definition_id
WHERE fqns.value_id IS NULL
`

type listAttributesByDefOrValueFqnsRow struct {
	ID        string                  `json:"id"`
	Name      string                  `json:"name"`
	Rule      AttributeDefinitionRule `json:"rule"`
	Active    bool                    `json:"active"`
	Namespace []byte                  `json:"namespace"`
	Fqn       string                  `json:"fqn"`
	Values    []byte                  `json:"values"`
	Grants    []byte                  `json:"grants"`
	Keys      []byte                  `json:"keys"`
}

// get the attribute definition for the provided value or definition fqn
//
//	WITH target_definition AS (
//	    SELECT DISTINCT
//	        ad.id,
//	        ad.namespace_id,
//	        ad.name,
//	        ad.rule,
//	        ad.active,
//	        ad.values_order,
//	        JSONB_AGG(
//		        DISTINCT JSONB_BUILD_OBJECT(
//		            'id', kas.id,
//		            'uri', kas.uri,
//	                'name', kas.name,
//		            'public_key', kas.public_key
//		        )
//		    ) FILTER (WHERE kas.id IS NOT NULL) AS grants,
//	        defk.keys AS keys
//	    FROM attribute_fqns fqns
//	    INNER JOIN attribute_definitions ad ON fqns.attribute_id = ad.id
//	    LEFT JOIN attribute_definition_key_access_grants adkag ON ad.id = adkag.attribute_definition_id
//	    LEFT JOIN key_access_servers kas ON adkag.key_access_server_id = kas.id
//	    LEFT JOIN (
//	        SELECT
//	            k.definition_id,
//	            JSONB_AGG(
//	                DISTINCT JSONB_BUILD_OBJECT(
//	                    'kas_uri', kas.uri,
//	                    'kas_id', kas.id,
//	                    'public_key', JSONB_BUILD_OBJECT(
//	                         'algorithm', kask.key_algorithm::INTEGER,
//	                         'kid', kask.key_id,
//	                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                    )
//	                )
//	            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	        FROM attribute_definition_public_key_map k
//	        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
//	        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	        GROUP BY k.definition_id
//	    ) defk ON ad.id = defk.definition_id
//	    WHERE fqns.fqn = ANY($1::TEXT[])
//	        AND ad.active = TRUE
//	    GROUP BY ad.id, defk.keys
//	),
//	namespaces AS (
//		SELECT
//			n.id,
//			JSON_BUILD_OBJECT(
//				'id', n.id,
//				'name', n.name,
//				'active', n.active,
//		        'fqn', fqns.fqn,
//	            'grants', JSONB_AGG(
//		            DISTINCT JSONB_BUILD_OBJECT(
//		                'id', kas.id,
//		                'uri', kas.uri,
//	                    'name', kas.name,
//		                'public_key', kas.public_key
//		            )
//		        ) FILTER (WHERE kas.id IS NOT NULL),
//	            'kas_keys', nmp_keys.keys
//	    	) AS namespace
//		FROM target_definition td
//		INNER JOIN attribute_namespaces n ON td.namespace_id = n.id
//		INNER JOIN attribute_fqns fqns ON n.id = fqns.namespace_id
//	    LEFT JOIN attribute_namespace_key_access_grants ankag ON n.id = ankag.namespace_id
//		LEFT JOIN key_access_servers kas ON ankag.key_access_server_id = kas.id
//	    LEFT JOIN (
//	        SELECT
//	            k.namespace_id,
//	            JSONB_AGG(
//	                DISTINCT JSONB_BUILD_OBJECT(
//	                    'kas_uri', kas.uri,
//	                    'kas_id', kas.id,
//	                    'public_key', JSONB_BUILD_OBJECT(
//	                         'algorithm', kask.key_algorithm::INTEGER,
//	                         'kid', kask.key_id,
//	                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                    )
//	                )
//	            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	        FROM attribute_namespace_public_key_map k
//	        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
//	        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	        GROUP BY k.namespace_id
//	    ) nmp_keys ON n.id = nmp_keys.namespace_id
//		WHERE n.active = TRUE
//			AND (fqns.attribute_id IS NULL AND fqns.value_id IS NULL)
//		GROUP BY n.id, fqns.fqn, nmp_keys.keys
//	),
//	value_grants AS (
//		SELECT
//			av.id,
//			JSON_AGG(
//				DISTINCT JSONB_BUILD_OBJECT(
//					'id', kas.id,
//	                'uri', kas.uri,
//	                'name', kas.name,
//	                'public_key', kas.public_key
//	            )
//			) FILTER (WHERE kas.id IS NOT NULL) AS grants
//		FROM target_definition td
//		LEFT JOIN attribute_values av on td.id = av.attribute_definition_id
//		LEFT JOIN attribute_value_key_access_grants avkag ON av.id = avkag.attribute_value_id
//		LEFT JOIN key_access_servers kas ON avkag.key_access_server_id = kas.id
//		GROUP BY av.id
//	),
//	value_subject_mappings AS (
//		SELECT
//			av.id,
//			JSON_AGG(
//	            JSON_BUILD_OBJECT(
//	                'id', sm.id,
//	                'actions', (
//	                    SELECT COALESCE(
//	                        JSON_AGG(
//	                            JSON_BUILD_OBJECT(
//	                                'id', a.id,
//	                                'name', a.name
//	                            )
//	                        ) FILTER (WHERE a.id IS NOT NULL),
//	                        '[]'::JSON
//	                    )
//	                    FROM subject_mapping_actions sma
//	                    LEFT JOIN actions a ON sma.action_id = a.id
//	                    WHERE sma.subject_mapping_id = sm.id
//	                ),
//	                'subject_condition_set', JSON_BUILD_OBJECT(
//	                    'id', scs.id,
//	                    'subject_sets', scs.condition
//	                )
//	            )
//	        ) FILTER (WHERE sm.id IS NOT NULL) AS sub_maps
//		FROM target_definition td
//		LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
//		LEFT JOIN subject_mappings sm ON av.id = sm.attribute_value_id
//		LEFT JOIN subject_condition_set scs ON sm.subject_condition_set_id = scs.id
//		GROUP BY av.id
//	),
//	value_resource_mappings AS (
//	    SELECT
//	        av.id,
//	        JSON_AGG(
//	            JSON_BUILD_OBJECT(
//	                'id', rm.id,
//	                'terms', rm.terms,
//	                'group', CASE
//	                            WHEN rm.group_id IS NULL THEN NULL
//	                            ELSE JSON_BUILD_OBJECT(
//	                                'id', rmg.id,
//	                                'name', rmg.name,
//	                                'namespace_id', rmg.namespace_id
//	                            )
//	                         END
//	            )
//	        ) FILTER (WHERE rm.id IS NOT NULL) AS res_maps
//	    FROM target_definition td
//	    LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
//	    LEFT JOIN resource_mappings rm ON av.id = rm.attribute_value_id
//	    LEFT JOIN resource_mapping_groups rmg ON rm.group_id = rmg.id
//	    GROUP BY av.id
//	),
//	values AS (
//	    SELECT
//			av.attribute_definition_id,
//			JSON_AGG(
//		        JSON_BUILD_OBJECT(
//		            'id', av.id,
//		            'value', av.value,
//		            'active', av.active,
//		            'fqn', fqns.fqn,
//	                'grants', avg.grants,
//		            'subject_mappings', avsm.sub_maps,
//	                'resource_mappings', avrm.res_maps,
//	                'kas_keys', value_keys.keys
//		        -- enforce order of values in response
//		        ) ORDER BY ARRAY_POSITION(td.values_order, av.id)
//		    ) AS values
//		FROM target_definition td
//		LEFT JOIN attribute_values av ON td.id = av.attribute_definition_id
//		LEFT JOIN attribute_fqns fqns ON av.id = fqns.value_id
//	    LEFT JOIN value_grants avg ON av.id = avg.id
//		LEFT JOIN value_subject_mappings avsm ON av.id = avsm.id
//	    LEFT JOIN value_resource_mappings avrm ON av.id = avrm.id
//	    LEFT JOIN (
//	        SELECT
//	            k.value_id,
//	            JSONB_AGG(
//	                DISTINCT JSONB_BUILD_OBJECT(
//	                    'kas_uri', kas.uri,
//	                    'kas_id', kas.id,
//	                    'public_key', JSONB_BUILD_OBJECT(
//	                         'algorithm', kask.key_algorithm::INTEGER,
//	                         'kid', kask.key_id,
//	                         'pem', CONVERT_FROM(DECODE(kask.public_key_ctx ->> 'pem', 'base64'), 'UTF8')
//	                    )
//	                )
//	            ) FILTER (WHERE kask.id IS NOT NULL) AS keys
//	        FROM attribute_value_public_key_map k
//	        INNER JOIN key_access_server_keys kask ON k.key_access_server_key_id = kask.id
//	        INNER JOIN key_access_servers kas ON kask.key_access_server_id = kas.id
//	        GROUP BY k.value_id
//	    ) value_keys ON av.id = value_keys.value_id
//		WHERE av.active = TRUE
//		GROUP BY av.attribute_definition_id
//	)
//	SELECT
//		td.id,
//		td.name,
//	    td.rule,
//		td.active,
//		n.namespace,
//		fqns.fqn,
//		values.values,
//	    td.grants,
//	    td.keys
//	FROM target_definition td
//	INNER JOIN attribute_fqns fqns ON td.id = fqns.attribute_id
//	INNER JOIN namespaces n ON td.namespace_id = n.id
//	LEFT JOIN values ON td.id = values.attribute_definition_id
//	WHERE fqns.value_id IS NULL
func (q *Queries) listAttributesByDefOrValueFqns(ctx context.Context, fqns []string) ([]listAttributesByDefOrValueFqnsRow, error) {
	rows, err := q.db.Query(ctx, listAttributesByDefOrValueFqns, fqns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listAttributesByDefOrValueFqnsRow
	for rows.Next() {
		var i listAttributesByDefOrValueFqnsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Rule,
			&i.Active,
			&i.Namespace,
			&i.Fqn,
			&i.Values,
			&i.Grants,
			&i.Keys,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePublicKeyFromAttributeDefinition = `-- name: removePublicKeyFromAttributeDefinition :execrows
DELETE FROM attribute_definition_public_key_map
WHERE definition_id = $1 AND key_access_server_key_id = $2
`

type removePublicKeyFromAttributeDefinitionParams struct {
	DefinitionID         string `json:"definition_id"`
	KeyAccessServerKeyID string `json:"key_access_server_key_id"`
}

// removePublicKeyFromAttributeDefinition
//
//	DELETE FROM attribute_definition_public_key_map
//	WHERE definition_id = $1 AND key_access_server_key_id = $2
func (q *Queries) removePublicKeyFromAttributeDefinition(ctx context.Context, arg removePublicKeyFromAttributeDefinitionParams) (int64, error) {
	result, err := q.db.Exec(ctx, removePublicKeyFromAttributeDefinition, arg.DefinitionID, arg.KeyAccessServerKeyID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const removePublicKeyFromAttributeValue = `-- name: removePublicKeyFromAttributeValue :execrows
DELETE FROM attribute_value_public_key_map
WHERE value_id = $1 AND key_access_server_key_id = $2
`

type removePublicKeyFromAttributeValueParams struct {
	ValueID              string `json:"value_id"`
	KeyAccessServerKeyID string `json:"key_access_server_key_id"`
}

// removePublicKeyFromAttributeValue
//
//	DELETE FROM attribute_value_public_key_map
//	WHERE value_id = $1 AND key_access_server_key_id = $2
func (q *Queries) removePublicKeyFromAttributeValue(ctx context.Context, arg removePublicKeyFromAttributeValueParams) (int64, error) {
	result, err := q.db.Exec(ctx, removePublicKeyFromAttributeValue, arg.ValueID, arg.KeyAccessServerKeyID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const rotatePublicKeyForAttributeDefinition = `-- name: rotatePublicKeyForAttributeDefinition :many
UPDATE attribute_definition_public_key_map
SET key_access_server_key_id = $1::uuid
WHERE (key_access_server_key_id = $2::uuid)
RETURNING definition_id
`

type rotatePublicKeyForAttributeDefinitionParams struct {
	NewKeyID string `json:"new_key_id"`
	OldKeyID string `json:"old_key_id"`
}

// rotatePublicKeyForAttributeDefinition
//
//	UPDATE attribute_definition_public_key_map
//	SET key_access_server_key_id = $1::uuid
//	WHERE (key_access_server_key_id = $2::uuid)
//	RETURNING definition_id
func (q *Queries) rotatePublicKeyForAttributeDefinition(ctx context.Context, arg rotatePublicKeyForAttributeDefinitionParams) ([]string, error) {
	rows, err := q.db.Query(ctx, rotatePublicKeyForAttributeDefinition, arg.NewKeyID, arg.OldKeyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var definition_id string
		if err := rows.Scan(&definition_id); err != nil {
			return nil, err
		}
		items = append(items, definition_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rotatePublicKeyForAttributeValue = `-- name: rotatePublicKeyForAttributeValue :many
UPDATE attribute_value_public_key_map
SET key_access_server_key_id = $1::uuid
WHERE (key_access_server_key_id = $2::uuid)
RETURNING value_id
`

type rotatePublicKeyForAttributeValueParams struct {
	NewKeyID string `json:"new_key_id"`
	OldKeyID string `json:"old_key_id"`
}

// rotatePublicKeyForAttributeValue
//
//	UPDATE attribute_value_public_key_map
//	SET key_access_server_key_id = $1::uuid
//	WHERE (key_access_server_key_id = $2::uuid)
//	RETURNING value_id
func (q *Queries) rotatePublicKeyForAttributeValue(ctx context.Context, arg rotatePublicKeyForAttributeValueParams) ([]string, error) {
	rows, err := q.db.Query(ctx, rotatePublicKeyForAttributeValue, arg.NewKeyID, arg.OldKeyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var value_id string
		if err := rows.Scan(&value_id); err != nil {
			return nil, err
		}
		items = append(items, value_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
