syntax = "proto3";

package policy.kasregistry;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";
import "policy/objects.proto";

message GetKeyAccessServerRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message ListKeyAccessServersRequest {}
message ListKeyAccessServersResponse {
  repeated KeyAccessServer key_access_servers = 1;
}

message CreateKeyAccessServerRequest {
  // Required
  string uri = 1 [(buf.validate.field).required = true];
  PublicKey public_key = 2 [(buf.validate.field).required = true];

  // Common metadata
  common.MetadataMutable metadata = 100;
}
message CreateKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message UpdateKeyAccessServerRequest {
  // Required
  string id = 1 [(buf.validate.field).required = true];
  string uri = 2;
  PublicKey public_key = 3;

  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message DeleteKeyAccessServerRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeleteKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

// Can be namespace, attribute definition, or value
message GrantedPolicyObject {
  string id = 1;
  string fqn = 2;
}

message KeyAccessServerGrants {
  KeyAccessServer key_access_server = 1;
  repeated GrantedPolicyObject namespace_grants = 2;
  repeated GrantedPolicyObject attribute_grants = 3;
  repeated GrantedPolicyObject value_grants = 4;
}

// LIST of KAS Grants returns flat response of grants to all policy objects. It does not
// employ selectors for grants to specific policy objects or build the attribute tree relation.
// If grants to a known namespace, attribute, or value are needed, use the respective
// GET request to the specific policy object.
message ListKeyAccessServerGrantsRequest {
  // Optional
  // Filter LIST by either ID or URI of a registered Key Access Server.
  // If neither is provided, grants from all registered KASs to policy attribute objects are returned.
  string kas_id = 1;
  string kas_uri = 2;
}

message ListKeyAccessServerGrantsResponse {
  repeated KeyAccessServerGrants grants = 1;
}

service KeyAccessServerRegistryService {
  rpc ListKeyAccessServers(ListKeyAccessServersRequest) returns (ListKeyAccessServersResponse) {
    option (google.api.http) = {get: "/key-access-servers"};
  }

  rpc GetKeyAccessServer(GetKeyAccessServerRequest) returns (GetKeyAccessServerResponse) {
    option (google.api.http) = {get: "/key-access-servers/{id}"};
  }

  rpc CreateKeyAccessServer(CreateKeyAccessServerRequest) returns (CreateKeyAccessServerResponse) {
    option (google.api.http) = {
      post: "/key-access-servers"
      body: "*"
    };
  }

  rpc UpdateKeyAccessServer(UpdateKeyAccessServerRequest) returns (UpdateKeyAccessServerResponse) {
    option (google.api.http) = {
      patch: "/key-access-servers/{id}"
      body: "*"
    };
  }

  rpc DeleteKeyAccessServer(DeleteKeyAccessServerRequest) returns (DeleteKeyAccessServerResponse) {
    option (google.api.http) = {delete: "/key-access-servers/{id}"};
  }

  rpc ListKeyAccessServerGrants(ListKeyAccessServerGrantsRequest) returns (ListKeyAccessServerGrantsResponse) {
    option (google.api.http) = {get: "/key-access-servers/grants"};
  }
}
