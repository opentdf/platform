syntax = "proto3";

package policy.kasregistry;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";
import "policy/objects.proto";

message GetKeyAccessServerRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message GetKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message ListKeyAccessServersRequest {}
message ListKeyAccessServersResponse {
  repeated KeyAccessServer key_access_servers = 1;
}

// TODO: optional validation below should be through a custom validator, which is too bleeding edge at present without full plugin support

message CreateKeyAccessServerRequest {
  // Required
  string uri = 1 [(buf.validate.field).cel = {
      id: "uri_format",
      message: "URI must be a valid URL (e.g., 'https://demo.com/') followed by additional segments. Each segment must start and end with an alphanumeric character, can contain hyphens, alphanumeric characters, and slashes.",
      expression: "this.isUri()"
  }];
  // Required
  PublicKey public_key = 2 [(buf.validate.field).required = true];

  // Optional
  string name = 20 [
    (buf.validate.field).required = false,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "kas_name_format",
      message: "Registered KAS name must be an alphanumeric string, allowing hyphens, and underscores but not as the first or last character. The stored KAS name will be normalized to lower case.",
      expression: "size(this) > 0 ? this.matches('^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$') : true"
    }
  ];

  // Common metadata
  common.MetadataMutable metadata = 100;
}
message CreateKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message UpdateKeyAccessServerRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
  // Optional
  string uri = 2 [(buf.validate.field).cel = {
      id: "optional_uri_format",
      message: "Optional URI must be a valid URL (e.g., 'https://demo.com/') followed by additional segments. Each segment must start and end with an alphanumeric character, can contain hyphens, alphanumeric characters, and slashes.",
      expression: "size(this) == 0 || this.isUri()",
  }];
  // Optional
  PublicKey public_key = 3;
  // Optional
  string name = 20 [
    (buf.validate.field).required = false,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "kas_name_format",
      message: "Registered KAS name must be an alphanumeric string, allowing hyphens, and underscores but not as the first or last character. The stored KAS name will be normalized to lower case.",
      expression: "size(this) == 0 || this.matches('^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
    }
  ];

  // Optional
  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

message DeleteKeyAccessServerRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message DeleteKeyAccessServerResponse {
  KeyAccessServer key_access_server = 1;
}

// Can be namespace, attribute definition, or value
message GrantedPolicyObject {
  string id = 1;
  string fqn = 2;
}

message KeyAccessServerGrants {
  KeyAccessServer key_access_server = 1;
  repeated GrantedPolicyObject namespace_grants = 2;
  repeated GrantedPolicyObject attribute_grants = 3;
  repeated GrantedPolicyObject value_grants = 4;
}

// TODO: optional validation below should be through a custom validator, which is too bleeding edge at present without full plugin support

// LIST of KAS Grants returns flat response of grants to all policy objects. It does not
// employ selectors for grants to specific policy objects or build the attribute tree relation.
// If grants to a known namespace, attribute, or value are needed, use the respective
// GET request to the specific policy object.
message ListKeyAccessServerGrantsRequest {
  // Optional
  // Filter LIST by ID of a registered Key Access Server.
  // If neither is provided, grants from all registered KASs to policy attribute objects are returned.
  string kas_id = 1 [(buf.validate.field).cel = {
     id: "optional_uuid_format",
      message: "Optional field must be a valid UUID",
      expression: "size(this) == 0 || this.matches('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}')"
  }];
  // Optional
  // Filter LIST by URI of a registered Key Access Server.
  // If none is provided, grants from all registered KASs to policy attribute objects are returned.
  string kas_uri = 2 [(buf.validate.field).cel = {
      id: "optional_uri_format",
      message: "Optional URI must be a valid URL (e.g., 'https://demo.com/') followed by additional segments. Each segment must start and end with an alphanumeric character, can contain hyphens, alphanumeric characters, and slashes.",
      expression: "size(this) == 0 || this.isUri()"
  }];
  // Optional
  // Filter LIST by name of a registered Key Access Server.
  // If none are provided, grants from all registered KASs to policy attribute objects are returned.
  string kas_name = 3 [
    (buf.validate.field).required = false,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "kas_name_format",
      message: "Registered KAS name must be an alphanumeric string, allowing hyphens, and underscores but not as the first or last character. The stored KAS name will be normalized to lower case.",
      expression: "size(this) == 0 || this.matches('^[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
    }
  ];
}
message ListKeyAccessServerGrantsResponse {
  repeated KeyAccessServerGrants grants = 1;
}

service KeyAccessServerRegistryService {
  rpc ListKeyAccessServers(ListKeyAccessServersRequest) returns (ListKeyAccessServersResponse) {
    option (google.api.http) = {get: "/key-access-servers"};
  }

  rpc GetKeyAccessServer(GetKeyAccessServerRequest) returns (GetKeyAccessServerResponse) {
    option (google.api.http) = {get: "/key-access-servers/{id}"};
  }

  rpc CreateKeyAccessServer(CreateKeyAccessServerRequest) returns (CreateKeyAccessServerResponse) {
    option (google.api.http) = {
      post: "/key-access-servers"
      body: "*"
    };
  }

  rpc UpdateKeyAccessServer(UpdateKeyAccessServerRequest) returns (UpdateKeyAccessServerResponse) {
    option (google.api.http) = {
      patch: "/key-access-servers/{id}"
      body: "*"
    };
  }

  rpc DeleteKeyAccessServer(DeleteKeyAccessServerRequest) returns (DeleteKeyAccessServerResponse) {
    option (google.api.http) = {delete: "/key-access-servers/{id}"};
  }

  rpc ListKeyAccessServerGrants(ListKeyAccessServerGrantsRequest) returns (ListKeyAccessServerGrantsResponse) {
    option (google.api.http) = {get: "/key-access-servers/grants"};
  }
}
