syntax = "proto3";

package policy.resourcemapping;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";

import "common/common.proto";
import "policy/objects.proto";

/*
   Resource Mapping Groups
*/

message ListResourceMappingGroupsRequest {
  // Optional
  string namespace_id = 1; // TODO: validate UUID only if provided
}

message ListResourceMappingGroupsResponse {
  repeated ResourceMappingGroup resource_mapping_groups = 1;
}

message GetResourceMappingGroupRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}

message GetResourceMappingGroupResponse {
  ResourceMappingGroup resource_mapping_group = 1;
}

message CreateResourceMappingGroupRequest {
  // Required
  string namespace_id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  string name = 2 [(buf.validate.field).required = true];

  // Common metadata
  common.MetadataMutable metadata = 100;
}

message CreateResourceMappingGroupResponse {
  ResourceMappingGroup resource_mapping_group = 1;
}

message UpdateResourceMappingGroupRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  // Optional
  string namespace_id = 2; // TODO: validate UUID only when provided

  string name = 3;

  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}

message UpdateResourceMappingGroupResponse {
  ResourceMappingGroup resource_mapping_group = 1;
}

message DeleteResourceMappingGroupRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}

message DeleteResourceMappingGroupResponse {
  ResourceMappingGroup resource_mapping_group = 1;
}

/*
   Resource Mappings
*/

message ListResourceMappingsRequest {
  // Optional
  string group_id = 1; // TODO: validate UUID only when provided
}

message ListResourceMappingsResponse {
  repeated policy.ResourceMapping resource_mappings = 1;
}

message ListResourceMappingsByGroupFqnsRequest {
  // Required
  // Structure of the RM Group FQN is 'https://<namespace>/resm/<group name>'
  repeated string fqns = 1 [(buf.validate.field).repeated = {
    min_items: 1,
    items: {
      cel: [
        {
          id: "resourcemappinggroup_fqn",
          message: "Resource Mapping Group FQN must be in the format 'https://<namespace>/resm/<group name>'",
          expression: "this.matches('^https://([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,}/resm/[a-zA-Z0-9](?:[a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
        }
      ]
    },
  }];
}

message ResourceMappingsByGroup {
  policy.ResourceMappingGroup group = 1;
  repeated policy.ResourceMapping mappings = 2;
}

message ListResourceMappingsByGroupFqnsResponse {
  map<string, ResourceMappingsByGroup> fqn_resource_mapping_groups = 1;
}

message GetResourceMappingRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}

message GetResourceMappingResponse {
  policy.ResourceMapping resource_mapping = 1;
}


message CreateResourceMappingRequest {
  // Required
  string attribute_value_id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  repeated string terms = 2 [(buf.validate.field).required = true]; // TODO: validate list min/max and term min/max

  // Optional
  string group_id = 3; // TODO: validate UUID only when provided

  common.MetadataMutable metadata = 100;
}
message CreateResourceMappingResponse {
  ResourceMapping resource_mapping = 1;
}

message UpdateResourceMappingRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];

  // Optional
  string attribute_value_id = 4; // TODO: validate UUID only when provided

  repeated string terms = 5; // TODO: validate list min/max and term min/max

  string group_id = 6; // TODO: validate UUID only when provided

  // Common Metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateResourceMappingResponse {
  ResourceMapping resource_mapping = 1;
}

message DeleteResourceMappingRequest {
  // Required
  string id = 1 [
    (buf.validate.field).string.uuid = true
  ];
}
message DeleteResourceMappingResponse {
  ResourceMapping resource_mapping = 1;
}

service ResourceMappingService {
  /*
     Resource Mapping Groups
  */

  rpc ListResourceMappingGroups(ListResourceMappingGroupsRequest) returns (ListResourceMappingGroupsResponse) {
    option (google.api.http) = {get: "/resource-mapping-groups"};
  }

  rpc GetResourceMappingGroup(GetResourceMappingGroupRequest) returns (GetResourceMappingGroupResponse) {
    option (google.api.http) = {get: "/resource-mapping-groups/{id}"};
  }

  rpc CreateResourceMappingGroup(CreateResourceMappingGroupRequest) returns (CreateResourceMappingGroupResponse) {
    option (google.api.http) = {
      post: "/resource-mapping-groups"
      body: "*"
    };
  }

  rpc UpdateResourceMappingGroup(UpdateResourceMappingGroupRequest) returns (UpdateResourceMappingGroupResponse) {
    option (google.api.http) = {
      patch: "/resource-mapping-groups/{id}"
      body: "*"
    };
  }

  rpc DeleteResourceMappingGroup(DeleteResourceMappingGroupRequest) returns (DeleteResourceMappingGroupResponse) {
    option (google.api.http) = {delete: "/resource-mapping-groups/{id}"};
  }

  /*
     Resource Mappings
  */

  rpc ListResourceMappings(ListResourceMappingsRequest) returns (ListResourceMappingsResponse) {
    option (google.api.http) = {get: "/resource-mappings"};
  }

  rpc ListResourceMappingsByGroupFqns(ListResourceMappingsByGroupFqnsRequest) returns (ListResourceMappingsByGroupFqnsResponse) {
    option (google.api.http) = {get: "/resource-mappings/group-fqns"};
  }

  rpc GetResourceMapping(GetResourceMappingRequest) returns (GetResourceMappingResponse) {
    option (google.api.http) = {get: "/resource-mappings/{id}"};
  }

  rpc CreateResourceMapping(CreateResourceMappingRequest) returns (CreateResourceMappingResponse) {
    option (google.api.http) = {
      post: "/resource-mappings"
      body: "*"
    };
  }
  
  rpc UpdateResourceMapping(UpdateResourceMappingRequest) returns (UpdateResourceMappingResponse) {
    option (google.api.http) = {
      patch: "/resource-mappings/{id}"
      body: "*"
    };
  }

  rpc DeleteResourceMapping(DeleteResourceMappingRequest) returns (DeleteResourceMappingResponse) {
    option (google.api.http) = {delete: "/resource-mappings/{id}"};
  }
}
