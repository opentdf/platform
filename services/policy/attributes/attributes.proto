syntax = "proto3";

package policy.attributes;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "kasregistry/key_access_server_registry.proto";
import "policy/namespaces/namespaces.proto";

// buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
enum AttributeRuleTypeEnum {
  ATTRIBUTE_RULE_TYPE_ENUM_UNSPECIFIED = 0;
  ATTRIBUTE_RULE_TYPE_ENUM_ALL_OF = 1;
  ATTRIBUTE_RULE_TYPE_ENUM_ANY_OF = 2;
  ATTRIBUTE_RULE_TYPE_ENUM_HIERARCHY = 3;
}

message Attribute {
  string id = 1;

  // namespace of the attribute
  namespaces.Namespace namespace = 2;

  //attribute name
  string name = 3;

  // attribute rule enum
  AttributeRuleTypeEnum rule = 4 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];

  repeated Value values = 5;

  repeated kasregistry.KeyAccessServer grants = 6;

  string fqn = 7;

  // active by default until explicitly deactivated
  google.protobuf.BoolValue active = 8;

  // Common metadata
  common.Metadata metadata = 100;
}

message Value {
  // generated uuid in database
  string id = 1;

  Attribute attribute = 2;

  string value = 3;

  // list of attribute values that this value is related to (attribute group)
  repeated string members = 4;

  // list of key access servers
  repeated kasregistry.KeyAccessServer grants = 5;

  string fqn = 6;

  // active by default until explicitly deactivated
  google.protobuf.BoolValue active = 7;

  // Common metadata
  common.Metadata metadata = 100;
}

message AttributeAndValue {
  Attribute attribute = 1;
  Value value = 2;
}

/*
   Key Access Server Grants
*/

message AttributeKeyAccessServer {
  string attribute_id = 1;
  string key_access_server_id = 2;
}

message ValueKeyAccessServer {
  string value_id = 1;
  string key_access_server_id = 2;
}

/*
   Attribute Service Definitions
*/

message ListAttributesRequest {
  // ACTIVE by default when not specified
  common.ActiveStateEnum state = 1;
}
message ListAttributesResponse {
  repeated Attribute attributes = 1;
}

message GetAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetAttributeResponse {
  Attribute attribute = 1;
}

message GetAttributesByValueFqnsRequest {
  repeated string fqns = 1 [(buf.validate.field).required = true];
}
message GetAttributesByValueFqnsResponse {
  // map of fqns to complete attributes and the one selected value
  map<string, AttributeAndValue> fqn_attribute_values = 1;
}

message CreateAttributeRequest {
  // Required
  string namespace_id = 1 [(buf.validate.field).required = true];
  string name = 2 [(buf.validate.field).required = true];
  AttributeRuleTypeEnum rule = 3 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];

  // Optional
  common.MetadataMutable metadata = 100;
}
message CreateAttributeResponse {
  Attribute attribute = 1;
}

message UpdateAttributeRequest {
  // Required
  string id = 1 [(buf.validate.field).required = true];

  // Optional
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateAttributeResponse {
  Attribute attribute = 1;
}

message DeactivateAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeactivateAttributeResponse {
  Attribute attribute = 1;
}

///
/// Value RPC messages
///
message GetAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetAttributeValueResponse {
  Value value = 1;
}

message ListAttributeValuesRequest {
  string attribute_id = 1 [(buf.validate.field).required = true];
  // ACTIVE by default when not specified
  common.ActiveStateEnum state = 2;
}
message ListAttributeValuesResponse {
  repeated Value values = 1;
}

message CreateAttributeValueRequest {
  // Required
  string attribute_id = 1 [(buf.validate.field).required = true];
  string value = 2 [(buf.validate.field).required = true];

  // Optional
  repeated string members = 3;

  // Common metadata
  common.MetadataMutable metadata = 100;
}
message CreateAttributeValueResponse {
  Value value = 1;
}

message UpdateAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];

  // Optional
  repeated string members = 4;

  // Common metadata
  common.MetadataMutable metadata = 100;
  common.MetadataUpdateEnum metadata_update_behavior = 101;
}
message UpdateAttributeValueResponse {
  Value value = 1;
}

message DeactivateAttributeValueRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeactivateAttributeValueResponse {
  Value value = 1;
}

/*
   Assign Key Access Server to Attribute and Value
*/

message AssignKeyAccessServerToAttributeRequest {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message AssignKeyAccessServerToAttributeResponse {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message RemoveKeyAccessServerFromAttributeRequest {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message RemoveKeyAccessServerFromAttributeResponse {
  AttributeKeyAccessServer attribute_key_access_server = 1;
}

message AssignKeyAccessServerToValueRequest {
  ValueKeyAccessServer value_key_access_server = 1;
}

message AssignKeyAccessServerToValueResponse {
  ValueKeyAccessServer value_key_access_server = 1;
}

message RemoveKeyAccessServerFromValueRequest {
  ValueKeyAccessServer value_key_access_server = 1;
}

message RemoveKeyAccessServerFromValueResponse {
  ValueKeyAccessServer value_key_access_server = 1;
}

///
/// Attribute Service
///
service AttributesService {
  /*--------------------------------------*
   * Attribute RPCs
   *---------------------------------------*/
  rpc ListAttributes(ListAttributesRequest) returns (ListAttributesResponse) {}
  rpc ListAttributeValues(ListAttributeValuesRequest) returns (ListAttributeValuesResponse) {}

  rpc GetAttribute(GetAttributeRequest) returns (GetAttributeResponse) {
    option (google.api.http) = {get: "/attributes/{id}"};
  }
  rpc GetAttributesByValueFqns(GetAttributesByValueFqnsRequest) returns (GetAttributesByValueFqnsResponse) {
    option (google.api.http) = {get: "/attributes/*/fqn"};
  }

  rpc CreateAttribute(CreateAttributeRequest) returns (CreateAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes"
      body: "*"
    };
  }

  rpc UpdateAttribute(UpdateAttributeRequest) returns (UpdateAttributeResponse) {
    option (google.api.http) = {
      patch: "/attributes/{id}"
      body: "*"
    };
  }

  rpc DeactivateAttribute(DeactivateAttributeRequest) returns (DeactivateAttributeResponse) {
    option (google.api.http) = {delete: "/attributes/{id}"};
  }

  /*--------------------------------------*
   * Value RPCs
   *---------------------------------------*/
  rpc GetAttributeValue(GetAttributeValueRequest) returns (GetAttributeValueResponse) {
    option (google.api.http) = {get: "/attributes/*/values/{id}"};
  }

  rpc CreateAttributeValue(CreateAttributeValueRequest) returns (CreateAttributeValueResponse) {
    option (google.api.http) = {
      post: "/attributes/{attribute_id}/values"
      body: "*"
    };
  }

  rpc UpdateAttributeValue(UpdateAttributeValueRequest) returns (UpdateAttributeValueResponse) {
    option (google.api.http) = {
      patch: "/attributes/*/values/{id}"
      body: "*"
    };
  }

  rpc DeactivateAttributeValue(DeactivateAttributeValueRequest) returns (DeactivateAttributeValueResponse) {
    option (google.api.http) = {delete: "/attributes/*/values/{id}"};
  }

  /*--------------------------------------*
   * Attribute <> Key Access Server RPCs
   *---------------------------------------*/
  rpc AssignKeyAccessServerToAttribute(AssignKeyAccessServerToAttributeRequest) returns (AssignKeyAccessServerToAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes/keyaccessserver/assign"
      body: "attribute_key_access_server"
    };
  }

  rpc RemoveKeyAccessServerFromAttribute(RemoveKeyAccessServerFromAttributeRequest) returns (RemoveKeyAccessServerFromAttributeResponse) {
    option (google.api.http) = {
      post: "/attributes/keyaccessserver/remove"
      body: "attribute_key_access_server"
    };
  }

  rpc AssignKeyAccessServerToValue(AssignKeyAccessServerToValueRequest) returns (AssignKeyAccessServerToValueResponse) {
    option (google.api.http) = {
      post: "/attributes/values/keyaccessserver/assign"
      body: "value_key_access_server"
    };
  }

  rpc RemoveKeyAccessServerFromValue(RemoveKeyAccessServerFromValueRequest) returns (RemoveKeyAccessServerFromValueResponse) {
    option (google.api.http) = {
      post: "/attributes/values/keyaccessserver/remove"
      body: "value_key_access_server"
    };
  }
}
