syntax = "proto3";

package policy.namespaces;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "common/common.proto";

message Namespace {
  // generated uuid in database
  string id = 1;
  // used to partition Attribute Definitions, support by namespace AuthN and enable federation
  string name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.max_len = 253,
    (buf.validate.field).cel = {
      id: "namespace_format",
      message: "Namespace must be a valid hostname. It should include at least one dot, with each segment (label) starting and ending with an alphanumeric character. Each label must be 1 to 63 characters long, allowing hyphens but not as the first or last character. The top-level domain (the last segment after the final dot) must consist of at least two alphabetic characters.",
      expression: "this.matches('^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,}$')"
    }
  ];

  string fqn = 3;

  // active by default until explicitly deactivated
  google.protobuf.BoolValue active = 4;
}

/*

   Namespace Service Definitions

*/

message GetNamespaceRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetNamespaceResponse {
  Namespace namespace = 1;
}

message ListNamespacesRequest {
  // ACTIVE by default when not specified
  common.ActiveStateEnum state = 1;
}
message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message CreateNamespaceRequest {
  string name = 1 [(buf.validate.field).required = true];
}
message CreateNamespaceResponse {
  Namespace namespace = 1;
}

message UpdateNamespaceRequest {
  string id = 1 [(buf.validate.field).required = true];
  string name = 2 [(buf.validate.field).required = true];
}
message UpdateNamespaceResponse {
  Namespace namespace = 1;
}

message DeactivateNamespaceRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message DeactivateNamespaceResponse {}

service NamespaceService {

  /* 
    Request: 
      grpcurl -plaintext -d '{"id": "namespace-id"}' localhost:9000 policy.namespaces.NamespaceService/GetNamespace
    Response:
      {
        "namespace": {
          "id": "namespace-id",
          "name": "namespace-name",
          "active": true
        }
      }
  */
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {
    option (google.api.http) = {get: "/attributes/namespaces/{id}"};
  }

  /*
    NOTE: ACTIVE state by default, INACTIVE or ANY when specified
    Request: 
      grpcurl -plaintext localhost:9000 policy.namespaces.NamespaceService/ListNamespaces
    Response:
      {
        "namespaces": [
          {
            "id": "namespace-id",
            "name": "namespace-name",
            "active": true
          }
        ]
      }
  */  
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {get: "/attributes/namespaces"};
  }

  /*
    Request: 
      grpcurl -plaintext -d '{"name": "namespace-name"}' localhost:9000 policy.namespaces.NamespaceService/CreateNamespace
    Response:
      { "namespace": { "id": "namespace-id", "active": true } }
  */
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse) {
    option (google.api.http) = {post: "/attributes/namespaces"};
  }
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {
    option (google.api.http) = {put: "/attributes/namespaces/{id}"};
  }
  rpc DeactivateNamespace(DeactivateNamespaceRequest) returns (DeactivateNamespaceResponse) {
      option (google.api.http) = {
      delete: "/attributes/namespaces/{id}"
      };
  }
}
