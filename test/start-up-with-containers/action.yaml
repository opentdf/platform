name: 'start-up-with-containers'

description: 'Start the OpenTDF Platform with its containerized resources'

inputs:
  platform-ref:
    required: false
    description: 'The ref to check out for the platform'
    default: 'main'
  extra-keys:
    required: false
    description: A JSON array containing extra keys for the KAS to load. Each object should have 'kid', 'alg', 'private', and 'cert' fields.
    default: '[]'
  ec-tdf-enabled:
    default: false
    description: 'Whether to enable ECC wrapping for TDFs'
    required: false
    type: boolean

outputs:
  platform-working-dir:
    description: 'The working directory for the running platform instance'
    value: 'otdf-test-platform'

runs:
  using: 'composite'
  steps:
    - name: Check out platform
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        repository: opentdf/platform
        # use a distinct path to avoid conflicts
        path: otdf-test-platform
        ref: ${{ inputs.platform-ref }}
        persist-credentials: false
    - name: Download latest init-temp-keys.sh and docker-compose.yaml
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/opentdf/platform/refs/tags/keycloak-image-fix/.github/scripts/init-temp-keys.sh > otdf-test-platform/.github/scripts/init-temp-keys.sh
        curl https://raw.githubusercontent.com/opentdf/platform/refs/tags/keycloak-image-fix/docker-compose.yaml > otdf-test-platform/docker-compose.yaml
    - name: Set up go (platform's go version)
      id: setup-go
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b #v5.4.0
      with:
        go-version-file: 'otdf-test-platform/service/go.mod'
        check-latest: false
        cache-dependency-path: |
          otdf-test-platform/service/go.sum
          otdf-test-platform/protocol/go/go.sum
          otdf-test-platform/sdk/go.sum
    - name: Provide the platform with keys
      shell: bash
      run: .github/scripts/init-temp-keys.sh
      working-directory: otdf-test-platform
    - name: Map the config to the keys
      shell: bash
      env:
        EXTRA_KEYS: ${{ inputs.extra-keys }}
      run: |
        set -e

        keyring='[{"kid":"ec1","alg":"ec:secp256r1"},{"kid":"r1","alg":"rsa:2048"}]'
        keys='[{"kid":"ec1","alg":"ec:secp256r1","private":"kas-ec-private.pem","cert":"kas-ec-cert.pem"},{"kid":"r1","alg":"rsa:2048","private":"kas-private.pem","cert":"kas-cert.pem"}]'
        while IFS= read -r -d $'\0' key_json <&3; do
          printf 'processing %s\n' "${key_json}"
          private_pem="$(jq -r '.privateKey' <<< "${key_json}")"
          cert_pem="$(jq -r '.cert' <<< "${key_json}")"
          kid="$(jq -r '.kid' <<< "${key_json}")"

          # don't allow injection of paths. the regex can't be quoted in bash
          if [[ ! "${kid}" =~ ^[-0-9a-zA-Z_]+$ ]]; then
            printf 'kid is not valid: [%s]\n' "${kid}" 1>&2
            exit 1
          fi

          private_path="${kid}.pem"
          cert_path="${kid}-cert.pem"

          echo "${private_pem}" >"${private_path}"
          echo "${cert_pem}" >"${cert_path}"
          chmod a+r "${private_path}" "${cert_path}"

          key_obj="$(jq '{kid, alg, private: $private, cert: $cert}' --arg private "${private_path}" --arg cert "${cert_path}" <<< "${key_json}")"
          keys="$(jq '. + [$key_obj]' --argjson key_obj "${key_obj}" <<< "${keys}")"

          keyring_obj="$(jq '{kid, alg}' <<< "${key_json}")"
          keyring="$(jq '. + [$keyring_obj]' --argjson keyring_obj "${keyring_obj}" <<< "${keyring}")"

        done 3< <(jq -c --raw-output0 '.[]' <<< "${EXTRA_KEYS}")

        printf 'adding the following keys:\n  [%s]\n[%s]  \n' "${keys}" "${keyring}"

        yq_command="$(printf '(.services.kas.keyring = %s) | (.server.cryptoProvider.standard.keys = %s)' "${keyring}" "${keys}")"

        <opentdf-dev.yaml >opentdf.yaml yq e "${yq_command}"

      working-directory: otdf-test-platform
    - name: Enable ECC wrapping for TDFs
      shell: bash
      if: ${{ inputs.ec-tdf-enabled }}
      run: |
        yq e '.services.kas.ec_tdf_enabled = true' -i opentdf.yaml
      working-directory: otdf-test-platform
    - name: Trust the generated certs
      shell: bash
      run: |
        sudo chmod -R 777 ./keys
        sudo apt-get install -y ca-certificates
        sudo cp ./keys/localhost.crt /usr/local/share/ca-certificates
        sudo update-ca-certificates
      working-directory: otdf-test-platform
    - name: Spin up platform's containerized resources
      shell: bash
      run: docker compose up -d --wait --wait-timeout 240
      working-directory: otdf-test-platform
    - name: Provision realms/clients/users into idP
      shell: bash
      run: go run ./service provision keycloak
      working-directory: otdf-test-platform
    - name: Provision test fixture policy
      shell: bash
      run: go run ./service provision fixtures
      working-directory: otdf-test-platform
    - name: Start platform server in background
      uses: JarvusInnovations/background-action@2428e7b970a846423095c79d43f759abf979a635
      with:
        run: >
          go build -o opentdf -v service/main.go
          && .github/scripts/watch.sh opentdf.yaml ./opentdf start
        wait-on: |
          tcp:localhost:8080
        log-output-if: true
        wait-for: 90s
        working-directory: otdf-test-platform
